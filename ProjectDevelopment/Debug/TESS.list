
TESS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a8c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08008c64  08008c64  00018c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca0  08008ca0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca8  08008ca8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000378c  2000000c  08008cbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20003798  08008cbc  00023798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015405  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032cb  00000000  00000000  00035441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00038710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  00039b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232a9  00000000  00000000  0003ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015248  00000000  00000000  0005e041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc63c  00000000  00000000  00073289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f8c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054ec  00000000  00000000  0014f918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008c4c 	.word	0x08008c4c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08008c4c 	.word	0x08008c4c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96e 	b.w	8000d88 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	4604      	mov	r4, r0
 8000acc:	468c      	mov	ip, r1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 8083 	bne.w	8000bda <__udivmoddi4+0x116>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d947      	bls.n	8000b6a <__udivmoddi4+0xa6>
 8000ada:	fab2 f282 	clz	r2, r2
 8000ade:	b142      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ae0:	f1c2 0020 	rsb	r0, r2, #32
 8000ae4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ae8:	4091      	lsls	r1, r2
 8000aea:	4097      	lsls	r7, r2
 8000aec:	ea40 0c01 	orr.w	ip, r0, r1
 8000af0:	4094      	lsls	r4, r2
 8000af2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000af6:	0c23      	lsrs	r3, r4, #16
 8000af8:	fbbc f6f8 	udiv	r6, ip, r8
 8000afc:	fa1f fe87 	uxth.w	lr, r7
 8000b00:	fb08 c116 	mls	r1, r8, r6, ip
 8000b04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b08:	fb06 f10e 	mul.w	r1, r6, lr
 8000b0c:	4299      	cmp	r1, r3
 8000b0e:	d909      	bls.n	8000b24 <__udivmoddi4+0x60>
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b16:	f080 8119 	bcs.w	8000d4c <__udivmoddi4+0x288>
 8000b1a:	4299      	cmp	r1, r3
 8000b1c:	f240 8116 	bls.w	8000d4c <__udivmoddi4+0x288>
 8000b20:	3e02      	subs	r6, #2
 8000b22:	443b      	add	r3, r7
 8000b24:	1a5b      	subs	r3, r3, r1
 8000b26:	b2a4      	uxth	r4, r4
 8000b28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b38:	45a6      	cmp	lr, r4
 8000b3a:	d909      	bls.n	8000b50 <__udivmoddi4+0x8c>
 8000b3c:	193c      	adds	r4, r7, r4
 8000b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b42:	f080 8105 	bcs.w	8000d50 <__udivmoddi4+0x28c>
 8000b46:	45a6      	cmp	lr, r4
 8000b48:	f240 8102 	bls.w	8000d50 <__udivmoddi4+0x28c>
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	443c      	add	r4, r7
 8000b50:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b54:	eba4 040e 	sub.w	r4, r4, lr
 8000b58:	2600      	movs	r6, #0
 8000b5a:	b11d      	cbz	r5, 8000b64 <__udivmoddi4+0xa0>
 8000b5c:	40d4      	lsrs	r4, r2
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e9c5 4300 	strd	r4, r3, [r5]
 8000b64:	4631      	mov	r1, r6
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	b902      	cbnz	r2, 8000b6e <__udivmoddi4+0xaa>
 8000b6c:	deff      	udf	#255	; 0xff
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	d150      	bne.n	8000c18 <__udivmoddi4+0x154>
 8000b76:	1bcb      	subs	r3, r1, r7
 8000b78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b7c:	fa1f f887 	uxth.w	r8, r7
 8000b80:	2601      	movs	r6, #1
 8000b82:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b86:	0c21      	lsrs	r1, r4, #16
 8000b88:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb08 f30c 	mul.w	r3, r8, ip
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0xe4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0xe2>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	f200 80e9 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	1ac9      	subs	r1, r1, r3
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bb4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bb8:	fb08 f800 	mul.w	r8, r8, r0
 8000bbc:	45a0      	cmp	r8, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x10c>
 8000bc0:	193c      	adds	r4, r7, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x10a>
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	f200 80d9 	bhi.w	8000d80 <__udivmoddi4+0x2bc>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 0408 	sub.w	r4, r4, r8
 8000bd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd8:	e7bf      	b.n	8000b5a <__udivmoddi4+0x96>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d909      	bls.n	8000bf2 <__udivmoddi4+0x12e>
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	f000 80b1 	beq.w	8000d46 <__udivmoddi4+0x282>
 8000be4:	2600      	movs	r6, #0
 8000be6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bea:	4630      	mov	r0, r6
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	fab3 f683 	clz	r6, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d14a      	bne.n	8000c90 <__udivmoddi4+0x1cc>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0x140>
 8000bfe:	4282      	cmp	r2, r0
 8000c00:	f200 80b8 	bhi.w	8000d74 <__udivmoddi4+0x2b0>
 8000c04:	1a84      	subs	r4, r0, r2
 8000c06:	eb61 0103 	sbc.w	r1, r1, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	468c      	mov	ip, r1
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d0a8      	beq.n	8000b64 <__udivmoddi4+0xa0>
 8000c12:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c16:	e7a5      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000c18:	f1c2 0320 	rsb	r3, r2, #32
 8000c1c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c20:	4097      	lsls	r7, r2
 8000c22:	fa01 f002 	lsl.w	r0, r1, r2
 8000c26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2a:	40d9      	lsrs	r1, r3
 8000c2c:	4330      	orrs	r0, r6
 8000c2e:	0c03      	lsrs	r3, r0, #16
 8000c30:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c34:	fa1f f887 	uxth.w	r8, r7
 8000c38:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c40:	fb06 f108 	mul.w	r1, r6, r8
 8000c44:	4299      	cmp	r1, r3
 8000c46:	fa04 f402 	lsl.w	r4, r4, r2
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x19c>
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c52:	f080 808d 	bcs.w	8000d70 <__udivmoddi4+0x2ac>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 808a 	bls.w	8000d70 <__udivmoddi4+0x2ac>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	443b      	add	r3, r7
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b281      	uxth	r1, r0
 8000c64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c70:	fb00 f308 	mul.w	r3, r0, r8
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x1c4>
 8000c78:	1879      	adds	r1, r7, r1
 8000c7a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c7e:	d273      	bcs.n	8000d68 <__udivmoddi4+0x2a4>
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d971      	bls.n	8000d68 <__udivmoddi4+0x2a4>
 8000c84:	3802      	subs	r0, #2
 8000c86:	4439      	add	r1, r7
 8000c88:	1acb      	subs	r3, r1, r3
 8000c8a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c8e:	e778      	b.n	8000b82 <__udivmoddi4+0xbe>
 8000c90:	f1c6 0c20 	rsb	ip, r6, #32
 8000c94:	fa03 f406 	lsl.w	r4, r3, r6
 8000c98:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c9c:	431c      	orrs	r4, r3
 8000c9e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ca2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000caa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cae:	431f      	orrs	r7, r3
 8000cb0:	0c3b      	lsrs	r3, r7, #16
 8000cb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb6:	fa1f f884 	uxth.w	r8, r4
 8000cba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cc2:	fb09 fa08 	mul.w	sl, r9, r8
 8000cc6:	458a      	cmp	sl, r1
 8000cc8:	fa02 f206 	lsl.w	r2, r2, r6
 8000ccc:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x220>
 8000cd2:	1861      	adds	r1, r4, r1
 8000cd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd8:	d248      	bcs.n	8000d6c <__udivmoddi4+0x2a8>
 8000cda:	458a      	cmp	sl, r1
 8000cdc:	d946      	bls.n	8000d6c <__udivmoddi4+0x2a8>
 8000cde:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce2:	4421      	add	r1, r4
 8000ce4:	eba1 010a 	sub.w	r1, r1, sl
 8000ce8:	b2bf      	uxth	r7, r7
 8000cea:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cee:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cf6:	fb00 f808 	mul.w	r8, r0, r8
 8000cfa:	45b8      	cmp	r8, r7
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x24a>
 8000cfe:	19e7      	adds	r7, r4, r7
 8000d00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d04:	d22e      	bcs.n	8000d64 <__udivmoddi4+0x2a0>
 8000d06:	45b8      	cmp	r8, r7
 8000d08:	d92c      	bls.n	8000d64 <__udivmoddi4+0x2a0>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4427      	add	r7, r4
 8000d0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d12:	eba7 0708 	sub.w	r7, r7, r8
 8000d16:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1a:	454f      	cmp	r7, r9
 8000d1c:	46c6      	mov	lr, r8
 8000d1e:	4649      	mov	r1, r9
 8000d20:	d31a      	bcc.n	8000d58 <__udivmoddi4+0x294>
 8000d22:	d017      	beq.n	8000d54 <__udivmoddi4+0x290>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x27a>
 8000d26:	ebb3 020e 	subs.w	r2, r3, lr
 8000d2a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d2e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d32:	40f2      	lsrs	r2, r6
 8000d34:	ea4c 0202 	orr.w	r2, ip, r2
 8000d38:	40f7      	lsrs	r7, r6
 8000d3a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	462e      	mov	r6, r5
 8000d48:	4628      	mov	r0, r5
 8000d4a:	e70b      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	e6e9      	b.n	8000b24 <__udivmoddi4+0x60>
 8000d50:	4618      	mov	r0, r3
 8000d52:	e6fd      	b.n	8000b50 <__udivmoddi4+0x8c>
 8000d54:	4543      	cmp	r3, r8
 8000d56:	d2e5      	bcs.n	8000d24 <__udivmoddi4+0x260>
 8000d58:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d5c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d60:	3801      	subs	r0, #1
 8000d62:	e7df      	b.n	8000d24 <__udivmoddi4+0x260>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e7d2      	b.n	8000d0e <__udivmoddi4+0x24a>
 8000d68:	4660      	mov	r0, ip
 8000d6a:	e78d      	b.n	8000c88 <__udivmoddi4+0x1c4>
 8000d6c:	4681      	mov	r9, r0
 8000d6e:	e7b9      	b.n	8000ce4 <__udivmoddi4+0x220>
 8000d70:	4666      	mov	r6, ip
 8000d72:	e775      	b.n	8000c60 <__udivmoddi4+0x19c>
 8000d74:	4630      	mov	r0, r6
 8000d76:	e74a      	b.n	8000c0e <__udivmoddi4+0x14a>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	4439      	add	r1, r7
 8000d7e:	e713      	b.n	8000ba8 <__udivmoddi4+0xe4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	e724      	b.n	8000bd0 <__udivmoddi4+0x10c>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <FMSTR_CopyMemory>:
* @param    nSize     - memory size (always in bytes)
*
******************************************************************************/

void FMSTR_CopyMemory(FMSTR_ADDR nDestAddr, FMSTR_ADDR nSrcAddr, FMSTR_SIZE8 nSize)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	4613      	mov	r3, r2
 8000d98:	71fb      	strb	r3, [r7, #7]
    FMSTR_U8* ps = (FMSTR_U8*) nSrcAddr;
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	617b      	str	r3, [r7, #20]
    FMSTR_U8* pd = (FMSTR_U8*) nDestAddr;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	613b      	str	r3, [r7, #16]

    while(nSize--) 
 8000da2:	e007      	b.n	8000db4 <FMSTR_CopyMemory+0x28>
    {
        *pd++ = *ps++;
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	1c53      	adds	r3, r2, #1
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1c59      	adds	r1, r3, #1
 8000dae:	6139      	str	r1, [r7, #16]
 8000db0:	7812      	ldrb	r2, [r2, #0]
 8000db2:	701a      	strb	r2, [r3, #0]
    while(nSize--) 
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	71fa      	strb	r2, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f2      	bne.n	8000da4 <FMSTR_CopyMemory+0x18>
    }
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	371c      	adds	r7, #28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <FMSTR_CopyToBuffer>:
* @return This function returns a pointer to next byte in comm. buffer
*
******************************************************************************/

FMSTR_BPTR FMSTR_CopyToBuffer(FMSTR_BPTR pDestBuff, FMSTR_ADDR nSrcAddr, FMSTR_SIZE8 nSize)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	71fb      	strb	r3, [r7, #7]
    FMSTR_U8* ps = (FMSTR_U8*) nSrcAddr;
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	617b      	str	r3, [r7, #20]
    FMSTR_U8* pd = (FMSTR_U8*) pDestBuff;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	613b      	str	r3, [r7, #16]

    while(nSize--)
 8000de2:	e007      	b.n	8000df4 <FMSTR_CopyToBuffer+0x28>
    {
        *pd++ = *ps++;
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	1c53      	adds	r3, r2, #1
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1c59      	adds	r1, r3, #1
 8000dee:	6139      	str	r1, [r7, #16]
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	701a      	strb	r2, [r3, #0]
    while(nSize--)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	1e5a      	subs	r2, r3, #1
 8000df8:	71fa      	strb	r2, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f2      	bne.n	8000de4 <FMSTR_CopyToBuffer+0x18>
    }

    return (FMSTR_BPTR) pd;
 8000dfe:	693b      	ldr	r3, [r7, #16]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <FMSTR_CopyFromBuffer>:
* @return This function returns a pointer to next byte in comm. buffer
*
******************************************************************************/

FMSTR_BPTR FMSTR_CopyFromBuffer(FMSTR_ADDR nDestAddr, FMSTR_BPTR pSrcBuff, FMSTR_SIZE8 nSize)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	4613      	mov	r3, r2
 8000e18:	71fb      	strb	r3, [r7, #7]
    FMSTR_U8* ps = (FMSTR_U8*) pSrcBuff;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	617b      	str	r3, [r7, #20]
    FMSTR_U8* pd = (FMSTR_U8*) nDestAddr;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	613b      	str	r3, [r7, #16]

    while(nSize--)
 8000e22:	e007      	b.n	8000e34 <FMSTR_CopyFromBuffer+0x28>
    {
        *pd++ = *ps++;
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	1c53      	adds	r3, r2, #1
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1c59      	adds	r1, r3, #1
 8000e2e:	6139      	str	r1, [r7, #16]
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	701a      	strb	r2, [r3, #0]
    while(nSize--)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	1e5a      	subs	r2, r3, #1
 8000e38:	71fa      	strb	r2, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f2      	bne.n	8000e24 <FMSTR_CopyFromBuffer+0x18>
    }

    return (FMSTR_BPTR) ps;
 8000e3e:	697b      	ldr	r3, [r7, #20]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <FMSTR_CopyFromBufferWithMask>:
* @param  nSize     - buffer size (always in bytes)
*
******************************************************************************/

void FMSTR_CopyFromBufferWithMask(FMSTR_ADDR nDestAddr, FMSTR_BPTR pSrcBuff, FMSTR_SIZE8 nSize)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	4613      	mov	r3, r2
 8000e58:	71fb      	strb	r3, [r7, #7]
    FMSTR_U8* ps = (FMSTR_U8*) pSrcBuff;
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	61fb      	str	r3, [r7, #28]
    FMSTR_U8* pd = (FMSTR_U8*) nDestAddr;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	61bb      	str	r3, [r7, #24]
    FMSTR_U8* pm = ps + nSize;
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	4413      	add	r3, r2
 8000e68:	617b      	str	r3, [r7, #20]
    FMSTR_U8 mask, stmp, dtmp;

    while(nSize--)
 8000e6a:	e021      	b.n	8000eb0 <FMSTR_CopyFromBufferWithMask+0x64>
    {
        mask = *pm++;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	617a      	str	r2, [r7, #20]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	74fb      	strb	r3, [r7, #19]
        stmp = *ps++;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	61fa      	str	r2, [r7, #28]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	74bb      	strb	r3, [r7, #18]
        dtmp = *pd;
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	747b      	strb	r3, [r7, #17]

        /* perform AND-masking */
        stmp = (FMSTR_U8) ((stmp & mask) | (dtmp & ~mask));
 8000e86:	7cba      	ldrb	r2, [r7, #18]
 8000e88:	7cfb      	ldrb	r3, [r7, #19]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	b25a      	sxtb	r2, r3
 8000e90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	b259      	sxtb	r1, r3
 8000e98:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	74bb      	strb	r3, [r7, #18]

        /* put the result back */
        *pd++ = stmp;
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	1c5a      	adds	r2, r3, #1
 8000eaa:	61ba      	str	r2, [r7, #24]
 8000eac:	7cba      	ldrb	r2, [r7, #18]
 8000eae:	701a      	strb	r2, [r3, #0]
    while(nSize--)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	1e5a      	subs	r2, r3, #1
 8000eb4:	71fa      	strb	r2, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1d8      	bne.n	8000e6c <FMSTR_CopyFromBufferWithMask+0x20>
    }
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	3724      	adds	r7, #36	; 0x24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <FMSTR_SetExAddr>:
******************************************************************************/

static FMSTR_BOOL pcm_bNextAddrIsEx;

void FMSTR_SetExAddr(FMSTR_BOOL bNextAddrIsEx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
    pcm_bNextAddrIsEx = bNextAddrIsEx;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <FMSTR_SetExAddr+0x1c>)
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	8013      	strh	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20000028 	.word	0x20000028

08000ee8 <FMSTR_AddressToBuffer>:
*         32 or 16 bit wide (based on previous call to FMSTR_SetExAddr)
*
******************************************************************************/

FMSTR_BPTR FMSTR_AddressToBuffer(FMSTR_BPTR pDest, FMSTR_ADDR nAddr)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
    if(pcm_bNextAddrIsEx)
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <FMSTR_AddressToBuffer+0x3c>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <FMSTR_AddressToBuffer+0x20>
    {
        /* fill in the 32bit address */
#if FMSTR_BYTE_BUFFER_ACCESS
        pDest = FMSTR_CopyToBuffer(pDest, (FMSTR_ADDR)&nAddr, 4U);
#else
        *(FMSTR_U32*) pDest = ((FMSTR_U32)nAddr);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	601a      	str	r2, [r3, #0]
        pDest += 4;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3304      	adds	r3, #4
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	e006      	b.n	8000f16 <FMSTR_AddressToBuffer+0x2e>
    {
        /* fill in the 16bit address (never used) */
#if FMSTR_BYTE_BUFFER_ACCESS
        pDest = FMSTR_CopyToBuffer(pDest, (FMSTR_ADDR)&nAddr, 2U);
#else
        *(FMSTR_U16*) pDest = ((FMSTR_U16)nAddr);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	801a      	strh	r2, [r3, #0]
        pDest += 2;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3302      	adds	r3, #2
 8000f14:	607b      	str	r3, [r7, #4]
#endif
    }

    return pDest;
 8000f16:	687b      	ldr	r3, [r7, #4]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	20000028 	.word	0x20000028

08000f28 <FMSTR_AddressFromBuffer>:
* @brief  Fetch address from communication buffer
*
******************************************************************************/

FMSTR_BPTR FMSTR_AddressFromBuffer(FMSTR_ADDR* pAddr, FMSTR_BPTR pSrc)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
    if(pcm_bNextAddrIsEx)
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <FMSTR_AddressFromBuffer+0x40>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d007      	beq.n	8000f4a <FMSTR_AddressFromBuffer+0x22>
    {
#if FMSTR_BYTE_BUFFER_ACCESS
        pSrc = FMSTR_CopyFromBuffer((FMSTR_ADDR)(FMSTR_U8*)pAddr, pSrc, 4U);
#else
        *pAddr = (FMSTR_ADDR) *((FMSTR_U32*) pSrc);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
        pSrc += 4;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3304      	adds	r3, #4
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	e007      	b.n	8000f5a <FMSTR_AddressFromBuffer+0x32>
    else
    {
#if FMSTR_BYTE_BUFFER_ACCESS
        pSrc = FMSTR_CopyFromBuffer((FMSTR_ADDR)(FMSTR_U8*)pAddr, pSrc, 2U);
#else
        *pAddr = (FMSTR_ADDR) *((FMSTR_U16*) pSrc);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	601a      	str	r2, [r3, #0]
        pSrc += 2;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	3302      	adds	r3, #2
 8000f58:	603b      	str	r3, [r7, #0]
#endif
    }

    return pSrc;
 8000f5a:	683b      	ldr	r3, [r7, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	20000028 	.word	0x20000028

08000f6c <FMSTR_InitAppCmds>:
* @brief    Initialize app.cmds interface
*
******************************************************************************/

void FMSTR_InitAppCmds(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
#if FMSTR_MAX_APPCMD_CALLS
    FMSTR_INDEX i;
    
    for(i=0; i<FMSTR_MAX_APPCMD_CALLS; i++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	80fb      	strh	r3, [r7, #6]
 8000f76:	e011      	b.n	8000f9c <FMSTR_InitAppCmds+0x30>
    {
        pcm_pAppCmdCallId[i] = FMSTR_APPCMDRESULT_NOCMD;
 8000f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <FMSTR_InitAppCmds+0x50>)
 8000f7e:	21ff      	movs	r1, #255	; 0xff
 8000f80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        pcm_pAppCmdCallFunc[i] = NULL;
 8000f84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <FMSTR_InitAppCmds+0x54>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(i=0; i<FMSTR_MAX_APPCMD_CALLS; i++)
 8000f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	3301      	adds	r3, #1
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	80fb      	strh	r3, [r7, #6]
 8000f9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	dde9      	ble.n	8000f78 <FMSTR_InitAppCmds+0xc>
    }
#endif      

    pcm_nAppCmd = (FMSTR_APPCMD_CODE) FMSTR_APPCMDRESULT_NOCMD;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <FMSTR_InitAppCmds+0x58>)
 8000fa6:	22ff      	movs	r2, #255	; 0xff
 8000fa8:	801a      	strh	r2, [r3, #0]
    pcm_nAppCmdResult = (FMSTR_APPCMD_RESULT) FMSTR_APPCMDRESULT_NOCMD;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <FMSTR_InitAppCmds+0x5c>)
 8000fac:	22ff      	movs	r2, #255	; 0xff
 8000fae:	801a      	strh	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000074 	.word	0x20000074
 8000fc0:	2000007c 	.word	0x2000007c
 8000fc4:	2000002a 	.word	0x2000002a
 8000fc8:	2000006e 	.word	0x2000006e

08000fcc <FMSTR_StoreAppCmd>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_StoreAppCmd(FMSTR_BPTR pMessageIO)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	617b      	str	r3, [r7, #20]
    FMSTR_U8 nArgsLen;
    FMSTR_U8 nCode;

    /* the previous command not yet processed */
    if(pcm_nAppCmd != ((FMSTR_APPCMD_CODE) FMSTR_APPCMDRESULT_NOCMD))
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <FMSTR_StoreAppCmd+0x9c>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2bff      	cmp	r3, #255	; 0xff
 8000fde:	d005      	beq.n	8000fec <FMSTR_StoreAppCmd+0x20>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_SERVBUSY);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2287      	movs	r2, #135	; 0x87
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	e039      	b.n	8001060 <FMSTR_StoreAppCmd+0x94>
    }

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nArgsLen, pMessageIO);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nCode, pMessageIO);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	73bb      	strb	r3, [r7, #14]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3301      	adds	r3, #1
 8001008:	607b      	str	r3, [r7, #4]

    /* args len is datalen minus one */
    nArgsLen--;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	3b01      	subs	r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	73fb      	strb	r3, [r7, #15]
        
    /* does the application command fit to buffer ? */
    if (nArgsLen > (FMSTR_SIZE8) FMSTR_APPCMD_BUFF_SIZE)
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	2b20      	cmp	r3, #32
 8001016:	d905      	bls.n	8001024 <FMSTR_StoreAppCmd+0x58>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVBUFF);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	2285      	movs	r2, #133	; 0x85
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	e01d      	b.n	8001060 <FMSTR_StoreAppCmd+0x94>
    }
    
    /* store command data into dedicated buffer */
    pcm_nAppCmd = nCode;
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <FMSTR_StoreAppCmd+0x9c>)
 800102a:	801a      	strh	r2, [r3, #0]
    pcm_nAppCmdLen = nArgsLen;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <FMSTR_StoreAppCmd+0xa0>)
 8001032:	801a      	strh	r2, [r3, #0]
    
    /* data copy */
    if(nArgsLen)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d007      	beq.n	800104a <FMSTR_StoreAppCmd+0x7e>
    {
        FMSTR_ADDR appCmdBuffAddr;
        FMSTR_ARR2ADDR(appCmdBuffAddr, pcm_pAppCmdBuff);
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <FMSTR_StoreAppCmd+0xa4>)
 800103c:	613b      	str	r3, [r7, #16]
        
        /*lint -e{534} ignoring return value */
        FMSTR_CopyFromBuffer(appCmdBuffAddr, pMessageIO, (FMSTR_SIZE8) nArgsLen);
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	461a      	mov	r2, r3
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	6938      	ldr	r0, [r7, #16]
 8001046:	f7ff fee1 	bl	8000e0c <FMSTR_CopyFromBuffer>
    }

    /* mark command as "running" (without any response data) */
    pcm_nAppCmdResult = (FMSTR_APPCMD_RESULT) FMSTR_APPCMDRESULT_RUNNING;
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <FMSTR_StoreAppCmd+0xa8>)
 800104c:	22fe      	movs	r2, #254	; 0xfe
 800104e:	801a      	strh	r2, [r3, #0]
    pcm_nAppCmdResultDataLen = 0U;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <FMSTR_StoreAppCmd+0xac>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]

    return FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000002a 	.word	0x2000002a
 800106c:	2000006c 	.word	0x2000006c
 8001070:	2000002c 	.word	0x2000002c
 8001074:	2000006e 	.word	0x2000006e
 8001078:	20000070 	.word	0x20000070

0800107c <FMSTR_GetAppCmdStatus>:
*       sure the PC already got the command delivery packet acknowledged.
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetAppCmdStatus(FMSTR_BPTR pMessageIO)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
#if FMSTR_MAX_APPCMD_CALLS
    FMSTR_PAPPCMDFUNC pFunc = NULL;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
    FMSTR_INDEX nIndex;
    
    /* time to execute the command's callback */
    if((nIndex = FMSTR_FindAppCmdCallIndex(pcm_nAppCmd)) >= 0)
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <FMSTR_GetAppCmdStatus+0x74>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f889 	bl	80011a4 <FMSTR_FindAppCmdCallIndex>
 8001092:	4603      	mov	r3, r0
 8001094:	817b      	strh	r3, [r7, #10]
 8001096:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db05      	blt.n	80010aa <FMSTR_GetAppCmdStatus+0x2e>
    {
        pFunc = pcm_pAppCmdCallFunc[nIndex];
 800109e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <FMSTR_GetAppCmdStatus+0x78>)
 80010a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a8:	60fb      	str	r3, [r7, #12]
    }
    
    /* valid callback function found? */
    if(pFunc)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00d      	beq.n	80010cc <FMSTR_GetAppCmdStatus+0x50>
    {
        /* do execute callback, return value is app.cmd result code */
        pcm_nAppCmdResult = pFunc(pcm_nAppCmd, pcm_pAppCmdBuff, pcm_nAppCmdLen);
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <FMSTR_GetAppCmdStatus+0x74>)
 80010b2:	8818      	ldrh	r0, [r3, #0]
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <FMSTR_GetAppCmdStatus+0x7c>)
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4910      	ldr	r1, [pc, #64]	; (80010fc <FMSTR_GetAppCmdStatus+0x80>)
 80010bc:	4798      	blx	r3
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <FMSTR_GetAppCmdStatus+0x84>)
 80010c4:	801a      	strh	r2, [r3, #0]

        /* nothing more to do with this command (i.e. command acknowledged) */
        pcm_nAppCmd = FMSTR_APPCMDRESULT_NOCMD;
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <FMSTR_GetAppCmdStatus+0x74>)
 80010c8:	22ff      	movs	r2, #255	; 0xff
 80010ca:	801a      	strh	r2, [r3, #0]
    }
#endif

    pMessageIO = FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STS_OK);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3301      	adds	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
    return FMSTR_ValueToBuffer8(pMessageIO, (FMSTR_U8) pcm_nAppCmdResult);
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <FMSTR_GetAppCmdStatus+0x84>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3301      	adds	r3, #1
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000002a 	.word	0x2000002a
 80010f4:	2000007c 	.word	0x2000007c
 80010f8:	2000006c 	.word	0x2000006c
 80010fc:	2000002c 	.word	0x2000002c
 8001100:	2000006e 	.word	0x2000006e

08001104 <FMSTR_GetAppCmdRespData>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetAppCmdRespData(FMSTR_BPTR pMessageIO)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	617b      	str	r3, [r7, #20]
    FMSTR_U8 nDataLen;
    FMSTR_U8 nDataOffset;

    /* the previous command not yet processed */
    if(pcm_nAppCmd != ((FMSTR_APPCMD_CODE)FMSTR_APPCMDRESULT_NOCMD))
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <FMSTR_GetAppCmdRespData+0x94>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	2bff      	cmp	r3, #255	; 0xff
 8001116:	d005      	beq.n	8001124 <FMSTR_GetAppCmdRespData+0x20>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_SERVBUSY);
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2287      	movs	r2, #135	; 0x87
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	e035      	b.n	8001190 <FMSTR_GetAppCmdRespData+0x8c>
    }

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3301      	adds	r3, #1
 8001128:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nDataLen, pMessageIO);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3301      	adds	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nDataOffset, pMessageIO);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	73bb      	strb	r3, [r7, #14]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3301      	adds	r3, #1
 8001140:	607b      	str	r3, [r7, #4]

    /* the response would not fit into comm buffer */
    if(nDataLen > (FMSTR_U16)FMSTR_COMM_BUFFER_SIZE)
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b3c      	cmp	r3, #60	; 0x3c
 8001146:	d905      	bls.n	8001154 <FMSTR_GetAppCmdRespData+0x50>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_RSPBUFFOVF);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2284      	movs	r2, #132	; 0x84
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	e01d      	b.n	8001190 <FMSTR_GetAppCmdRespData+0x8c>
    }
    
    /* the data would be fetched outside the app.cmd response data */
    if((((FMSTR_U16)nDataOffset) + nDataLen) > (FMSTR_SIZE8)pcm_nAppCmdResultDataLen)
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	461a      	mov	r2, r3
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4413      	add	r3, r2
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <FMSTR_GetAppCmdRespData+0x98>)
 800115e:	7812      	ldrb	r2, [r2, #0]
 8001160:	4293      	cmp	r3, r2
 8001162:	dd05      	ble.n	8001170 <FMSTR_GetAppCmdRespData+0x6c>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVSIZE);
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	2286      	movs	r2, #134	; 0x86
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	e00f      	b.n	8001190 <FMSTR_GetAppCmdRespData+0x8c>
    }
    
    pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]

    /* copy to buffer */
    {    
        FMSTR_ADDR appCmdBuffAddr;
        FMSTR_ARR2ADDR(appCmdBuffAddr, pcm_pAppCmdBuff);
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <FMSTR_GetAppCmdRespData+0x9c>)
 800117e:	613b      	str	r3, [r7, #16]
        pResponse = FMSTR_CopyToBuffer(pResponse, appCmdBuffAddr, (FMSTR_SIZE8)nDataLen);
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	461a      	mov	r2, r3
 8001184:	6939      	ldr	r1, [r7, #16]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff fe20 	bl	8000dcc <FMSTR_CopyToBuffer>
 800118c:	6178      	str	r0, [r7, #20]
    }
    
    return pResponse;
 800118e:	697b      	ldr	r3, [r7, #20]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000002a 	.word	0x2000002a
 800119c:	20000070 	.word	0x20000070
 80011a0:	2000002c 	.word	0x2000002c

080011a4 <FMSTR_FindAppCmdCallIndex>:
* @return   Index of function pointer in our local tables
*
******************************************************************************/

static FMSTR_INDEX FMSTR_FindAppCmdCallIndex(FMSTR_APPCMD_CODE nAppcmdCode)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
#if FMSTR_MAX_APPCMD_CALLS > 0
    FMSTR_INDEX i;
    
    for(i=0; i<FMSTR_MAX_APPCMD_CALLS; i++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	81fb      	strh	r3, [r7, #14]
 80011b2:	e010      	b.n	80011d6 <FMSTR_FindAppCmdCallIndex+0x32>
    {
        if(pcm_pAppCmdCallId[i] == nAppcmdCode)
 80011b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <FMSTR_FindAppCmdCallIndex+0x4c>)
 80011ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011be:	88fa      	ldrh	r2, [r7, #6]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d102      	bne.n	80011ca <FMSTR_FindAppCmdCallIndex+0x26>
        {
            return i;
 80011c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c8:	e00b      	b.n	80011e2 <FMSTR_FindAppCmdCallIndex+0x3e>
    for(i=0; i<FMSTR_MAX_APPCMD_CALLS; i++)
 80011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	3301      	adds	r3, #1
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	81fb      	strh	r3, [r7, #14]
 80011d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	ddea      	ble.n	80011b4 <FMSTR_FindAppCmdCallIndex+0x10>
    /*lint -esym(528, FMSTR_FindAppCmdCallIndex) this function is 
      not referenced when APPCMD_CALLS are not used */
    FMSTR_UNUSED(nAppcmdCode);
#endif
        
    return -1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000074 	.word	0x20000074

080011f4 <FMSTR_Init>:
* @brief    FreeMASTER driver initialization
*
******************************************************************************/

FMSTR_BOOL FMSTR_Init(void)
{   
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    FMSTR_InitTsa();
#endif

#if FMSTR_USE_SCOPE
    /* initialize Scope */
    FMSTR_InitScope();
 80011f8:	f000 fe32 	bl	8001e60 <FMSTR_InitScope>
#endif

#if FMSTR_USE_RECORDER
    /* initialize Recorder */
    FMSTR_InitRec();
 80011fc:	f000 faae 	bl	800175c <FMSTR_InitRec>
#endif

#if FMSTR_USE_APPCMD
    /* initialize application commands */
    FMSTR_InitAppCmds();
 8001200:	f7ff feb4 	bl	8000f6c <FMSTR_InitAppCmds>
    FMSTR_InitPDBdm();
#endif  
    
#if FMSTR_USE_SERIAL
    /* initialize communication and start listening for commands */
    if (!FMSTR_InitSerial())
 8001204:	f001 f928 	bl	8002458 <FMSTR_InitSerial>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <FMSTR_Init+0x1e>
        return FMSTR_FALSE;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <FMSTR_Init+0x20>
#if FMSTR_DEBUG_TX
    /* start in the debugging mode, we will be sending test frames periodically */
    pcm_bDebugTx = FMSTR_TRUE;
#endif

    return FMSTR_TRUE;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	bd80      	pop	{r7, pc}

08001218 <FMSTR_ProtocolDecoder>:
* in this call as well.
*
******************************************************************************/

FMSTR_BOOL FMSTR_ProtocolDecoder(FMSTR_BPTR pMessageIO)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponseEnd;
    FMSTR_U8 nCmd;
    
    /* no EX access by default */
    FMSTR_SetExAddr(FMSTR_FALSE);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fe51 	bl	8000ec8 <FMSTR_SetExAddr>
    
    /* command code comes first in the message */
    /*lint -e{534} return value is not used */
    (void)FMSTR_ValueFromBuffer8(&nCmd, pMessageIO);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	72bb      	strb	r3, [r7, #10]
    
    /* process command   */
    switch (nCmd)
 800122c:	7abb      	ldrb	r3, [r7, #10]
 800122e:	2b10      	cmp	r3, #16
 8001230:	f300 8096 	bgt.w	8001360 <FMSTR_ProtocolDecoder+0x148>
 8001234:	2b00      	cmp	r3, #0
 8001236:	dc6b      	bgt.n	8001310 <FMSTR_ProtocolDecoder+0xf8>
 8001238:	e12a      	b.n	8001490 <FMSTR_ProtocolDecoder+0x278>
 800123a:	3bc0      	subs	r3, #192	; 0xc0
 800123c:	2b31      	cmp	r3, #49	; 0x31
 800123e:	f200 8127 	bhi.w	8001490 <FMSTR_ProtocolDecoder+0x278>
 8001242:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <FMSTR_ProtocolDecoder+0x30>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001487 	.word	0x08001487
 800124c:	080013d9 	.word	0x080013d9
 8001250:	080013e3 	.word	0x080013e3
 8001254:	080013cf 	.word	0x080013cf
 8001258:	08001491 	.word	0x08001491
 800125c:	080013c5 	.word	0x080013c5
 8001260:	08001417 	.word	0x08001417
 8001264:	08001491 	.word	0x08001491
 8001268:	08001491 	.word	0x08001491
 800126c:	080013fd 	.word	0x080013fd
 8001270:	08001491 	.word	0x08001491
 8001274:	08001491 	.word	0x08001491
 8001278:	08001491 	.word	0x08001491
 800127c:	08001491 	.word	0x08001491
 8001280:	08001491 	.word	0x08001491
 8001284:	08001491 	.word	0x08001491
 8001288:	08001375 	.word	0x08001375
 800128c:	08001387 	.word	0x08001387
 8001290:	08001399 	.word	0x08001399
 8001294:	08001421 	.word	0x08001421
 8001298:	08001491 	.word	0x08001491
 800129c:	08001491 	.word	0x08001491
 80012a0:	08001491 	.word	0x08001491
 80012a4:	08001491 	.word	0x08001491
 80012a8:	08001491 	.word	0x08001491
 80012ac:	08001491 	.word	0x08001491
 80012b0:	08001491 	.word	0x08001491
 80012b4:	08001491 	.word	0x08001491
 80012b8:	08001491 	.word	0x08001491
 80012bc:	08001491 	.word	0x08001491
 80012c0:	08001491 	.word	0x08001491
 80012c4:	08001491 	.word	0x08001491
 80012c8:	0800136f 	.word	0x0800136f
 80012cc:	08001381 	.word	0x08001381
 80012d0:	08001393 	.word	0x08001393
 80012d4:	0800144b 	.word	0x0800144b
 80012d8:	08001457 	.word	0x08001457
 80012dc:	0800146f 	.word	0x0800146f
 80012e0:	08001491 	.word	0x08001491
 80012e4:	08001491 	.word	0x08001491
 80012e8:	08001491 	.word	0x08001491
 80012ec:	08001491 	.word	0x08001491
 80012f0:	08001491 	.word	0x08001491
 80012f4:	08001491 	.word	0x08001491
 80012f8:	08001491 	.word	0x08001491
 80012fc:	08001491 	.word	0x08001491
 8001300:	08001491 	.word	0x08001491
 8001304:	08001491 	.word	0x08001491
 8001308:	08001463 	.word	0x08001463
 800130c:	0800147b 	.word	0x0800147b
 8001310:	3b01      	subs	r3, #1
 8001312:	2b0f      	cmp	r3, #15
 8001314:	f200 80bc 	bhi.w	8001490 <FMSTR_ProtocolDecoder+0x278>
 8001318:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <FMSTR_ProtocolDecoder+0x108>)
 800131a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131e:	bf00      	nop
 8001320:	080013ab 	.word	0x080013ab
 8001324:	08001431 	.word	0x08001431
 8001328:	08001441 	.word	0x08001441
 800132c:	080013a5 	.word	0x080013a5
 8001330:	0800142b 	.word	0x0800142b
 8001334:	0800143b 	.word	0x0800143b
 8001338:	08001491 	.word	0x08001491
 800133c:	080013bb 	.word	0x080013bb
 8001340:	080013f3 	.word	0x080013f3
 8001344:	080013b5 	.word	0x080013b5
 8001348:	080013ed 	.word	0x080013ed
 800134c:	08001491 	.word	0x08001491
 8001350:	08001491 	.word	0x08001491
 8001354:	08001491 	.word	0x08001491
 8001358:	08001491 	.word	0x08001491
 800135c:	0800140d 	.word	0x0800140d
 8001360:	2bf1      	cmp	r3, #241	; 0xf1
 8001362:	f300 8095 	bgt.w	8001490 <FMSTR_ProtocolDecoder+0x278>
 8001366:	2bc0      	cmp	r3, #192	; 0xc0
 8001368:	f6bf af67 	bge.w	800123a <FMSTR_ProtocolDecoder+0x22>
 800136c:	e090      	b.n	8001490 <FMSTR_ProtocolDecoder+0x278>
#if FMSTR_USE_READVAR

        /* read byte */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_READVAR8_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 800136e:	2001      	movs	r0, #1
 8001370:	f7ff fdaa 	bl	8000ec8 <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_READVAR8:
#endif          
            pResponseEnd = FMSTR_ReadVar(pMessageIO, 1U);
 8001374:	2101      	movs	r1, #1
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f938 	bl	80015ec <FMSTR_ReadVar>
 800137c:	60f8      	str	r0, [r7, #12]
            break;
 800137e:	e08e      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>
            
        /* read word */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_READVAR16_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff fda1 	bl	8000ec8 <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_READVAR16:
#endif
            pResponseEnd = FMSTR_ReadVar(pMessageIO, 2U);
 8001386:	2102      	movs	r1, #2
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f92f 	bl	80015ec <FMSTR_ReadVar>
 800138e:	60f8      	str	r0, [r7, #12]
            break;
 8001390:	e085      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>
            
        /* read dword */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_READVAR32_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fd98 	bl	8000ec8 <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_READVAR32:
#endif
            pResponseEnd = FMSTR_ReadVar(pMessageIO, 4U);
 8001398:	2104      	movs	r1, #4
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f926 	bl	80015ec <FMSTR_ReadVar>
 80013a0:	60f8      	str	r0, [r7, #12]
            break;
 80013a2:	e07c      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>
#if FMSTR_USE_READMEM

        /* read a block of memory */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_READMEM_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff fd8f 	bl	8000ec8 <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_READMEM:
#endif
            pResponseEnd = FMSTR_ReadMem(pMessageIO);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f8ee 	bl	800158c <FMSTR_ReadMem>
 80013b0:	60f8      	str	r0, [r7, #12]
            break;
 80013b2:	e074      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>
#if FMSTR_USE_SCOPE

        /* prepare scope variables */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_SETUPSCOPE_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff fd87 	bl	8000ec8 <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_SETUPSCOPE:
#endif
            pResponseEnd = FMSTR_SetUpScope(pMessageIO);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fd58 	bl	8001e70 <FMSTR_SetUpScope>
 80013c0:	60f8      	str	r0, [r7, #12]
            break;  
 80013c2:	e06c      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>
            
        case FMSTR_CMD_READSCOPE:
            pResponseEnd = FMSTR_ReadScope(pMessageIO);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 fdad 	bl	8001f24 <FMSTR_ReadScope>
 80013ca:	60f8      	str	r0, [r7, #12]
            break;
 80013cc:	e067      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>

#if FMSTR_USE_RECORDER

        /* get recorder status */
        case FMSTR_CMD_GETRECSTS:
            pResponseEnd = FMSTR_GetRecStatus(pMessageIO);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 fb8c 	bl	8001aec <FMSTR_GetRecStatus>
 80013d4:	60f8      	str	r0, [r7, #12]
            break;
 80013d6:	e062      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>

        /* start recorder */
        case FMSTR_CMD_STARTREC:
            pResponseEnd = FMSTR_StartRec(pMessageIO);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 fb11 	bl	8001a00 <FMSTR_StartRec>
 80013de:	60f8      	str	r0, [r7, #12]
            break;
 80013e0:	e05d      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>

        /* stop recorder */
        case FMSTR_CMD_STOPREC:
            pResponseEnd = FMSTR_StopRec(pMessageIO);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fb5a 	bl	8001a9c <FMSTR_StopRec>
 80013e8:	60f8      	str	r0, [r7, #12]
            break;
 80013ea:	e058      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>

        /* setup recorder */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_SETUPREC_EX:                 
            FMSTR_SetExAddr(FMSTR_TRUE);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff fd6b 	bl	8000ec8 <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_SETUPREC:                    
#endif
            pResponseEnd = FMSTR_SetUpRec(pMessageIO);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f9d2 	bl	800179c <FMSTR_SetUpRec>
 80013f8:	60f8      	str	r0, [r7, #12]
            break;
 80013fa:	e050      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>
            
        /* get recorder buffer information (force EX instead of non-EX) */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_GETRECBUFF_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff fd63 	bl	8000ec8 <FMSTR_SetExAddr>
#elif FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_GETRECBUFF:                  
#endif
            pResponseEnd = FMSTR_GetRecBuff(pMessageIO);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fba2 	bl	8001b4c <FMSTR_GetRecBuff>
 8001408:	60f8      	str	r0, [r7, #12]
            break; 
 800140a:	e048      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>
 
#if FMSTR_USE_APPCMD

        /* accept the application command */
        case FMSTR_CMD_SENDAPPCMD:
            pResponseEnd = FMSTR_StoreAppCmd(pMessageIO);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fddd 	bl	8000fcc <FMSTR_StoreAppCmd>
 8001412:	60f8      	str	r0, [r7, #12]
            break;
 8001414:	e043      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>

        /* get the application command status */
        case FMSTR_CMD_GETAPPCMDSTS:
            pResponseEnd = FMSTR_GetAppCmdStatus(pMessageIO);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fe30 	bl	800107c <FMSTR_GetAppCmdStatus>
 800141c:	60f8      	str	r0, [r7, #12]
            break;
 800141e:	e03e      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>

        /* get the application command data */
        case FMSTR_CMD_GETAPPCMDDATA:
            pResponseEnd = FMSTR_GetAppCmdRespData(pMessageIO);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fe6f 	bl	8001104 <FMSTR_GetAppCmdRespData>
 8001426:	60f8      	str	r0, [r7, #12]
            break;
 8001428:	e039      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>
#if FMSTR_USE_WRITEMEM

        /* write a block of memory */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_WRITEMEM_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff fd4c 	bl	8000ec8 <FMSTR_SetExAddr>
#endif          
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_WRITEMEM:
#endif
            pResponseEnd = FMSTR_WriteMem(pMessageIO);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f8fe 	bl	8001632 <FMSTR_WriteMem>
 8001436:	60f8      	str	r0, [r7, #12]
            break;
 8001438:	e031      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>
#if FMSTR_USE_WRITEMEMMASK

        /* write block of memory with a bit mask */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_WRITEMEMMASK_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff fd44 	bl	8000ec8 <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_WRITEMEMMASK:
#endif
            pResponseEnd = FMSTR_WriteMemMask(pMessageIO);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f940 	bl	80016c6 <FMSTR_WriteMemMask>
 8001446:	60f8      	str	r0, [r7, #12]
            break;
 8001448:	e029      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>
            
#if FMSTR_USE_WRITEVAR && FMSTR_USE_NOEX_CMDS

        /* write byte */
        case FMSTR_CMD_WRITEVAR8:
            pResponseEnd = FMSTR_WriteVar(pMessageIO, 1U);
 800144a:	2101      	movs	r1, #1
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f917 	bl	8001680 <FMSTR_WriteVar>
 8001452:	60f8      	str	r0, [r7, #12]
            break;
 8001454:	e023      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>

        /* write word */
        case FMSTR_CMD_WRITEVAR16:
            pResponseEnd = FMSTR_WriteVar(pMessageIO, 2U);
 8001456:	2102      	movs	r1, #2
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f911 	bl	8001680 <FMSTR_WriteVar>
 800145e:	60f8      	str	r0, [r7, #12]
            break;
 8001460:	e01d      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>

        /* write dword */
        case FMSTR_CMD_WRITEVAR32:
            pResponseEnd = FMSTR_WriteVar(pMessageIO, 4U);
 8001462:	2104      	movs	r1, #4
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f90b 	bl	8001680 <FMSTR_WriteVar>
 800146a:	60f8      	str	r0, [r7, #12]
            break;
 800146c:	e017      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>

#if FMSTR_USE_WRITEVARMASK && FMSTR_USE_NOEX_CMDS

        /* write byte with mask */
        case FMSTR_CMD_WRITEVAR8MASK:
            pResponseEnd = FMSTR_WriteVarMask(pMessageIO, 1U);
 800146e:	2101      	movs	r1, #1
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 f94f 	bl	8001714 <FMSTR_WriteVarMask>
 8001476:	60f8      	str	r0, [r7, #12]
            break;
 8001478:	e011      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>

        /* write word with mask */
        case FMSTR_CMD_WRITEVAR16MASK:
            pResponseEnd = FMSTR_WriteVarMask(pMessageIO, 2U);
 800147a:	2102      	movs	r1, #2
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f949 	bl	8001714 <FMSTR_WriteVarMask>
 8001482:	60f8      	str	r0, [r7, #12]
            break;
 8001484:	e00b      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>
        case FMSTR_CMD_GETINFOBRIEF:
#else   
        /* retrieve board information structure */
        case FMSTR_CMD_GETINFO: 
#endif
            pResponseEnd = FMSTR_GetBoardInfo(pMessageIO);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f81e 	bl	80014c8 <FMSTR_GetBoardInfo>
 800148c:	60f8      	str	r0, [r7, #12]
            break;
 800148e:	e006      	b.n	800149e <FMSTR_ProtocolDecoder+0x286>
            break;
#endif /* FMSTR_USE_PIPES */

        /* unknown command */
        default:
            pResponseEnd = FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STC_INVCMD);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2281      	movs	r2, #129	; 0x81
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3301      	adds	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
            break;          
 800149c:	bf00      	nop
    }
    
    /* anything to send back? */
    if(pResponseEnd != pMessageIO)
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d00a      	beq.n	80014bc <FMSTR_ProtocolDecoder+0x2a4>
    {
        /*lint -e{946,960} subtracting pointers is appropriate here */
        FMSTR_SIZE8 nSize = (FMSTR_SIZE8)(pResponseEnd - pMessageIO);
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	72fb      	strb	r3, [r7, #11]
#if FMSTR_DEBUG_TX    
        /* the first sane frame received from PC Host ends test frame sending */
        pcm_bDebugTx = 0;
#endif
        FMSTR_SendResponse(pMessageIO, nSize);
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fe5c 	bl	8002170 <FMSTR_SendResponse>
        return FMSTR_TRUE;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <FMSTR_ProtocolDecoder+0x2a6>
    }
    else
    {
        /* nothing sent out */
        return FMSTR_FALSE;
 80014bc:	2300      	movs	r3, #0
    }
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop

080014c8 <FMSTR_GetBoardInfo>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetBoardInfo(FMSTR_BPTR pMessageIO)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	617b      	str	r3, [r7, #20]
    FMSTR_U16 wTmp;
    FMSTR_U8 *pStr;

    pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);              
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_PROT_VER));            /* protVer */
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2203      	movs	r2, #3
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_CFG_FLAGS));           /* cfgFlags */
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_CFG_BUS_WIDTH));       /* dataBusWdt */
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_GLOB_VERSION_MAJOR));  /* globVerMajor */
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2202      	movs	r2, #2
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_GLOB_VERSION_MINOR));  /* globVerMinor */
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_COMM_BUFFER_SIZE));    /* cmdBuffSize  */
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	223c      	movs	r2, #60	; 0x3c
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]

    /* recorder buffer size is always measured in bytes */
#if FMSTR_REC_LARGE_MODE
    wTmp = FMSTR_GetRecBuffSize()/64;
#else
    wTmp = FMSTR_GetRecBuffSize();
 8001528:	f000 fb06 	bl	8001b38 <FMSTR_GetRecBuffSize>
 800152c:	4603      	mov	r3, r0
 800152e:	827b      	strh	r3, [r7, #18]
#endif
    wTmp *= FMSTR_CFG_BUS_WIDTH;

    /* send size and timebase    */
    pResponse = FMSTR_ValueToBuffer16(pResponse, wTmp);
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	8a7a      	ldrh	r2, [r7, #18]
 8001534:	801a      	strh	r2, [r3, #0]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3302      	adds	r3, #2
 800153a:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer16(pResponse, (FMSTR_U16) FMSTR_REC_TIMEBASE);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f248 02c8 	movw	r2, #32968	; 0x80c8
 8001542:	801a      	strh	r2, [r3, #0]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3302      	adds	r3, #2
 8001548:	617b      	str	r3, [r7, #20]
#if FMSTR_LIGHT_VERSION
FMSTR_UNUSED(pStr);
    pResponse = FMSTR_SkipInBuffer(pResponse, (FMSTR_U8)FMSTR_DESCR_SIZE);
#else
    /* description string */
    pStr = (FMSTR_U8*)  FMSTR_IDT_STRING;
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <FMSTR_GetBoardInfo+0xc0>)
 800154c:	60fb      	str	r3, [r7, #12]
    for(wTmp = 0U; wTmp < (FMSTR_U8)(FMSTR_DESCR_SIZE); wTmp++)
 800154e:	2300      	movs	r3, #0
 8001550:	827b      	strh	r3, [r7, #18]
 8001552:	e010      	b.n	8001576 <FMSTR_GetBoardInfo+0xae>
    {
        pResponse = FMSTR_ValueToBuffer8(pResponse, *pStr);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3301      	adds	r3, #1
 8001560:	617b      	str	r3, [r7, #20]

        /* terminating zero used to clear the remainder of the buffer */        
        if(*pStr)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <FMSTR_GetBoardInfo+0xa8>
        {
            pStr ++;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
    for(wTmp = 0U; wTmp < (FMSTR_U8)(FMSTR_DESCR_SIZE); wTmp++)
 8001570:	8a7b      	ldrh	r3, [r7, #18]
 8001572:	3301      	adds	r3, #1
 8001574:	827b      	strh	r3, [r7, #18]
 8001576:	8a7b      	ldrh	r3, [r7, #18]
 8001578:	2b18      	cmp	r3, #24
 800157a:	d9eb      	bls.n	8001554 <FMSTR_GetBoardInfo+0x8c>
    }
#endif /* SEND_IDT_STRING */
    
#endif /* FMSTR_USE_BRIEFINFO */

    return pResponse;   
 800157c:	697b      	ldr	r3, [r7, #20]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	08008c64 	.word	0x08008c64

0800158c <FMSTR_ReadMem>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_ReadMem(FMSTR_BPTR pMessageIO)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nSize;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3302      	adds	r3, #2
 800159c:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nSize, pMessageIO);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3301      	adds	r3, #1
 80015a8:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fcb9 	bl	8000f28 <FMSTR_AddressFromBuffer>
 80015b6:	6078      	str	r0, [r7, #4]
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_EACCESS);
    }
#endif

    /* check the response will safely fit into comm buffer */
    if(nSize > (FMSTR_U8)FMSTR_COMM_BUFFER_SIZE)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b3c      	cmp	r3, #60	; 0x3c
 80015bc:	d905      	bls.n	80015ca <FMSTR_ReadMem+0x3e>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_RSPBUFFOVF);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2284      	movs	r2, #132	; 0x84
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	e00c      	b.n	80015e4 <FMSTR_ReadMem+0x58>
    }
    
    /* success  */
    pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
    
    return FMSTR_CopyToBuffer(pResponse, nAddr, (FMSTR_SIZE8) nSize);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	4619      	mov	r1, r3
 80015dc:	6978      	ldr	r0, [r7, #20]
 80015de:	f7ff fbf5 	bl	8000dcc <FMSTR_CopyToBuffer>
 80015e2:	4603      	mov	r3, r0
}   
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <FMSTR_ReadVar>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_ReadVar(FMSTR_BPTR pMessageIO, FMSTR_SIZE8 nSize)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
    FMSTR_BPTR pResponse = pMessageIO;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	60fb      	str	r3, [r7, #12]
    FMSTR_ADDR nAddr;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3301      	adds	r3, #1
 8001600:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fc8d 	bl	8000f28 <FMSTR_AddressFromBuffer>
 800160e:	6078      	str	r0, [r7, #4]
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_EACCESS);
    }
#endif

    /* success  */
    pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3301      	adds	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
    
    return FMSTR_CopyToBuffer(pResponse, nAddr, nSize);
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	4619      	mov	r1, r3
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff fbd2 	bl	8000dcc <FMSTR_CopyToBuffer>
 8001628:	4603      	mov	r3, r0
}   
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <FMSTR_WriteMem>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_WriteMem(FMSTR_BPTR pMessageIO)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nSize,nResponseCode;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3302      	adds	r3, #2
 8001642:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nSize, pMessageIO);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	72fb      	strb	r3, [r7, #11]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3301      	adds	r3, #1
 800164e:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fc66 	bl	8000f28 <FMSTR_AddressFromBuffer>
 800165c:	6078      	str	r0, [r7, #4]
        goto FMSTR_WriteMem_exit;
    }
#endif

    /*lint -e{534} ignoring function return value */
    FMSTR_CopyFromBuffer(nAddr, pMessageIO, (FMSTR_SIZE8) nSize);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	7afa      	ldrb	r2, [r7, #11]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fbd1 	bl	8000e0c <FMSTR_CopyFromBuffer>
    nResponseCode = FMSTR_STS_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	74fb      	strb	r3, [r7, #19]

#if FMSTR_USE_TSA && FMSTR_USE_TSA_SAFETY
FMSTR_WriteMem_exit:
#endif      
      
    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	7cfa      	ldrb	r2, [r7, #19]
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <FMSTR_WriteVar>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_WriteVar(FMSTR_BPTR pMessageIO, FMSTR_SIZE8 nSize)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
    FMSTR_BPTR pResponse = pMessageIO;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nResponseCode;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3301      	adds	r3, #1
 8001694:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fc43 	bl	8000f28 <FMSTR_AddressFromBuffer>
 80016a2:	6078      	str	r0, [r7, #4]
        goto FMSTR_WriteVar_exit;
    }
#endif

    /*lint -e{534} ignoring function return value */
    FMSTR_CopyFromBuffer(nAddr, pMessageIO, nSize);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fbae 	bl	8000e0c <FMSTR_CopyFromBuffer>
    nResponseCode = FMSTR_STS_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	74fb      	strb	r3, [r7, #19]

#if FMSTR_USE_TSA && FMSTR_USE_TSA_SAFETY
FMSTR_WriteVar_exit:
#endif
      
    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	7cfa      	ldrb	r2, [r7, #19]
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <FMSTR_WriteMemMask>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_WriteMemMask(FMSTR_BPTR pMessageIO)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nSize,nResponseCode;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3302      	adds	r3, #2
 80016d6:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nSize, pMessageIO);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	72fb      	strb	r3, [r7, #11]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3301      	adds	r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fc1c 	bl	8000f28 <FMSTR_AddressFromBuffer>
 80016f0:	6078      	str	r0, [r7, #4]
        goto FMSTR_WriteMemMask_exit;
    }
#endif

    /* put the data */
    FMSTR_CopyFromBufferWithMask(nAddr, pMessageIO, (FMSTR_SIZE8)nSize);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	7afa      	ldrb	r2, [r7, #11]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fba7 	bl	8000e4c <FMSTR_CopyFromBufferWithMask>
    nResponseCode = FMSTR_STS_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	74fb      	strb	r3, [r7, #19]

#if (FMSTR_USE_TSA && FMSTR_USE_TSA_SAFETY) || (FMSTR_CFG_BUS_WIDTH > 1U)
FMSTR_WriteMemMask_exit:
#endif  
      
    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	7cfa      	ldrb	r2, [r7, #19]
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <FMSTR_WriteVarMask>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_WriteVarMask(FMSTR_BPTR pMessageIO, FMSTR_SIZE8 nSize)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
    FMSTR_BPTR pResponse = pMessageIO;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nResponseCode;
    
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3301      	adds	r3, #1
 8001728:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fbf9 	bl	8000f28 <FMSTR_AddressFromBuffer>
 8001736:	6078      	str	r0, [r7, #4]
        goto FMSTR_WriteVarMask_exit;
    }
#endif

    /* put the data */
    FMSTR_CopyFromBufferWithMask(nAddr, pMessageIO, nSize);         
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fb84 	bl	8000e4c <FMSTR_CopyFromBufferWithMask>
    nResponseCode = FMSTR_STS_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	74fb      	strb	r3, [r7, #19]

#if FMSTR_USE_TSA && FMSTR_USE_TSA_SAFETY
FMSTR_WriteVarMask_exit:
#endif      

    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	7cfa      	ldrb	r2, [r7, #19]
 800174c:	701a      	strb	r2, [r3, #0]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <FMSTR_InitRec>:
* @brief    Recorder Initialization
*
******************************************************************************/

void FMSTR_InitRec(void)
{   
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
    /* initialize Recorder flags*/
    pcm_wRecFlags.all = 0U;
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <FMSTR_InitRec+0x1c>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
#elif FMSTR_USE_FASTREC
    /* Initialize Fast Recorder Buffer  */
    FMSTR_InitFastRec();
#else
    /* size in native sizeof units (=bytes on most platforms) */
    FMSTR_ARR2ADDR(pcm_nRecBuffAddr, pcm_pOwnRecBuffer);
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <FMSTR_InitRec+0x20>)
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <FMSTR_InitRec+0x24>)
 800176a:	601a      	str	r2, [r3, #0]
    
    /*lint -esym(528, pcm_pOwnRecBuffer) this symbol is used outside of lint sight */
#endif

}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	2000316c 	.word	0x2000316c
 800177c:	200000a0 	.word	0x200000a0
 8001780:	20000098 	.word	0x20000098

08001784 <FMSTR_AbortRec>:
* @brief    Abort and de-initialize recorder
*
******************************************************************************/

static void FMSTR_AbortRec(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
    /* clear flags */
    pcm_wRecFlags.all = 0U;
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <FMSTR_AbortRec+0x14>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	2000316c 	.word	0x2000316c

0800179c <FMSTR_SetUpRec>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_SetUpRec(FMSTR_BPTR pMessageIO)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	613b      	str	r3, [r7, #16]
    FMSTR_SIZE_RECBUFF blen;
    FMSTR_U8 i, sz;
    FMSTR_U8 nResponseCode;
    
    /* de-initialize first   */
    FMSTR_AbortRec();
 80017a8:	f7ff ffec 	bl	8001784 <FMSTR_AbortRec>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVBUFF);
    }
#elif (FMSTR_USE_FASTREC) == 0
    /* size in native sizeof units (=bytes on most platforms) */
    FMSTR_ARR2ADDR(pcm_nRecBuffAddr, pcm_pOwnRecBuffer);
 80017ac:	4a6f      	ldr	r2, [pc, #444]	; (800196c <FMSTR_SetUpRec+0x1d0>)
 80017ae:	4b70      	ldr	r3, [pc, #448]	; (8001970 <FMSTR_SetUpRec+0x1d4>)
 80017b0:	601a      	str	r2, [r3, #0]
#endif

    /* seek the setup data */
#if (FMSTR_USE_FASTREC) == 0
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3302      	adds	r3, #2
 80017b6:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&pcm_nRecTriggerMode, pMessageIO);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	4b6d      	ldr	r3, [pc, #436]	; (8001974 <FMSTR_SetUpRec+0x1d8>)
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3301      	adds	r3, #1
 80017c4:	607b      	str	r3, [r7, #4]
#else /* (FMSTR_USE_FASTREC) == 0 */
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 3U);
#endif /* (FMSTR_USE_FASTREC) == 0 */

    pMessageIO = FMSTR_ValueFromBuffer16(&pcm_wRecTotalSmps, pMessageIO);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	881a      	ldrh	r2, [r3, #0]
 80017ca:	4b6b      	ldr	r3, [pc, #428]	; (8001978 <FMSTR_SetUpRec+0x1dc>)
 80017cc:	801a      	strh	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3302      	adds	r3, #2
 80017d2:	607b      	str	r3, [r7, #4]

#if (FMSTR_REC_STATIC_POSTTRIG) == 0
    pMessageIO = FMSTR_ValueFromBuffer16(&pcm_wRecPostTrigger, pMessageIO);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	881a      	ldrh	r2, [r3, #0]
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <FMSTR_SetUpRec+0x1e0>)
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3302      	adds	r3, #2
 80017e0:	607b      	str	r3, [r7, #4]
#else /* (FMSTR_REC_STATIC_POSTTRIG) == 0 */
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
#endif /* (FMSTR_REC_STATIC_POSTTRIG) == 0 */

#if (FMSTR_REC_STATIC_DIVISOR) == 0
    pMessageIO = FMSTR_ValueFromBuffer16(&pcm_wRecTimeDiv, pMessageIO);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	881a      	ldrh	r2, [r3, #0]
 80017e6:	4b66      	ldr	r3, [pc, #408]	; (8001980 <FMSTR_SetUpRec+0x1e4>)
 80017e8:	801a      	strh	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3302      	adds	r3, #2
 80017ee:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
#endif /* (FMSTR_REC_STATIC_DIVISOR) == 0 */

#if (FMSTR_USE_FASTREC) == 0
    /* address & size of trigger variable */
    pMessageIO = FMSTR_AddressFromBuffer(&pcm_nTrgVarAddr, pMessageIO);
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4864      	ldr	r0, [pc, #400]	; (8001984 <FMSTR_SetUpRec+0x1e8>)
 80017f4:	f7ff fb98 	bl	8000f28 <FMSTR_AddressFromBuffer>
 80017f8:	6078      	str	r0, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&pcm_nTrgVarSize, pMessageIO);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	781a      	ldrb	r2, [r3, #0]
 80017fe:	4b62      	ldr	r3, [pc, #392]	; (8001988 <FMSTR_SetUpRec+0x1ec>)
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	607b      	str	r3, [r7, #4]

    /* trigger compare mode  */
    pMessageIO = FMSTR_ValueFromBuffer8(&pcm_bTrgVarSigned, pMessageIO);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	4b5f      	ldr	r3, [pc, #380]	; (800198c <FMSTR_SetUpRec+0x1f0>)
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3301      	adds	r3, #1
 8001814:	607b      	str	r3, [r7, #4]

    /* threshold value  */
    pMessageIO = FMSTR_ValueFromBuffer32(&pcm_uTrgThreshold.u32, pMessageIO);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a5d      	ldr	r2, [pc, #372]	; (8001990 <FMSTR_SetUpRec+0x1f4>)
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3304      	adds	r3, #4
 8001822:	607b      	str	r3, [r7, #4]
#else /* (FMSTR_USE_FASTREC) == 0 */
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 8U);
#endif /* (FMSTR_USE_FASTREC) == 0 */
    
    /* recorder variable count */
    pMessageIO = FMSTR_ValueFromBuffer8(&pcm_nRecVarCount, pMessageIO);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	781a      	ldrb	r2, [r3, #0]
 8001828:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <FMSTR_SetUpRec+0x1f8>)
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3301      	adds	r3, #1
 8001830:	607b      	str	r3, [r7, #4]

    /* rec variable information must fit into our buffers */
    if((!pcm_nRecVarCount) || (pcm_nRecVarCount > (FMSTR_U8)FMSTR_MAX_REC_VARS))
 8001832:	4b58      	ldr	r3, [pc, #352]	; (8001994 <FMSTR_SetUpRec+0x1f8>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <FMSTR_SetUpRec+0xa6>
 800183a:	4b56      	ldr	r3, [pc, #344]	; (8001994 <FMSTR_SetUpRec+0x1f8>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b08      	cmp	r3, #8
 8001840:	d902      	bls.n	8001848 <FMSTR_SetUpRec+0xac>
    {
#if FMSTR_REC_COMMON_ERR_CODES
        goto FMSTR_SetUpRec_exit_error;
#else
        nResponseCode = FMSTR_STC_INVBUFF;
 8001842:	2385      	movs	r3, #133	; 0x85
 8001844:	757b      	strb	r3, [r7, #21]
        goto FMSTR_SetUpRec_exit;
 8001846:	e087      	b.n	8001958 <FMSTR_SetUpRec+0x1bc>
#endif
    }

    /* calculate sum of sizes of all variables */
    nRecVarsetSize = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	75fb      	strb	r3, [r7, #23]

    /* get all addresses and sizes */
    for(i=0U; i<pcm_nRecVarCount; i++)
 800184c:	2300      	movs	r3, #0
 800184e:	75bb      	strb	r3, [r7, #22]
 8001850:	e022      	b.n	8001898 <FMSTR_SetUpRec+0xfc>
    {
        /* variable size */
        pMessageIO = FMSTR_ValueFromBuffer8(&sz, pMessageIO);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	737b      	strb	r3, [r7, #13]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3301      	adds	r3, #1
 800185c:	607b      	str	r3, [r7, #4]
        
        pcm_pRecVarSize[i] = sz;
 800185e:	7dbb      	ldrb	r3, [r7, #22]
 8001860:	7b79      	ldrb	r1, [r7, #13]
 8001862:	4a4d      	ldr	r2, [pc, #308]	; (8001998 <FMSTR_SetUpRec+0x1fc>)
 8001864:	54d1      	strb	r1, [r2, r3]
        nRecVarsetSize += sz;
 8001866:	7b7a      	ldrb	r2, [r7, #13]
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	4413      	add	r3, r2
 800186c:	75fb      	strb	r3, [r7, #23]
        
        /* variable address */
        pMessageIO = FMSTR_AddressFromBuffer(&pcm_pRecVarAddr[i], pMessageIO);
 800186e:	7dbb      	ldrb	r3, [r7, #22]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4a4a      	ldr	r2, [pc, #296]	; (800199c <FMSTR_SetUpRec+0x200>)
 8001874:	4413      	add	r3, r2
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fb55 	bl	8000f28 <FMSTR_AddressFromBuffer>
 800187e:	6078      	str	r0, [r7, #4]

        /* valid numeric variable sizes only */
        if((sz == 0U) || (sz > 8U))
 8001880:	7b7b      	ldrb	r3, [r7, #13]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <FMSTR_SetUpRec+0xf0>
 8001886:	7b7b      	ldrb	r3, [r7, #13]
 8001888:	2b08      	cmp	r3, #8
 800188a:	d902      	bls.n	8001892 <FMSTR_SetUpRec+0xf6>
        {
#if FMSTR_REC_COMMON_ERR_CODES
            goto FMSTR_SetUpRec_exit_error;
#else
            nResponseCode = FMSTR_STC_INVSIZE;
 800188c:	2386      	movs	r3, #134	; 0x86
 800188e:	757b      	strb	r3, [r7, #21]
            goto FMSTR_SetUpRec_exit;
 8001890:	e062      	b.n	8001958 <FMSTR_SetUpRec+0x1bc>
    for(i=0U; i<pcm_nRecVarCount; i++)
 8001892:	7dbb      	ldrb	r3, [r7, #22]
 8001894:	3301      	adds	r3, #1
 8001896:	75bb      	strb	r3, [r7, #22]
 8001898:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <FMSTR_SetUpRec+0x1f8>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	7dba      	ldrb	r2, [r7, #22]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d3d7      	bcc.n	8001852 <FMSTR_SetUpRec+0xb6>
    }

    /* fast recorder handles trigger by itself */
#if (FMSTR_USE_FASTREC) == 0
    /* any trigger? */
    pcm_pCompareFunc = NULL;
 80018a2:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <FMSTR_SetUpRec+0x204>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
    if(pcm_nRecTriggerMode)
 80018a8:	4b32      	ldr	r3, [pc, #200]	; (8001974 <FMSTR_SetUpRec+0x1d8>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d034      	beq.n	800191a <FMSTR_SetUpRec+0x17e>
        {
            pcm_pCompareFunc = FMSTR_Comparefloat;
        }
        else
#else
        if(pcm_bTrgVarSigned&FMSTR_REC_FLOAT_TRIG_MASK)
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <FMSTR_SetUpRec+0x1f0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <FMSTR_SetUpRec+0x126>
        {
#if FMSTR_REC_COMMON_ERR_CODES
            goto FMSTR_SetUpRec_exit_error;
#else
            nResponseCode = FMSTR_STC_FLOATDISABLED;
 80018bc:	2390      	movs	r3, #144	; 0x90
 80018be:	757b      	strb	r3, [r7, #21]
            goto FMSTR_SetUpRec_exit;
 80018c0:	e04a      	b.n	8001958 <FMSTR_SetUpRec+0x1bc>
#endif
        }
#endif
        {
        switch(pcm_nTrgVarSize)
 80018c2:	4b31      	ldr	r3, [pc, #196]	; (8001988 <FMSTR_SetUpRec+0x1ec>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d01a      	beq.n	8001900 <FMSTR_SetUpRec+0x164>
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	dc22      	bgt.n	8001914 <FMSTR_SetUpRec+0x178>
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d002      	beq.n	80018d8 <FMSTR_SetUpRec+0x13c>
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d00a      	beq.n	80018ec <FMSTR_SetUpRec+0x150>
 80018d6:	e01d      	b.n	8001914 <FMSTR_SetUpRec+0x178>
        {
#if FMSTR_CFG_BUS_WIDTH == 1U
        case 1: pcm_pCompareFunc = pcm_bTrgVarSigned ? FMSTR_Compare8S : FMSTR_Compare8U; break;
 80018d8:	4b2c      	ldr	r3, [pc, #176]	; (800198c <FMSTR_SetUpRec+0x1f0>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <FMSTR_SetUpRec+0x148>
 80018e0:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <FMSTR_SetUpRec+0x208>)
 80018e2:	e000      	b.n	80018e6 <FMSTR_SetUpRec+0x14a>
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <FMSTR_SetUpRec+0x20c>)
 80018e6:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <FMSTR_SetUpRec+0x204>)
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e017      	b.n	800191c <FMSTR_SetUpRec+0x180>
#endif
        case 2: pcm_pCompareFunc = pcm_bTrgVarSigned ? FMSTR_Compare16S : FMSTR_Compare16U; break;
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <FMSTR_SetUpRec+0x1f0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <FMSTR_SetUpRec+0x15c>
 80018f4:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <FMSTR_SetUpRec+0x210>)
 80018f6:	e000      	b.n	80018fa <FMSTR_SetUpRec+0x15e>
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <FMSTR_SetUpRec+0x214>)
 80018fa:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <FMSTR_SetUpRec+0x204>)
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e00d      	b.n	800191c <FMSTR_SetUpRec+0x180>
        case 4: pcm_pCompareFunc = pcm_bTrgVarSigned ? FMSTR_Compare32S : FMSTR_Compare32U; break;
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <FMSTR_SetUpRec+0x1f0>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <FMSTR_SetUpRec+0x170>
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <FMSTR_SetUpRec+0x218>)
 800190a:	e000      	b.n	800190e <FMSTR_SetUpRec+0x172>
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <FMSTR_SetUpRec+0x21c>)
 800190e:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <FMSTR_SetUpRec+0x204>)
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e003      	b.n	800191c <FMSTR_SetUpRec+0x180>
        /* invalid trigger variable size  */
        default:
#if FMSTR_REC_COMMON_ERR_CODES
            goto FMSTR_SetUpRec_exit_error;
#else
            nResponseCode = FMSTR_STC_INVSIZE;
 8001914:	2386      	movs	r3, #134	; 0x86
 8001916:	757b      	strb	r3, [r7, #21]
            goto FMSTR_SetUpRec_exit;
 8001918:	e01e      	b.n	8001958 <FMSTR_SetUpRec+0x1bc>
#endif
            }
        }
 800191a:	bf00      	nop
    }
#endif /* (FMSTR_USE_FASTREC) == 0 */
    
    /* total recorder buffer length in native sizeof units (=bytes on most platforms) */
    blen = (FMSTR_SIZE_RECBUFF) (pcm_wRecTotalSmps * nRecVarsetSize / FMSTR_CFG_BUS_WIDTH);
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <FMSTR_SetUpRec+0x1dc>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	fb12 f303 	smulbb	r3, r2, r3
 8001928:	81fb      	strh	r3, [r7, #14]

    /* recorder memory available? */
    if(blen > FMSTR_GetRecBuffSize())
 800192a:	f000 f905 	bl	8001b38 <FMSTR_GetRecBuffSize>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	89fb      	ldrh	r3, [r7, #14]
 8001934:	4293      	cmp	r3, r2
 8001936:	d902      	bls.n	800193e <FMSTR_SetUpRec+0x1a2>
    {
#if FMSTR_REC_COMMON_ERR_CODES
        goto FMSTR_SetUpRec_exit_error;
#else
        nResponseCode = FMSTR_STC_INVSIZE;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	757b      	strb	r3, [r7, #21]
        goto FMSTR_SetUpRec_exit;
 800193c:	e00c      	b.n	8001958 <FMSTR_SetUpRec+0x1bc>
#endif
    }

#if (FMSTR_USE_FASTREC) == 0
    /* remember the effective end of circular buffer */
    pcm_dwRecEndBuffPtr = pcm_nRecBuffAddr + blen;
 800193e:	89fa      	ldrh	r2, [r7, #14]
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <FMSTR_SetUpRec+0x1d4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4413      	add	r3, r2
 8001946:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <FMSTR_SetUpRec+0x220>)
 8001948:	6013      	str	r3, [r2, #0]
#endif /* FMSTR_REC_COMMON_ERR_CODES */
    }
#endif /* FMSTR_USE_FASTREC */

    /* everything is okay    */
    pcm_wRecFlags.flg.bIsConfigured = 1U;
 800194a:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <FMSTR_SetUpRec+0x224>)
 800194c:	7813      	ldrb	r3, [r2, #0]
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	7013      	strb	r3, [r2, #0]
    nResponseCode = FMSTR_STS_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	757b      	strb	r3, [r7, #21]
    goto FMSTR_SetUpRec_exit;
FMSTR_SetUpRec_exit_error:
    nResponseCode = FMSTR_STC_INVSIZE;
#endif
FMSTR_SetUpRec_exit:
    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	7d7a      	ldrb	r2, [r7, #21]
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	3301      	adds	r3, #1
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200000a0 	.word	0x200000a0
 8001970:	20000098 	.word	0x20000098
 8001974:	20003168 	.word	0x20003168
 8001978:	20003160 	.word	0x20003160
 800197c:	20003172 	.word	0x20003172
 8001980:	20003170 	.word	0x20003170
 8001984:	2000008c 	.word	0x2000008c
 8001988:	20000090 	.word	0x20000090
 800198c:	20000091 	.word	0x20000091
 8001990:	20000094 	.word	0x20000094
 8001994:	20003162 	.word	0x20003162
 8001998:	20003158 	.word	0x20003158
 800199c:	20003130 	.word	0x20003130
 80019a0:	2000009c 	.word	0x2000009c
 80019a4:	08001bc9 	.word	0x08001bc9
 80019a8:	08001bf9 	.word	0x08001bf9
 80019ac:	08001c25 	.word	0x08001c25
 80019b0:	08001c55 	.word	0x08001c55
 80019b4:	08001c81 	.word	0x08001c81
 80019b8:	08001cad 	.word	0x08001cad
 80019bc:	20003154 	.word	0x20003154
 80019c0:	2000316c 	.word	0x2000316c

080019c4 <FMSTR_TriggerRec>:
* This function starts the post-trigger stop countdown
*
******************************************************************************/

void FMSTR_TriggerRec(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
    if(!pcm_wRecFlags.flg.bIsStopping)
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <FMSTR_TriggerRec+0x30>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d108      	bne.n	80019e8 <FMSTR_TriggerRec+0x24>
    {
        pcm_wRecFlags.flg.bIsStopping = 1U;
 80019d6:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <FMSTR_TriggerRec+0x30>)
 80019d8:	7813      	ldrb	r3, [r2, #0]
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	7013      	strb	r3, [r2, #0]
#if (FMSTR_REC_STATIC_POSTTRIG) == 0
        pcm_wStoprecCountDown = pcm_wRecPostTrigger;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <FMSTR_TriggerRec+0x34>)
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <FMSTR_TriggerRec+0x38>)
 80019e6:	801a      	strh	r2, [r3, #0]
#else
        pcm_wStoprecCountDown = FMSTR_REC_STATIC_POSTTRIG;
#endif
    }
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2000316c 	.word	0x2000316c
 80019f8:	20003172 	.word	0x20003172
 80019fc:	20003166 	.word	0x20003166

08001a00 <FMSTR_StartRec>:
* and flags)
*
******************************************************************************/

FMSTR_BPTR FMSTR_StartRec(FMSTR_BPTR pMessageIO)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
     FMSTR_U8 nResponseCode;   
    /* must be configured */
    if(!pcm_wRecFlags.flg.bIsConfigured)
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <FMSTR_StartRec+0x88>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <FMSTR_StartRec+0x1c>
    {
#if FMSTR_REC_COMMON_ERR_CODES
        goto FMSTR_StartRec_exit_error;
#else
        nResponseCode = FMSTR_STC_NOTINIT;
 8001a16:	2388      	movs	r3, #136	; 0x88
 8001a18:	73fb      	strb	r3, [r7, #15]
        goto FMSTR_StartRec_exit;
 8001a1a:	e029      	b.n	8001a70 <FMSTR_StartRec+0x70>
#endif
    }
        
    /* already running ? */
    if(pcm_wRecFlags.flg.bIsRunning)
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <FMSTR_StartRec+0x88>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <FMSTR_StartRec+0x30>
    {
#if FMSTR_REC_COMMON_ERR_CODES
        goto FMSTR_StartRec_exit_error;
#else
        nResponseCode = FMSTR_STS_RECRUN;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
        goto FMSTR_StartRec_exit;
 8001a2e:	e01f      	b.n	8001a70 <FMSTR_StartRec+0x70>
#endif
    }

#if (FMSTR_USE_FASTREC) == 0
    /* initialize write pointer */
    pcm_dwRecWritePtr = pcm_nRecBuffAddr;
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <FMSTR_StartRec+0x8c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <FMSTR_StartRec+0x90>)
 8001a36:	6013      	str	r3, [r2, #0]

    /* current (first) sample index */
    pcm_wRecBuffStartIx = 0U;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <FMSTR_StartRec+0x94>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	801a      	strh	r2, [r3, #0]
#endif /* (FMSTR_USE_FASTREC) == 0 */

    /* initialize time divisor */
#if (FMSTR_REC_STATIC_DIVISOR) != 1
    pcm_wRecTimeDivCtr = 0U;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <FMSTR_StartRec+0x98>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	801a      	strh	r2, [r3, #0]
#endif

    /* initiate virgin cycle */
    pcm_wRecFlags.flg.bIsStopping = 0U;          /* no trigger active */
 8001a44:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <FMSTR_StartRec+0x88>)
 8001a46:	7813      	ldrb	r3, [r2, #0]
 8001a48:	f36f 0382 	bfc	r3, #2, #1
 8001a4c:	7013      	strb	r3, [r2, #0]
    pcm_wRecFlags.flg.bTrgCrossActive = 0U;      /* waiting for threshold crossing */
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <FMSTR_StartRec+0x88>)
 8001a50:	7813      	ldrb	r3, [r2, #0]
 8001a52:	f36f 1304 	bfc	r3, #4, #1
 8001a56:	7013      	strb	r3, [r2, #0]
    pcm_wRecFlags.flg.bInvirginCycle = 1U;       /* initial cycle */
 8001a58:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <FMSTR_StartRec+0x88>)
 8001a5a:	7813      	ldrb	r3, [r2, #0]
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	7013      	strb	r3, [r2, #0]
#if FMSTR_USE_FASTREC
    FMSTR_StartFastRec();
#endif /* (MSTR_USE_FASTREC */

    /* run now */
    pcm_wRecFlags.flg.bIsRunning = 1U;           /* is running now! */
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <FMSTR_StartRec+0x88>)
 8001a64:	7813      	ldrb	r3, [r2, #0]
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	7013      	strb	r3, [r2, #0]

    nResponseCode = FMSTR_STS_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
FMSTR_StartRec_exit_error:
    nResponseCode = FMSTR_STC_NOTINIT;
#endif

FMSTR_StartRec_exit:
    return FMSTR_ConstToBuffer8(pMessageIO, nResponseCode);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3301      	adds	r3, #1
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2000316c 	.word	0x2000316c
 8001a8c:	20000098 	.word	0x20000098
 8001a90:	20003174 	.word	0x20003174
 8001a94:	20003150 	.word	0x20003150
 8001a98:	20003164 	.word	0x20003164

08001a9c <FMSTR_StopRec>:
* This function stops recording (same as manual trigger)
*
******************************************************************************/

FMSTR_BPTR FMSTR_StopRec(FMSTR_BPTR pMessageIO)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    FMSTR_U8 nResponseCode;
    /* must be configured */
    if(!pcm_wRecFlags.flg.bIsConfigured)
 8001aa4:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <FMSTR_StopRec+0x4c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <FMSTR_StopRec+0x1c>
    {
        nResponseCode = FMSTR_STC_NOTINIT;
 8001ab2:	2388      	movs	r3, #136	; 0x88
 8001ab4:	73fb      	strb	r3, [r7, #15]
        goto FMSTR_StopRec_exit;
 8001ab6:	e00d      	b.n	8001ad4 <FMSTR_StopRec+0x38>
    }
        
    /* already stopped ? */
    if(!pcm_wRecFlags.flg.bIsRunning)
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <FMSTR_StopRec+0x4c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <FMSTR_StopRec+0x30>
    {
        nResponseCode = FMSTR_STS_RECDONE;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	73fb      	strb	r3, [r7, #15]
        goto FMSTR_StopRec_exit;
 8001aca:	e003      	b.n	8001ad4 <FMSTR_StopRec+0x38>
    }
    
    /* simulate trigger */
    FMSTR_TriggerRec();
 8001acc:	f7ff ff7a 	bl	80019c4 <FMSTR_TriggerRec>
    nResponseCode = FMSTR_STS_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]
    
FMSTR_StopRec_exit:
    return FMSTR_ConstToBuffer8(pMessageIO, nResponseCode);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3301      	adds	r3, #1
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000316c 	.word	0x2000316c

08001aec <FMSTR_GetRecStatus>:
* This function returns current recorder status
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetRecStatus(FMSTR_BPTR pMessageIO)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
    FMSTR_U16 nResponseCode = (FMSTR_U16) (pcm_wRecFlags.flg.bIsRunning ? 
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <FMSTR_GetRecStatus+0x48>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <FMSTR_GetRecStatus+0x1a>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <FMSTR_GetRecStatus+0x1c>
 8001b06:	2302      	movs	r3, #2
 8001b08:	81fb      	strh	r3, [r7, #14]
        FMSTR_STS_RECRUN : FMSTR_STS_RECDONE);
    
    /* must be configured */
    if(!pcm_wRecFlags.flg.bIsConfigured)
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <FMSTR_GetRecStatus+0x48>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <FMSTR_GetRecStatus+0x30>
    {
        nResponseCode = FMSTR_STC_NOTINIT;
 8001b18:	2388      	movs	r3, #136	; 0x88
 8001b1a:	81fb      	strh	r3, [r7, #14]
    }
        
    /* get run/stop status */
    return FMSTR_ConstToBuffer8(pMessageIO, (FMSTR_U8) nResponseCode);
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3301      	adds	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	2000316c 	.word	0x2000316c

08001b38 <FMSTR_GetRecBuffSize>:
* @return   Recorder memory size in native sizeof units (=bytes on most platforms)
*
******************************************************************************/

FMSTR_SIZE_RECBUFF FMSTR_GetRecBuffSize()
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
#if FMSTR_REC_OWNBUFF
    return pcm_wRecBuffSize;
#else
    return (FMSTR_SIZE_RECBUFF) FMSTR_REC_BUFF_SIZE;
 8001b3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
#endif
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <FMSTR_GetRecBuff>:
* This function returns recorder buffer information
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetRecBuff(FMSTR_BPTR pMessageIO)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    volatile FMSTR_BPTR pResponse;
    /* must be configured */
    if(!pcm_wRecFlags.flg.bIsConfigured)
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <FMSTR_GetRecBuff+0x70>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d105      	bne.n	8001b6e <FMSTR_GetRecBuff+0x22>
    {
        return FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STC_NOTINIT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2288      	movs	r2, #136	; 0x88
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	e021      	b.n	8001bb2 <FMSTR_GetRecBuff+0x66>
    }
    
    /* must be stopped */
    if(pcm_wRecFlags.flg.bIsRunning)
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <FMSTR_GetRecBuff+0x70>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <FMSTR_GetRecBuff+0x3c>
    {
        return FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STC_SERVBUSY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2287      	movs	r2, #135	; 0x87
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3301      	adds	r3, #1
 8001b86:	e014      	b.n	8001bb2 <FMSTR_GetRecBuff+0x66>
    }
    
    /* fill the return info */
    pResponse = FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STS_OK);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3301      	adds	r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
    pResponse = FMSTR_AddressToBuffer(pResponse, pcm_nRecBuffAddr);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <FMSTR_GetRecBuff+0x74>)
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f9a3 	bl	8000ee8 <FMSTR_AddressToBuffer>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60fb      	str	r3, [r7, #12]
    return FMSTR_ValueToBuffer16(pResponse, pcm_wRecBuffStartIx);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <FMSTR_GetRecBuff+0x78>)
 8001baa:	8812      	ldrh	r2, [r2, #0]
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	3302      	adds	r3, #2
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000316c 	.word	0x2000316c
 8001bc0:	20000098 	.word	0x20000098
 8001bc4:	20003150 	.word	0x20003150

08001bc8 <FMSTR_Compare8S>:
#define CMP(v,t) ((FMSTR_BOOL)(((v) < (t)) ? 0 : 1))

#if FMSTR_CFG_BUS_WIDTH == 1U

static FMSTR_BOOL FMSTR_Compare8S()
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetS8(pcm_nTrgVarAddr), pcm_uTrgThreshold.s8);
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <FMSTR_Compare8S+0x28>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f993 2000 	ldrsb.w	r2, [r3]
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <FMSTR_Compare8S+0x2c>)
 8001bd6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	bfac      	ite	ge
 8001bde:	2301      	movge	r3, #1
 8001be0:	2300      	movlt	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	b29b      	uxth	r3, r3
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	2000008c 	.word	0x2000008c
 8001bf4:	20000094 	.word	0x20000094

08001bf8 <FMSTR_Compare8U>:

static FMSTR_BOOL FMSTR_Compare8U()
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetU8(pcm_nTrgVarAddr), pcm_uTrgThreshold.u8);
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <FMSTR_Compare8U+0x24>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FMSTR_Compare8U+0x28>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	bf2c      	ite	cs
 8001c0a:	2301      	movcs	r3, #1
 8001c0c:	2300      	movcc	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	b29b      	uxth	r3, r3
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	2000008c 	.word	0x2000008c
 8001c20:	20000094 	.word	0x20000094

08001c24 <FMSTR_Compare16S>:

#endif

static FMSTR_BOOL FMSTR_Compare16S()
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetS16(pcm_nTrgVarAddr), pcm_uTrgThreshold.s16);
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <FMSTR_Compare16S+0x28>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <FMSTR_Compare16S+0x2c>)
 8001c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	bfac      	ite	ge
 8001c3a:	2301      	movge	r3, #1
 8001c3c:	2300      	movlt	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	b29b      	uxth	r3, r3
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	2000008c 	.word	0x2000008c
 8001c50:	20000094 	.word	0x20000094

08001c54 <FMSTR_Compare16U>:

static FMSTR_BOOL FMSTR_Compare16U()
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetU16(pcm_nTrgVarAddr), pcm_uTrgThreshold.u16);
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <FMSTR_Compare16U+0x24>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	881a      	ldrh	r2, [r3, #0]
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <FMSTR_Compare16U+0x28>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	bf2c      	ite	cs
 8001c66:	2301      	movcs	r3, #1
 8001c68:	2300      	movcc	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	b29b      	uxth	r3, r3
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	2000008c 	.word	0x2000008c
 8001c7c:	20000094 	.word	0x20000094

08001c80 <FMSTR_Compare32S>:

static FMSTR_BOOL FMSTR_Compare32S()
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetS32(pcm_nTrgVarAddr), pcm_uTrgThreshold.s32);
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <FMSTR_Compare32S+0x24>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <FMSTR_Compare32S+0x28>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	bfac      	ite	ge
 8001c92:	2301      	movge	r3, #1
 8001c94:	2300      	movlt	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	b29b      	uxth	r3, r3
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	2000008c 	.word	0x2000008c
 8001ca8:	20000094 	.word	0x20000094

08001cac <FMSTR_Compare32U>:

static FMSTR_BOOL FMSTR_Compare32U()
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetU32(pcm_nTrgVarAddr), pcm_uTrgThreshold.u32);
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <FMSTR_Compare32U+0x24>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <FMSTR_Compare32U+0x28>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	bf2c      	ite	cs
 8001cbe:	2301      	movcs	r3, #1
 8001cc0:	2300      	movcc	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	b29b      	uxth	r3, r3
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	2000008c 	.word	0x2000008c
 8001cd4:	20000094 	.word	0x20000094

08001cd8 <FMSTR_Recorder>:
#if defined(FMSTR_PLATFORM_STM32F4xx) || defined(FMSTR_PLATFORM_STM32F4xx)
//#warn interrupt called
#endif

void FMSTR_Recorder(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
    /* recorder not active */
    if(!pcm_wRecFlags.flg.bIsRunning)
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <FMSTR_Recorder+0x1c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <FMSTR_Recorder+0x18>
    {
        return ;
    }
    
    /* do the hard work      */
    FMSTR_Recorder2();
 8001cea:	f000 f805 	bl	8001cf8 <FMSTR_Recorder2>
 8001cee:	e000      	b.n	8001cf2 <FMSTR_Recorder+0x1a>
        return ;
 8001cf0:	bf00      	nop
}
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2000316c 	.word	0x2000316c

08001cf8 <FMSTR_Recorder2>:
#if defined(FMSTR_PLATFORM_STM32F4xx) || defined(FMSTR_PLATFORM_STM32F4xx)
//#pragma interrupt called
#endif

static void FMSTR_Recorder2(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
    FMSTR_BOOL cmp;
    FMSTR_U8 i;

#if (FMSTR_REC_STATIC_DIVISOR) != 1
    /* skip this call ? */
    if(pcm_wRecTimeDivCtr)
 8001cfe:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <FMSTR_Recorder2+0x134>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <FMSTR_Recorder2+0x1c>
    {
        /* maybe next time... */
        pcm_wRecTimeDivCtr--;
 8001d06:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <FMSTR_Recorder2+0x134>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <FMSTR_Recorder2+0x134>)
 8001d10:	801a      	strh	r2, [r3, #0]
        return;
 8001d12:	e087      	b.n	8001e24 <FMSTR_Recorder2+0x12c>
    }
    
    /* re-initialize divider */
#if (FMSTR_REC_STATIC_DIVISOR) == 0
    pcm_wRecTimeDivCtr = pcm_wRecTimeDiv;
 8001d14:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <FMSTR_Recorder2+0x138>)
 8001d16:	881a      	ldrh	r2, [r3, #0]
 8001d18:	4b44      	ldr	r3, [pc, #272]	; (8001e2c <FMSTR_Recorder2+0x134>)
 8001d1a:	801a      	strh	r2, [r3, #0]
    pcm_wRecTimeDivCtr = FMSTR_REC_STATIC_DIVISOR;
#endif /* (FMSTR_REC_STATIC_DIVISOR) == 0 */
#endif /* (FMSTR_REC_STATIC_DIVISOR) != 1 */

    /* take snapshot of variable values */
    for (i=0U; i<pcm_nRecVarCount; i++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	717b      	strb	r3, [r7, #5]
 8001d20:	e016      	b.n	8001d50 <FMSTR_Recorder2+0x58>
    {
        sz = pcm_pRecVarSize[i];
 8001d22:	797b      	ldrb	r3, [r7, #5]
 8001d24:	4a43      	ldr	r2, [pc, #268]	; (8001e34 <FMSTR_Recorder2+0x13c>)
 8001d26:	5cd3      	ldrb	r3, [r2, r3]
 8001d28:	713b      	strb	r3, [r7, #4]
        FMSTR_CopyMemory(pcm_dwRecWritePtr, pcm_pRecVarAddr[i], sz);
 8001d2a:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <FMSTR_Recorder2+0x140>)
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	797b      	ldrb	r3, [r7, #5]
 8001d30:	4a42      	ldr	r2, [pc, #264]	; (8001e3c <FMSTR_Recorder2+0x144>)
 8001d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d36:	793a      	ldrb	r2, [r7, #4]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7ff f827 	bl	8000d8c <FMSTR_CopyMemory>
        sz /= FMSTR_CFG_BUS_WIDTH;
        pcm_dwRecWritePtr += sz;
 8001d3e:	793a      	ldrb	r2, [r7, #4]
 8001d40:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <FMSTR_Recorder2+0x140>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a3c      	ldr	r2, [pc, #240]	; (8001e38 <FMSTR_Recorder2+0x140>)
 8001d48:	6013      	str	r3, [r2, #0]
    for (i=0U; i<pcm_nRecVarCount; i++)
 8001d4a:	797b      	ldrb	r3, [r7, #5]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	717b      	strb	r3, [r7, #5]
 8001d50:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <FMSTR_Recorder2+0x148>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	797a      	ldrb	r2, [r7, #5]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d3e3      	bcc.n	8001d22 <FMSTR_Recorder2+0x2a>
    }
    
    /* another sample taken (startIx "points" after sample just taken) */
    /* i.e. it points to the oldest sample */
    pcm_wRecBuffStartIx++;
 8001d5a:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <FMSTR_Recorder2+0x14c>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <FMSTR_Recorder2+0x14c>)
 8001d64:	801a      	strh	r2, [r3, #0]
    
    /* wrap around (circular buffer) ? */
    if(pcm_dwRecWritePtr >= pcm_dwRecEndBuffPtr)
 8001d66:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <FMSTR_Recorder2+0x140>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <FMSTR_Recorder2+0x150>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d30b      	bcc.n	8001d8a <FMSTR_Recorder2+0x92>
    {   
        pcm_dwRecWritePtr = pcm_nRecBuffAddr;
 8001d72:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <FMSTR_Recorder2+0x154>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a30      	ldr	r2, [pc, #192]	; (8001e38 <FMSTR_Recorder2+0x140>)
 8001d78:	6013      	str	r3, [r2, #0]
        pcm_wRecFlags.flg.bInvirginCycle = 0U;
 8001d7a:	4a35      	ldr	r2, [pc, #212]	; (8001e50 <FMSTR_Recorder2+0x158>)
 8001d7c:	7813      	ldrb	r3, [r2, #0]
 8001d7e:	f36f 03c3 	bfc	r3, #3, #1
 8001d82:	7013      	strb	r3, [r2, #0]
        pcm_wRecBuffStartIx = 0U;
 8001d84:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <FMSTR_Recorder2+0x14c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	801a      	strh	r2, [r3, #0]
    }

    /* no trigger testing in virgin cycle */
    if(pcm_wRecFlags.flg.bInvirginCycle)
 8001d8a:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <FMSTR_Recorder2+0x158>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d144      	bne.n	8001e22 <FMSTR_Recorder2+0x12a>
    {
        return;
    }
    
    /* test trigger condition if still running */
    if(!pcm_wRecFlags.flg.bIsStopping && pcm_pCompareFunc != NULL)
 8001d98:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <FMSTR_Recorder2+0x158>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d125      	bne.n	8001df2 <FMSTR_Recorder2+0xfa>
 8001da6:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <FMSTR_Recorder2+0x15c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d021      	beq.n	8001df2 <FMSTR_Recorder2+0xfa>
    {
        /* compare trigger threshold */
        cmp = pcm_pCompareFunc();
 8001dae:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <FMSTR_Recorder2+0x15c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4798      	blx	r3
 8001db4:	4603      	mov	r3, r0
 8001db6:	80fb      	strh	r3, [r7, #6]
        
        /* negated logic (falling-edge) ? */
        if(pcm_nRecTriggerMode == 2U)
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <FMSTR_Recorder2+0x160>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d106      	bne.n	8001dce <FMSTR_Recorder2+0xd6>
        {
            cmp = (FMSTR_BOOL) !cmp;
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	80fb      	strh	r3, [r7, #6]
        }
        
        /* above threshold ? */
        if(cmp)
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d009      	beq.n	8001de8 <FMSTR_Recorder2+0xf0>
        {
            /* were we at least once below threshold ? */
            if(pcm_wRecFlags.flg.bTrgCrossActive)
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <FMSTR_Recorder2+0x158>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <FMSTR_Recorder2+0xfa>
            {
                /* EDGE TRIGGER ! */
                FMSTR_TriggerRec();
 8001de2:	f7ff fdef 	bl	80019c4 <FMSTR_TriggerRec>
 8001de6:	e004      	b.n	8001df2 <FMSTR_Recorder2+0xfa>
            }
        }
        else
        {
            /* we got bellow threshold, now wait for being above threshold */
            pcm_wRecFlags.flg.bTrgCrossActive = 1U;
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <FMSTR_Recorder2+0x158>)
 8001dea:	7813      	ldrb	r3, [r2, #0]
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	7013      	strb	r3, [r2, #0]
        }
    }
    
    /* in stopping mode ? (note that this bit might have been set just above!) */
    if(pcm_wRecFlags.flg.bIsStopping)
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <FMSTR_Recorder2+0x158>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d011      	beq.n	8001e24 <FMSTR_Recorder2+0x12c>
    {
        /* count down post-trigger samples expired ? */
        if(!pcm_wStoprecCountDown)
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <FMSTR_Recorder2+0x164>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <FMSTR_Recorder2+0x11c>
        {
            /* STOP RECORDER */
            pcm_wRecFlags.flg.bIsRunning = 0U;
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <FMSTR_Recorder2+0x158>)
 8001e0a:	7813      	ldrb	r3, [r2, #0]
 8001e0c:	f36f 0341 	bfc	r3, #1, #1
 8001e10:	7013      	strb	r3, [r2, #0]
            return;
 8001e12:	e007      	b.n	8001e24 <FMSTR_Recorder2+0x12c>
        }
        
        /* perhaps next time */
        pcm_wStoprecCountDown--;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <FMSTR_Recorder2+0x164>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <FMSTR_Recorder2+0x164>)
 8001e1e:	801a      	strh	r2, [r3, #0]
 8001e20:	e000      	b.n	8001e24 <FMSTR_Recorder2+0x12c>
        return;
 8001e22:	bf00      	nop
    }
}
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20003164 	.word	0x20003164
 8001e30:	20003170 	.word	0x20003170
 8001e34:	20003158 	.word	0x20003158
 8001e38:	20003174 	.word	0x20003174
 8001e3c:	20003130 	.word	0x20003130
 8001e40:	20003162 	.word	0x20003162
 8001e44:	20003150 	.word	0x20003150
 8001e48:	20003154 	.word	0x20003154
 8001e4c:	20000098 	.word	0x20000098
 8001e50:	2000316c 	.word	0x2000316c
 8001e54:	2000009c 	.word	0x2000009c
 8001e58:	20003168 	.word	0x20003168
 8001e5c:	20003166 	.word	0x20003166

08001e60 <FMSTR_InitScope>:
* @brief    Scope Initialization
*
******************************************************************************/

void FMSTR_InitScope(void)
{   
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <FMSTR_SetUpScope>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_SetUpScope(FMSTR_BPTR pMessageIO)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	613b      	str	r3, [r7, #16]
    FMSTR_U8 i, sz, nVarCnt;

    /* uninitialize scope */
    pcm_nScopeVarCount = 0U;
 8001e7c:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <FMSTR_SetUpScope+0xa8>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]

    /* seek the setup data */
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3302      	adds	r3, #2
 8001e86:	607b      	str	r3, [r7, #4]
    
    /* scope variable count  */
    pMessageIO = FMSTR_ValueFromBuffer8(&nVarCnt, pMessageIO);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	73bb      	strb	r3, [r7, #14]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3301      	adds	r3, #1
 8001e92:	607b      	str	r3, [r7, #4]

    /* scope variable information must fit into our buffers */
    if(!nVarCnt || nVarCnt > (FMSTR_U8)FMSTR_MAX_SCOPE_VARS)
 8001e94:	7bbb      	ldrb	r3, [r7, #14]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <FMSTR_SetUpScope+0x30>
 8001e9a:	7bbb      	ldrb	r3, [r7, #14]
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d905      	bls.n	8001eac <FMSTR_SetUpScope+0x3c>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVBUFF);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2285      	movs	r2, #133	; 0x85
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	e030      	b.n	8001f0e <FMSTR_SetUpScope+0x9e>
    }
    
    /* get all addresses and sizes */
    for(i=0U; i<nVarCnt; i++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	75fb      	strb	r3, [r7, #23]
 8001eb0:	e021      	b.n	8001ef6 <FMSTR_SetUpScope+0x86>
    {
        /* variable size */
        pMessageIO = FMSTR_ValueFromBuffer8(&sz, pMessageIO);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	607b      	str	r3, [r7, #4]
        pcm_pScopeVarSize[i] = sz;
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	7bf9      	ldrb	r1, [r7, #15]
 8001ec2:	4a16      	ldr	r2, [pc, #88]	; (8001f1c <FMSTR_SetUpScope+0xac>)
 8001ec4:	54d1      	strb	r1, [r2, r3]
        
        /* variable address */
        pMessageIO = FMSTR_AddressFromBuffer(&pcm_pScopeVarAddr[i], pMessageIO);
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <FMSTR_SetUpScope+0xb0>)
 8001ecc:	4413      	add	r3, r2
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f829 	bl	8000f28 <FMSTR_AddressFromBuffer>
 8001ed6:	6078      	str	r0, [r7, #4]

        /* valid numeric variable sizes only */
        if(sz == 0U || sz > 8U)
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <FMSTR_SetUpScope+0x74>
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d905      	bls.n	8001ef0 <FMSTR_SetUpScope+0x80>
        {
            return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVSIZE);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2286      	movs	r2, #134	; 0x86
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	3301      	adds	r3, #1
 8001eee:	e00e      	b.n	8001f0e <FMSTR_SetUpScope+0x9e>
    for(i=0U; i<nVarCnt; i++)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
 8001ef6:	7bbb      	ldrb	r3, [r7, #14]
 8001ef8:	7dfa      	ldrb	r2, [r7, #23]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d3d9      	bcc.n	8001eb2 <FMSTR_SetUpScope+0x42>
#endif
        
    }

    /* activate scope */
    pcm_nScopeVarCount = nVarCnt;
 8001efe:	7bba      	ldrb	r2, [r7, #14]
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <FMSTR_SetUpScope+0xa8>)
 8001f02:	701a      	strb	r2, [r3, #0]

    /* return just a status */
    return FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	3301      	adds	r3, #1
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200028a0 	.word	0x200028a0
 8001f1c:	200028c4 	.word	0x200028c4
 8001f20:	200028a4 	.word	0x200028a4

08001f24 <FMSTR_ReadScope>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_ReadScope(FMSTR_BPTR pMessageIO)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
    FMSTR_U8 i;
    
    if(!pcm_nScopeVarCount)
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <FMSTR_ReadScope+0x60>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <FMSTR_ReadScope+0x1c>
    {
        return FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STC_NOTINIT);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2288      	movs	r2, #136	; 0x88
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	e01d      	b.n	8001f7c <FMSTR_ReadScope+0x58>
    }
    
    /* success */
    pMessageIO = FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STS_OK);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	607b      	str	r3, [r7, #4]
    
    for (i=0U; i<pcm_nScopeVarCount; i++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e00e      	b.n	8001f70 <FMSTR_ReadScope+0x4c>
    {
        pMessageIO = FMSTR_CopyToBuffer(pMessageIO, pcm_pScopeVarAddr[i], pcm_pScopeVarSize[i]);
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <FMSTR_ReadScope+0x64>)
 8001f56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <FMSTR_ReadScope+0x68>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	461a      	mov	r2, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe ff32 	bl	8000dcc <FMSTR_CopyToBuffer>
 8001f68:	6078      	str	r0, [r7, #4]
    for (i=0U; i<pcm_nScopeVarCount; i++)
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <FMSTR_ReadScope+0x60>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3eb      	bcc.n	8001f52 <FMSTR_ReadScope+0x2e>
    } 
        
    /* return end position */
    return pMessageIO;  
 8001f7a:	687b      	ldr	r3, [r7, #4]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200028a0 	.word	0x200028a0
 8001f88:	200028a4 	.word	0x200028a4
 8001f8c:	200028c4 	.word	0x200028c4

08001f90 <FMSTR_RxQueue>:
*******************************************************************************/

#if FMSTR_SHORT_INTR

static void FMSTR_RxQueue(FMSTR_BCHR nRxChar)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
    /* future value of write pointer */
    FMSTR_BPTR wpnext = pcm_pRQueueWP + 1;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <FMSTR_RxQueue+0x44>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]

    
    /*lint -e{946} pointer arithmetic is okay here (same array) */
    if(wpnext >= (pcm_pRQueueBuffer + FMSTR_COMM_RQUEUE_SIZE))
 8001fa2:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <FMSTR_RxQueue+0x48>)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d301      	bcc.n	8001fae <FMSTR_RxQueue+0x1e>
    {
        wpnext = pcm_pRQueueBuffer;
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <FMSTR_RxQueue+0x4c>)
 8001fac:	60fb      	str	r3, [r7, #12]
    }
    
    /* any space in queue? */
    if(wpnext != pcm_pRQueueRP)
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <FMSTR_RxQueue+0x50>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d006      	beq.n	8001fc6 <FMSTR_RxQueue+0x36>
    {
        *pcm_pRQueueWP = (FMSTR_U8) nRxChar;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <FMSTR_RxQueue+0x44>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	79fa      	ldrb	r2, [r7, #7]
 8001fbe:	701a      	strb	r2, [r3, #0]
        pcm_pRQueueWP = wpnext;
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <FMSTR_RxQueue+0x44>)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6013      	str	r3, [r2, #0]
    }
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20003124 	.word	0x20003124
 8001fd8:	20003120 	.word	0x20003120
 8001fdc:	20002920 	.word	0x20002920
 8001fe0:	20003120 	.word	0x20003120

08001fe4 <FMSTR_RxDequeue>:
*******************************************************************************/

#if FMSTR_SHORT_INTR

static void FMSTR_RxDequeue(void)
{ 
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
    FMSTR_BCHR nChar = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	71fb      	strb	r3, [r7, #7]
    
    /* get all queued characters */
    while(pcm_pRQueueRP != pcm_pRQueueWP)
 8001fee:	e019      	b.n	8002024 <FMSTR_RxDequeue+0x40>
    {
        nChar = *pcm_pRQueueRP++;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <FMSTR_RxDequeue+0x58>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	4911      	ldr	r1, [pc, #68]	; (800203c <FMSTR_RxDequeue+0x58>)
 8001ff8:	600a      	str	r2, [r1, #0]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	71fb      	strb	r3, [r7, #7]

        /*lint -e{946} pointer arithmetic is okay here (same array) */
        if(pcm_pRQueueRP >= (pcm_pRQueueBuffer + FMSTR_COMM_RQUEUE_SIZE))
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <FMSTR_RxDequeue+0x58>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a0f      	ldr	r2, [pc, #60]	; (8002040 <FMSTR_RxDequeue+0x5c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d302      	bcc.n	800200e <FMSTR_RxDequeue+0x2a>
        {
            pcm_pRQueueRP = pcm_pRQueueBuffer;
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <FMSTR_RxDequeue+0x58>)
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <FMSTR_RxDequeue+0x60>)
 800200c:	601a      	str	r2, [r3, #0]
        }
        
        /* emulate the SCI receive event */
        if(!pcm_wFlags.flg.bTxActive)
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <FMSTR_RxDequeue+0x64>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d103      	bne.n	8002024 <FMSTR_RxDequeue+0x40>
        {
            (void)FMSTR_Rx(nChar);
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f962 	bl	80022e8 <FMSTR_Rx>
    while(pcm_pRQueueRP != pcm_pRQueueWP)
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <FMSTR_RxDequeue+0x58>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <FMSTR_RxDequeue+0x68>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d1df      	bne.n	8001ff0 <FMSTR_RxDequeue+0xc>
        }
    }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20003120 	.word	0x20003120
 8002040:	20003120 	.word	0x20003120
 8002044:	20002920 	.word	0x20002920
 8002048:	2000290c 	.word	0x2000290c
 800204c:	20003124 	.word	0x20003124

08002050 <FMSTR_ProcessSCI>:
* @note This function can be called either from SCI ISR or from the polling routine
*
******************************************************************************/

void FMSTR_ProcessSCI(void)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
    /* read & clear status     */
  FMSTR_SCISR wSciSR = FMSTR_SCI_GETSR();
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <FMSTR_ProcessSCI+0x8c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	71fb      	strb	r3, [r7, #7]

   /* transmitter active and empty? */
   if (pcm_wFlags.flg.bTxActive )
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <FMSTR_ProcessSCI+0x90>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d028      	beq.n	80020bc <FMSTR_ProcessSCI+0x6c>
   {
       /* able to accept another character? */
       if(FMSTR_SCI_TXEMPTY(wSciSR))
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d009      	beq.n	8002088 <FMSTR_ProcessSCI+0x38>
       {
           FMSTR_U8 ch;
           /* just put the byte into the SCI transmit buffer */
           if(!FMSTR_Tx(&ch))
 8002074:	1dbb      	adds	r3, r7, #6
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f8e8 	bl	800224c <FMSTR_Tx>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <FMSTR_ProcessSCI+0x38>
               FMSTR_SCI_PUTCHAR((FMSTR_U8) ch);
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <FMSTR_ProcessSCI+0x94>)
 8002084:	79ba      	ldrb	r2, [r7, #6]
 8002086:	701a      	strb	r2, [r3, #0]
       }
       
#if FMSTR_SCI_HAS_TXQUEUE
       /* waiting for transmission complete flag? */
       if(pcm_wFlags.flg.bTxWaitTC && FMSTR_SCI_TXEMPTY(wSciSR))
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <FMSTR_ProcessSCI+0x90>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <FMSTR_ProcessSCI+0x54>
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <FMSTR_ProcessSCI+0x54>
       {
           /* after TC, we can switch to listen mode safely */
           FMSTR_Listen();
 80020a0:	f000 f822 	bl	80020e8 <FMSTR_Listen>
#endif


#if !FMSTR_SCI_TWOWIRE_ONLY
       /* read-out and ignore any received character (loopback) */
       if(FMSTR_SCI_RXREADY(wSciSR))
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d012      	beq.n	80020d4 <FMSTR_ProcessSCI+0x84>
       {
           /*lint -esym(550, nRxChar) */
           volatile FMSTR_U16 nRxChar;
           nRxChar = FMSTR_SCI_GETCHAR(); 
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <FMSTR_ProcessSCI+0x94>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	80bb      	strh	r3, [r7, #4]
           FMSTR_UNUSED(nRxChar);
 80020b8:	88bb      	ldrh	r3, [r7, #4]
               pcm_nDebugTxPollCount = -1;
           }
       }
#endif
   }
}
 80020ba:	e00b      	b.n	80020d4 <FMSTR_ProcessSCI+0x84>
       if (FMSTR_SCI_RXREADY(wSciSR))
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <FMSTR_ProcessSCI+0x84>
          register   FMSTR_BCHR nRxChar = 0U;
 80020c6:	2400      	movs	r4, #0
          nRxChar = (FMSTR_BCHR) FMSTR_SCI_GETCHAR();
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <FMSTR_ProcessSCI+0x94>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b2dc      	uxtb	r4, r3
            FMSTR_RxQueue(nRxChar);
 80020ce:	4620      	mov	r0, r4
 80020d0:	f7ff ff5e 	bl	8001f90 <FMSTR_RxQueue>
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd90      	pop	{r4, r7, pc}
 80020dc:	40004800 	.word	0x40004800
 80020e0:	2000290c 	.word	0x2000290c
 80020e4:	40004804 	.word	0x40004804

080020e8 <FMSTR_Listen>:
* Reset the receiver machine and start listening on a serial line
*
******************************************************************************/

static void FMSTR_Listen(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
    pcm_nRxTodo = 0U;
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <FMSTR_Listen+0x58>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]

    /* disable transmitter state machine */
    pcm_wFlags.flg.bTxActive = 0U;
 80020f2:	4a14      	ldr	r2, [pc, #80]	; (8002144 <FMSTR_Listen+0x5c>)
 80020f4:	7813      	ldrb	r3, [r2, #0]
 80020f6:	f36f 0300 	bfc	r3, #0, #1
 80020fa:	7013      	strb	r3, [r2, #0]

#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
    pcm_wFlags.flg.bTxWaitTC = 0U;
 80020fc:	4a11      	ldr	r2, [pc, #68]	; (8002144 <FMSTR_Listen+0x5c>)
 80020fe:	7813      	ldrb	r3, [r2, #0]
 8002100:	f36f 0341 	bfc	r3, #1, #1
 8002104:	7013      	strb	r3, [r2, #0]
    /* disable transmitter, enable receiver (enables single-wire connection) */
#if !FMSTR_SCI_TWOWIRE_ONLY
    FMSTR_SCI_TD();
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <FMSTR_Listen+0x60>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a0f      	ldr	r2, [pc, #60]	; (8002148 <FMSTR_Listen+0x60>)
 800210c:	f023 0308 	bic.w	r3, r3, #8
 8002110:	6013      	str	r3, [r2, #0]
    FMSTR_SCI_RE();
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <FMSTR_Listen+0x60>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <FMSTR_Listen+0x60>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6013      	str	r3, [r2, #0]
#endif /* (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART) */

    /* disable transmit, enable receive interrupts */
#if FMSTR_SHORT_INTR || FMSTR_LONG_INTR
#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
    FMSTR_SCI_DTXI();   /* disable SCI transmit interrupt */
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <FMSTR_Listen+0x60>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <FMSTR_Listen+0x60>)
 8002124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002128:	6013      	str	r3, [r2, #0]
    FMSTR_SCI_ERXI();   /* enable SCI receive interrupt */
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <FMSTR_Listen+0x60>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a06      	ldr	r2, [pc, #24]	; (8002148 <FMSTR_Listen+0x60>)
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	6013      	str	r3, [r2, #0]
    /* we have just finished the transmission of the test frame, now wait the 32x times the sendtime 
       to receive any command from PC (count<0 is measurement, count>0 is waiting, count=0 is send trigger) */
    if(pcm_nDebugTxPollCount < 0)
        pcm_nDebugTxPollCount *= -(FMSTR_DEBUG_TX_POLLCNT_XFACTOR);
#endif
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	20002911 	.word	0x20002911
 8002144:	2000290c 	.word	0x2000290c
 8002148:	4000480c 	.word	0x4000480c

0800214c <FMSTR_SendError>:
* @param    nErrCode - error code to be sent
*
******************************************************************************/

static void FMSTR_SendError(FMSTR_BCHR nErrCode)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
    /* fill & send single-byte response */
    *pcm_pCommBuffer = nErrCode;
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <FMSTR_SendError+0x20>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	7013      	strb	r3, [r2, #0]
    FMSTR_SendResponse(pcm_pCommBuffer, 1U);
 800215c:	2101      	movs	r1, #1
 800215e:	4803      	ldr	r0, [pc, #12]	; (800216c <FMSTR_SendError+0x20>)
 8002160:	f000 f806 	bl	8002170 <FMSTR_SendResponse>
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	200028cc 	.word	0x200028cc

08002170 <FMSTR_SendResponse>:
* (inlcuding the status byte). It computes the check sum and kicks on tx.
*
******************************************************************************/

void FMSTR_SendResponse(FMSTR_BPTR pResponse, FMSTR_SIZE8 nLength)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
    FMSTR_U16 chSum = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	81fb      	strh	r3, [r7, #14]
    FMSTR_SIZE8 i;
    FMSTR_U8 c;

    /* remember the buffer to be sent */
    pcm_pTxBuff = pResponse;
 8002180:	4a2d      	ldr	r2, [pc, #180]	; (8002238 <FMSTR_SendResponse+0xc8>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6013      	str	r3, [r2, #0]
    
    /* status byte and data are already there, compute checksum only     */
    for (i=0U; i<nLength; i++)
 8002186:	2300      	movs	r3, #0
 8002188:	737b      	strb	r3, [r7, #13]
 800218a:	e012      	b.n	80021b2 <FMSTR_SendResponse+0x42>
    {
        c = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	733b      	strb	r3, [r7, #12]
        pResponse = FMSTR_ValueFromBuffer8(&c, pResponse);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	733b      	strb	r3, [r7, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3301      	adds	r3, #1
 800219a:	607b      	str	r3, [r7, #4]
        /* add character to checksum */
        chSum += c;
 800219c:	7b3b      	ldrb	r3, [r7, #12]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	4413      	add	r3, r2
 80021a4:	81fb      	strh	r3, [r7, #14]
        /* prevent saturation to happen on DSP platforms */
        chSum &= 0xffU;
 80021a6:	89fb      	ldrh	r3, [r7, #14]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	81fb      	strh	r3, [r7, #14]
    for (i=0U; i<nLength; i++)
 80021ac:	7b7b      	ldrb	r3, [r7, #13]
 80021ae:	3301      	adds	r3, #1
 80021b0:	737b      	strb	r3, [r7, #13]
 80021b2:	7b7a      	ldrb	r2, [r7, #13]
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d3e8      	bcc.n	800218c <FMSTR_SendResponse+0x1c>
    }
    
    /* store checksum after the message */
    pResponse = FMSTR_ValueToBuffer8(pResponse, (FMSTR_U8) (((FMSTR_U8)(~chSum)) + 1U));
 80021ba:	89fb      	ldrh	r3, [r7, #14]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	425b      	negs	r3, r3
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3301      	adds	r3, #1
 80021ca:	607b      	str	r3, [r7, #4]

    /* send the message and the checksum and the SOB */
    pcm_nTxTodo = (FMSTR_SIZE8) (nLength + 1U); 
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	3301      	adds	r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <FMSTR_SendResponse+0xcc>)
 80021d4:	701a      	strb	r2, [r3, #0]
    
    /* now transmitting the response */
    pcm_wFlags.flg.bTxActive = 1U;
 80021d6:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <FMSTR_SendResponse+0xd0>)
 80021d8:	7813      	ldrb	r3, [r2, #0]
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	7013      	strb	r3, [r2, #0]
#if (FMSTR_USE_USB_CDC) || (FMSTR_USE_MQX_IO) || (FMSTR_USE_JTAG)
    pcm_wFlags.flg.bTxFirstSobSend = 1U;
#endif

#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
    pcm_wFlags.flg.bTxWaitTC = 0U;
 80021e0:	4a17      	ldr	r2, [pc, #92]	; (8002240 <FMSTR_SendResponse+0xd0>)
 80021e2:	7813      	ldrb	r3, [r2, #0]
 80021e4:	f36f 0341 	bfc	r3, #1, #1
 80021e8:	7013      	strb	r3, [r2, #0]
#endif

    /* do not replicate the initial SOB  */
    pcm_wFlags.flg.bTxLastCharSOB = 0U;
 80021ea:	4a15      	ldr	r2, [pc, #84]	; (8002240 <FMSTR_SendResponse+0xd0>)
 80021ec:	7813      	ldrb	r3, [r2, #0]
 80021ee:	f36f 0382 	bfc	r3, #2, #1
 80021f2:	7013      	strb	r3, [r2, #0]
#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
    {

        /* disable receiver, enable transmitter (single-wire communication) */
#if !FMSTR_SCI_TWOWIRE_ONLY
        FMSTR_SCI_RD();
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <FMSTR_SendResponse+0xd4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a12      	ldr	r2, [pc, #72]	; (8002244 <FMSTR_SendResponse+0xd4>)
 80021fa:	f023 0304 	bic.w	r3, r3, #4
 80021fe:	6013      	str	r3, [r2, #0]
        FMSTR_SCI_TE();
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <FMSTR_SendResponse+0xd4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <FMSTR_SendResponse+0xd4>)
 8002206:	f043 0308 	orr.w	r3, r3, #8
 800220a:	6013      	str	r3, [r2, #0]
#endif        
        /* kick on the SCI transmission (also clears TX Empty flag on some platforms) */
        FMSTR_SCI_PUTCHAR(FMSTR_SOB);
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <FMSTR_SendResponse+0xd8>)
 800220e:	222b      	movs	r2, #43	; 0x2b
 8002210:	701a      	strb	r2, [r3, #0]
#endif

    /* TX interrupt enable, RX interrupt disable */
#if (FMSTR_LONG_INTR) || (FMSTR_SHORT_INTR)
#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
    FMSTR_SCI_DRXI();
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <FMSTR_SendResponse+0xd4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <FMSTR_SendResponse+0xd4>)
 8002218:	f023 0320 	bic.w	r3, r3, #32
 800221c:	6013      	str	r3, [r2, #0]
    FMSTR_SCI_ETXI();
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <FMSTR_SendResponse+0xd4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <FMSTR_SendResponse+0xd4>)
 8002224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002228:	6013      	str	r3, [r2, #0]
    serial_putc(pSerialObj, (FMSTR_U8) FMSTR_SOB);
        /* enabled TX interrupt */
    serial_irq_set(pSerialObj, TxIrq, 1);
#endif
#endif /* FMSTR_LONG_INTR || FMSTR_SHORT_INTR */    
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20002914 	.word	0x20002914
 800223c:	20002910 	.word	0x20002910
 8002240:	2000290c 	.word	0x2000290c
 8002244:	4000480c 	.word	0x4000480c
 8002248:	40004804 	.word	0x40004804

0800224c <FMSTR_Tx>:
* get ready buffer(prepare data to send)
*
******************************************************************************/

FMSTR_BOOL FMSTR_Tx(FMSTR_U8* pTxChar)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
        *pTxChar = FMSTR_SOB;
        pcm_wFlags.flg.bTxFirstSobSend = 0U;
        return FMSTR_FALSE;
    }
#endif      
    if (pcm_nTxTodo)
 8002254:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <FMSTR_Tx+0x8c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02b      	beq.n	80022b4 <FMSTR_Tx+0x68>
    {
        /* fetch & send character ready to transmit */
        /*lint -e{534} ignoring return value */
        (void)FMSTR_ValueFromBuffer8(pTxChar, pcm_pTxBuff);
 800225c:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <FMSTR_Tx+0x90>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	701a      	strb	r2, [r3, #0]
        
        /* first, handle the replicated SOB characters */
        if (*pTxChar == FMSTR_SOB)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b2b      	cmp	r3, #43	; 0x2b
 800226c:	d115      	bne.n	800229a <FMSTR_Tx+0x4e>
        {
            pcm_wFlags.flg.bTxLastCharSOB ^= 1U;
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <FMSTR_Tx+0x94>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f083 0301 	eor.w	r3, r3, #1
 800227c:	b2d9      	uxtb	r1, r3
 800227e:	4a18      	ldr	r2, [pc, #96]	; (80022e0 <FMSTR_Tx+0x94>)
 8002280:	7813      	ldrb	r3, [r2, #0]
 8002282:	f361 0382 	bfi	r3, r1, #2, #1
 8002286:	7013      	strb	r3, [r2, #0]
            if ((pcm_wFlags.flg.bTxLastCharSOB))
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <FMSTR_Tx+0x94>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <FMSTR_Tx+0x4e>
            {
                /* yes, repeat the SOB next time */
                return FMSTR_FALSE;
 8002296:	2300      	movs	r3, #0
 8002298:	e018      	b.n	80022cc <FMSTR_Tx+0x80>
            }
        }
        /* no, advance tx buffer pointer */
        pcm_nTxTodo--;
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <FMSTR_Tx+0x8c>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	3b01      	subs	r3, #1
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <FMSTR_Tx+0x8c>)
 80022a4:	701a      	strb	r2, [r3, #0]
        pcm_pTxBuff = FMSTR_SkipInBuffer(pcm_pTxBuff, 1U);
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <FMSTR_Tx+0x90>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <FMSTR_Tx+0x90>)
 80022ae:	6013      	str	r3, [r2, #0]
        return FMSTR_FALSE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e00b      	b.n	80022cc <FMSTR_Tx+0x80>
    
    /* when SCI TX buffering is enabled, we must first wait until all 
       characters are physically transmitted (before disabling transmitter) */
#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
  #if FMSTR_SCI_HAS_TXQUEUE
    pcm_wFlags.flg.bTxWaitTC = 1;
 80022b4:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <FMSTR_Tx+0x94>)
 80022b6:	7813      	ldrb	r3, [r2, #0]
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	7013      	strb	r3, [r2, #0]

    /* wait for SCI TC interrupt */
    #if FMSTR_SHORT_INTR || FMSTR_LONG_INTR
    FMSTR_SCI_ETCI();
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <FMSTR_Tx+0x98>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a08      	ldr	r2, [pc, #32]	; (80022e4 <FMSTR_Tx+0x98>)
 80022c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c8:	6013      	str	r3, [r2, #0]
#else
    /* start listening immediately */
    FMSTR_Listen();
#endif

    return FMSTR_TRUE;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	20002910 	.word	0x20002910
 80022dc:	20002914 	.word	0x20002914
 80022e0:	2000290c 	.word	0x2000290c
 80022e4:	4000480c 	.word	0x4000480c

080022e8 <FMSTR_Rx>:
* protocol decode routine. 
*
******************************************************************************/

FMSTR_BOOL FMSTR_Rx(FMSTR_BCHR nRxChar)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
    FMSTR_SERIAL_FLAGS * pflg = &pcm_wFlags;
 80022f2:	4b53      	ldr	r3, [pc, #332]	; (8002440 <FMSTR_Rx+0x158>)
 80022f4:	60fb      	str	r3, [r7, #12]
    /* first, handle the replicated SOB characters */
    if(nRxChar == FMSTR_SOB)
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b2b      	cmp	r3, #43	; 0x2b
 80022fa:	d115      	bne.n	8002328 <FMSTR_Rx+0x40>
    {
        pflg->flg.bRxLastCharSOB ^= 1;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f083 0301 	eor.w	r3, r3, #1
 800230a:	b2d9      	uxtb	r1, r3
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	7813      	ldrb	r3, [r2, #0]
 8002310:	f361 03c3 	bfi	r3, r1, #3, #1
 8002314:	7013      	strb	r3, [r2, #0]
        if(pflg->flg.bRxLastCharSOB)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <FMSTR_Rx+0x40>
        {
            /* this is either the first byte of replicated SOB or a  */
            /* real Start-of-Block mark - we will decide next time in FMSTR_Rx */
            return FMSTR_FALSE;
 8002324:	2300      	movs	r3, #0
 8002326:	e087      	b.n	8002438 <FMSTR_Rx+0x150>
        }
    }

    /* we have got a common character preceded by the SOB -  */
    /* this is the command code! */
    if(pflg->flg.bRxLastCharSOB)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d030      	beq.n	8002398 <FMSTR_Rx+0xb0>
    {

        /* reset receiving process */
        pcm_pRxBuff = pcm_pCommBuffer;
 8002336:	4b43      	ldr	r3, [pc, #268]	; (8002444 <FMSTR_Rx+0x15c>)
 8002338:	4a43      	ldr	r2, [pc, #268]	; (8002448 <FMSTR_Rx+0x160>)
 800233a:	601a      	str	r2, [r3, #0]
        *pcm_pRxBuff++ = nRxChar;
 800233c:	4b41      	ldr	r3, [pc, #260]	; (8002444 <FMSTR_Rx+0x15c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	4940      	ldr	r1, [pc, #256]	; (8002444 <FMSTR_Rx+0x15c>)
 8002344:	600a      	str	r2, [r1, #0]
 8002346:	79fa      	ldrb	r2, [r7, #7]
 8002348:	701a      	strb	r2, [r3, #0]

        /* start computing the checksum */
        pcm_nRxCheckSum = nRxChar;
 800234a:	4a40      	ldr	r2, [pc, #256]	; (800244c <FMSTR_Rx+0x164>)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	7013      	strb	r3, [r2, #0]
        pcm_nRxTodo = 0U;
 8002350:	4b3f      	ldr	r3, [pc, #252]	; (8002450 <FMSTR_Rx+0x168>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
    
        /* if the standard command was received, the message length will come in next byte */
        pflg->flg.bRxMsgLengthNext = 1U;
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	7813      	ldrb	r3, [r2, #0]
 800235a:	f043 0310 	orr.w	r3, r3, #16
 800235e:	7013      	strb	r3, [r2, #0]

        /* fast command? */
        if(!((~nRxChar) & FMSTR_FASTCMD))
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	43db      	mvns	r3, r3
 8002364:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10e      	bne.n	800238a <FMSTR_Rx+0xa2>
        {
            /* fast command received, there will be no length information */
            pflg->flg.bRxMsgLengthNext = 0U;
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	7813      	ldrb	r3, [r2, #0]
 8002370:	f36f 1304 	bfc	r3, #4, #1
 8002374:	7013      	strb	r3, [r2, #0]
            /* as it is encoded in the command byte directly */
            pcm_nRxTodo = (FMSTR_SIZE8) 
                (((((FMSTR_SIZE8)nRxChar) & FMSTR_FASTCMD_DATALEN_MASK) >> FMSTR_FASTCMD_DATALEN_SHIFT) + 1U);
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	08db      	lsrs	r3, r3, #3
            pcm_nRxTodo = (FMSTR_SIZE8) 
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f003 0306 	and.w	r3, r3, #6
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3301      	adds	r3, #1
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4b32      	ldr	r3, [pc, #200]	; (8002450 <FMSTR_Rx+0x168>)
 8002388:	701a      	strb	r2, [r3, #0]
        }

        /* command code stored & processed */
        pflg->flg.bRxLastCharSOB = 0U;
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	7813      	ldrb	r3, [r2, #0]
 800238e:	f36f 03c3 	bfc	r3, #3, #1
 8002392:	7013      	strb	r3, [r2, #0]
        return FMSTR_FALSE;
 8002394:	2300      	movs	r3, #0
 8002396:	e04f      	b.n	8002438 <FMSTR_Rx+0x150>
    }

    /* we are waiting for the length byte */
    if(pflg->flg.bRxMsgLengthNext)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <FMSTR_Rx+0xd2>
    {
        /* this byte, total data length and the checksum */
        pcm_nRxTodo = (FMSTR_SIZE8) (1U + ((FMSTR_SIZE8)nRxChar) + 1U);
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	3302      	adds	r3, #2
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b28      	ldr	r3, [pc, #160]	; (8002450 <FMSTR_Rx+0x168>)
 80023ae:	701a      	strb	r2, [r3, #0]
        /* now read the data bytes */
        pflg->flg.bRxMsgLengthNext = 0U;
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	7813      	ldrb	r3, [r2, #0]
 80023b4:	f36f 1304 	bfc	r3, #4, #1
 80023b8:	7013      	strb	r3, [r2, #0]

    }

    /* waiting for a data byte? */
    if(pcm_nRxTodo)
 80023ba:	4b25      	ldr	r3, [pc, #148]	; (8002450 <FMSTR_Rx+0x168>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d039      	beq.n	8002436 <FMSTR_Rx+0x14e>
    {
        /* add this byte to checksum */
        pcm_nRxCheckSum += nRxChar;
 80023c2:	4b22      	ldr	r3, [pc, #136]	; (800244c <FMSTR_Rx+0x164>)
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	4413      	add	r3, r2
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b1f      	ldr	r3, [pc, #124]	; (800244c <FMSTR_Rx+0x164>)
 80023ce:	701a      	strb	r2, [r3, #0]

        /* decrease number of expected bytes */
        pcm_nRxTodo--;
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <FMSTR_Rx+0x168>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <FMSTR_Rx+0x168>)
 80023da:	701a      	strb	r2, [r3, #0]
        /* was it the last byte of the message (checksum)? */
        if(!pcm_nRxTodo)
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <FMSTR_Rx+0x168>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d114      	bne.n	800240e <FMSTR_Rx+0x126>
        {
            /* receive buffer overflow? */
            if(pcm_pRxBuff == NULL)
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <FMSTR_Rx+0x15c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d103      	bne.n	80023f4 <FMSTR_Rx+0x10c>
            {
                FMSTR_SendError(FMSTR_STC_CMDTOOLONG);
 80023ec:	2083      	movs	r0, #131	; 0x83
 80023ee:	f7ff fead 	bl	800214c <FMSTR_SendError>
 80023f2:	e00a      	b.n	800240a <FMSTR_Rx+0x122>
            }
            /* checksum error? */
            else if((pcm_nRxCheckSum & 0xffU) != 0U)
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <FMSTR_Rx+0x164>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <FMSTR_Rx+0x11c>
            {
                FMSTR_SendError(FMSTR_STC_CMDCSERR);
 80023fc:	2082      	movs	r0, #130	; 0x82
 80023fe:	f7ff fea5 	bl	800214c <FMSTR_SendError>
 8002402:	e002      	b.n	800240a <FMSTR_Rx+0x122>
#if (FMSTR_USE_USB_CDC) && (FMSTR_SHORT_INTR)
                /* Decode protocol and send response in Poll function */
                pflg->flg.bUsbReadyToDecode = 1U;
#else
                /* do decode now! */
                FMSTR_ProtocolDecoder(pcm_pCommBuffer);
 8002404:	4810      	ldr	r0, [pc, #64]	; (8002448 <FMSTR_Rx+0x160>)
 8002406:	f7fe ff07 	bl	8001218 <FMSTR_ProtocolDecoder>
#endif
            }

            return FMSTR_TRUE;
 800240a:	2301      	movs	r3, #1
 800240c:	e014      	b.n	8002438 <FMSTR_Rx+0x150>
        }
        /* not the last character yet */
        else 
        {   
            /* is there still a space in the buffer? */
            if(pcm_pRxBuff)
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <FMSTR_Rx+0x15c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00f      	beq.n	8002436 <FMSTR_Rx+0x14e>
            {
                /*lint -e{946} pointer arithmetic is okay here (same array) */
                if(pcm_pRxBuff < (pcm_pCommBuffer + FMSTR_COMM_BUFFER_SIZE))
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <FMSTR_Rx+0x15c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <FMSTR_Rx+0x16c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d207      	bcs.n	8002430 <FMSTR_Rx+0x148>
                {
                    /* store byte  */
                    *pcm_pRxBuff++ = nRxChar;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <FMSTR_Rx+0x15c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	4907      	ldr	r1, [pc, #28]	; (8002444 <FMSTR_Rx+0x15c>)
 8002428:	600a      	str	r2, [r1, #0]
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	e002      	b.n	8002436 <FMSTR_Rx+0x14e>
                else
                {
                    /* NULL rx pointer means buffer overflow - but we still need */
                    /* to receive all message characters (for the single-wire mode) */
                    /* so keep "receiving" - but throw away all characters from now */
                    pcm_pRxBuff = NULL;
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <FMSTR_Rx+0x15c>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return FMSTR_FALSE;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	2000290c 	.word	0x2000290c
 8002444:	20002918 	.word	0x20002918
 8002448:	200028cc 	.word	0x200028cc
 800244c:	2000291c 	.word	0x2000291c
 8002450:	20002911 	.word	0x20002911
 8002454:	20002908 	.word	0x20002908

08002458 <FMSTR_InitSerial>:
* @brief    Serial communication initialization
*
******************************************************************************/

FMSTR_BOOL FMSTR_InitSerial(void)
{   
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
    /* initialize all state variables */
    pcm_wFlags.all = 0U;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <FMSTR_InitSerial+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
    pcm_nTxTodo = 0U;
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <FMSTR_InitSerial+0x50>)
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
            
    /* Initialize SCI and JTAG interface */
#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART) && (FMSTR_SCI_TWOWIRE_ONLY)
    /* to enable TX and RX together in FreeMASTER initialization */
      
    FMSTR_SCI_TE_RE();	
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <FMSTR_InitSerial+0x54>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0f      	ldr	r2, [pc, #60]	; (80024ac <FMSTR_InitSerial+0x54>)
 800246e:	f043 030c 	orr.w	r3, r3, #12
 8002472:	6013      	str	r3, [r2, #0]
    FMSTR_SCI_DTXI();	// disable SCI transmit interrupt
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <FMSTR_InitSerial+0x54>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <FMSTR_InitSerial+0x54>)
 800247a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800247e:	6013      	str	r3, [r2, #0]
    FMSTR_SCI_ERXI();	// enable SCI recieve interrupt
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <FMSTR_InitSerial+0x54>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a09      	ldr	r2, [pc, #36]	; (80024ac <FMSTR_InitSerial+0x54>)
 8002486:	f043 0320 	orr.w	r3, r3, #32
 800248a:	6013      	str	r3, [r2, #0]
#endif
    
#if (FMSTR_SHORT_INTR) & ((FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART) || (FMSTR_USE_JTAG))
    pcm_pRQueueRP = pcm_pRQueueBuffer;
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <FMSTR_InitSerial+0x58>)
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <FMSTR_InitSerial+0x5c>)
 8002490:	601a      	str	r2, [r3, #0]
    pcm_pRQueueWP = pcm_pRQueueBuffer;
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <FMSTR_InitSerial+0x60>)
 8002494:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <FMSTR_InitSerial+0x5c>)
 8002496:	601a      	str	r2, [r3, #0]
     * as soon as possible during Listen */
    pcm_nDebugTxPollCount = 0;
#endif

    /* start listening for commands */
    FMSTR_Listen();
 8002498:	f7ff fe26 	bl	80020e8 <FMSTR_Listen>
    return FMSTR_TRUE;
 800249c:	2301      	movs	r3, #1
}
 800249e:	4618      	mov	r0, r3
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000290c 	.word	0x2000290c
 80024a8:	20002910 	.word	0x20002910
 80024ac:	4000480c 	.word	0x4000480c
 80024b0:	20003120 	.word	0x20003120
 80024b4:	20002920 	.word	0x20002920
 80024b8:	20003124 	.word	0x20003124

080024bc <FMSTR_Poll>:
* and it is tried to be fixed periodically here in FMSTR_Poll.
*
*******************************************************************************/

void FMSTR_Poll(void)
{ 
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
    /*  */
    FMSTR_ProcessUSB();
#elif ((FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART) || FMSTR_USE_JTAG)

    /* process queued SCI characters */
    FMSTR_RxDequeue(); 
 80024c0:	f7ff fd90 	bl	8001fe4 <FMSTR_RxDequeue>
#if FMSTR_DEBUG_TX
    /* down-counting the polls for heuristic time measurement */
    if(pcm_nDebugTxPollCount != 0 && pcm_nDebugTxPollCount > FMSTR_DEBUG_TX_POLLCNT_MIN)
        pcm_nDebugTxPollCount--;
#endif
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024cc:	f001 f9c0 	bl	8003850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d0:	f000 f826 	bl	8002520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024d4:	f000 fbf0 	bl	8002cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80024d8:	f000 fbce 	bl	8002c78 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80024dc:	f000 fb72 	bl	8002bc4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80024e0:	f000 fb9a 	bl	8002c18 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80024e4:	f000 f968 	bl	80027b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80024e8:	f000 fa2a 	bl	8002940 <MX_TIM2_Init>
  MX_ADC1_Init();
 80024ec:	f000 f8ac 	bl	8002648 <MX_ADC1_Init>
  MX_TIM3_Init();
 80024f0:	f000 faca 	bl	8002a88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
#if !FMSTR_DISABLE
	FMSTR_Init();
 80024f4:	f7fe fe7e 	bl	80011f4 <FMSTR_Init>
#endif
	PGain = 0.01;
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <main+0x44>)
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <main+0x48>)
 80024fc:	601a      	str	r2, [r3, #0]
	IGain = 2.5;
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <main+0x4c>)
 8002500:	4a05      	ldr	r2, [pc, #20]	; (8002518 <main+0x50>)
 8002502:	601a      	str	r2, [r3, #0]
	PWM_DTC = 0.5;
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <main+0x54>)
 8002506:	2200      	movs	r2, #0
 8002508:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800250a:	e7fe      	b.n	800250a <main+0x42>
 800250c:	20003658 	.word	0x20003658
 8002510:	3c23d70a 	.word	0x3c23d70a
 8002514:	200035c4 	.word	0x200035c4
 8002518:	40200000 	.word	0x40200000
 800251c:	2000375c 	.word	0x2000375c

08002520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b0aa      	sub	sp, #168	; 0xa8
 8002524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002526:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800252a:	2234      	movs	r2, #52	; 0x34
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f006 fb84 	bl	8008c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002534:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002544:	f107 0308 	add.w	r3, r7, #8
 8002548:	2258      	movs	r2, #88	; 0x58
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f006 fb75 	bl	8008c3c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <SystemClock_Config+0x120>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a39      	ldr	r2, [pc, #228]	; (8002640 <SystemClock_Config+0x120>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <SystemClock_Config+0x120>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800256e:	2300      	movs	r3, #0
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	4b34      	ldr	r3, [pc, #208]	; (8002644 <SystemClock_Config+0x124>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a33      	ldr	r2, [pc, #204]	; (8002644 <SystemClock_Config+0x124>)
 8002578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b31      	ldr	r3, [pc, #196]	; (8002644 <SystemClock_Config+0x124>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800258a:	2301      	movs	r3, #1
 800258c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800258e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002592:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002594:	2302      	movs	r3, #2
 8002596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800259a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800259e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025a2:	2308      	movs	r3, #8
 80025a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 400;
 80025a8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80025ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80025b0:	2304      	movs	r3, #4
 80025b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025b6:	2302      	movs	r3, #2
 80025b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025bc:	2302      	movs	r3, #2
 80025be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fc7c 	bl	8005ec4 <HAL_RCC_OscConfig>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80025d2:	f000 fc2d 	bl	8002e30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025d6:	230f      	movs	r3, #15
 80025d8:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025da:	2302      	movs	r3, #2
 80025dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025de:	2300      	movs	r3, #0
 80025e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025e8:	2300      	movs	r3, #0
 80025ea:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80025ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80025f0:	2103      	movs	r1, #3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f002 ffde 	bl	80055b4 <HAL_RCC_ClockConfig>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80025fe:	f000 fc17 	bl	8002e30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002602:	2320      	movs	r3, #32
 8002604:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
 8002606:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800260a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 800260c:	2308      	movs	r3, #8
 800260e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002610:	2302      	movs	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 8;
 8002614:	2308      	movs	r3, #8
 8002616:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLI2SQ;
 8002618:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800261c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800261e:	2300      	movs	r3, #0
 8002620:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	4618      	mov	r0, r3
 8002628:	f003 f9c0 	bl	80059ac <HAL_RCCEx_PeriphCLKConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8002632:	f000 fbfd 	bl	8002e30 <Error_Handler>
  }
}
 8002636:	bf00      	nop
 8002638:	37a8      	adds	r7, #168	; 0xa8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40007000 	.word	0x40007000

08002648 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08c      	sub	sp, #48	; 0x30
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800264e:	f107 0320 	add.w	r3, r7, #32
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800265c:	463b      	mov	r3, r7
 800265e:	2220      	movs	r2, #32
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f006 faea 	bl	8008c3c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <MX_ADC1_Init+0x164>)
 800266a:	4a51      	ldr	r2, [pc, #324]	; (80027b0 <MX_ADC1_Init+0x168>)
 800266c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800266e:	4b4f      	ldr	r3, [pc, #316]	; (80027ac <MX_ADC1_Init+0x164>)
 8002670:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002674:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002676:	4b4d      	ldr	r3, [pc, #308]	; (80027ac <MX_ADC1_Init+0x164>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800267c:	4b4b      	ldr	r3, [pc, #300]	; (80027ac <MX_ADC1_Init+0x164>)
 800267e:	2201      	movs	r2, #1
 8002680:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002682:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <MX_ADC1_Init+0x164>)
 8002684:	2201      	movs	r2, #1
 8002686:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002688:	4b48      	ldr	r3, [pc, #288]	; (80027ac <MX_ADC1_Init+0x164>)
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002690:	4b46      	ldr	r3, [pc, #280]	; (80027ac <MX_ADC1_Init+0x164>)
 8002692:	2200      	movs	r2, #0
 8002694:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002696:	4b45      	ldr	r3, [pc, #276]	; (80027ac <MX_ADC1_Init+0x164>)
 8002698:	4a46      	ldr	r2, [pc, #280]	; (80027b4 <MX_ADC1_Init+0x16c>)
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800269c:	4b43      	ldr	r3, [pc, #268]	; (80027ac <MX_ADC1_Init+0x164>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80026a2:	4b42      	ldr	r3, [pc, #264]	; (80027ac <MX_ADC1_Init+0x164>)
 80026a4:	2202      	movs	r2, #2
 80026a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026a8:	4b40      	ldr	r3, [pc, #256]	; (80027ac <MX_ADC1_Init+0x164>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80026b0:	4b3e      	ldr	r3, [pc, #248]	; (80027ac <MX_ADC1_Init+0x164>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026b6:	483d      	ldr	r0, [pc, #244]	; (80027ac <MX_ADC1_Init+0x164>)
 80026b8:	f001 f960 	bl	800397c <HAL_ADC_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80026c2:	f000 fbb5 	bl	8002e30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026d2:	f107 0320 	add.w	r3, r7, #32
 80026d6:	4619      	mov	r1, r3
 80026d8:	4834      	ldr	r0, [pc, #208]	; (80027ac <MX_ADC1_Init+0x164>)
 80026da:	f001 faf1 	bl	8003cc0 <HAL_ADC_ConfigChannel>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80026e4:	f000 fba4 	bl	8002e30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80026e8:	2301      	movs	r3, #1
 80026ea:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 80026ec:	2302      	movs	r3, #2
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026f0:	f107 0320 	add.w	r3, r7, #32
 80026f4:	4619      	mov	r1, r3
 80026f6:	482d      	ldr	r0, [pc, #180]	; (80027ac <MX_ADC1_Init+0x164>)
 80026f8:	f001 fae2 	bl	8003cc0 <HAL_ADC_ConfigChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8002702:	f000 fb95 	bl	8002e30 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8002706:	2302      	movs	r3, #2
 8002708:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800270a:	2301      	movs	r3, #1
 800270c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800270e:	2304      	movs	r3, #4
 8002710:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002712:	2306      	movs	r3, #6
 8002714:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8002716:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800271a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 800271c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002720:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800272e:	463b      	mov	r3, r7
 8002730:	4619      	mov	r1, r3
 8002732:	481e      	ldr	r0, [pc, #120]	; (80027ac <MX_ADC1_Init+0x164>)
 8002734:	f001 fe06 	bl	8004344 <HAL_ADCEx_InjectedConfigChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800273e:	f000 fb77 	bl	8002e30 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8002742:	2303      	movs	r3, #3
 8002744:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8002746:	2302      	movs	r3, #2
 8002748:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_480CYCLES;
 800274a:	2307      	movs	r3, #7
 800274c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800274e:	463b      	mov	r3, r7
 8002750:	4619      	mov	r1, r3
 8002752:	4816      	ldr	r0, [pc, #88]	; (80027ac <MX_ADC1_Init+0x164>)
 8002754:	f001 fdf6 	bl	8004344 <HAL_ADCEx_InjectedConfigChannel>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800275e:	f000 fb67 	bl	8002e30 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8002762:	2304      	movs	r3, #4
 8002764:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8002766:	2303      	movs	r3, #3
 8002768:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800276e:	463b      	mov	r3, r7
 8002770:	4619      	mov	r1, r3
 8002772:	480e      	ldr	r0, [pc, #56]	; (80027ac <MX_ADC1_Init+0x164>)
 8002774:	f001 fde6 	bl	8004344 <HAL_ADCEx_InjectedConfigChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 800277e:	f000 fb57 	bl	8002e30 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8002782:	2305      	movs	r3, #5
 8002784:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 8002786:	2304      	movs	r3, #4
 8002788:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800278a:	463b      	mov	r3, r7
 800278c:	4619      	mov	r1, r3
 800278e:	4807      	ldr	r0, [pc, #28]	; (80027ac <MX_ADC1_Init+0x164>)
 8002790:	f001 fdd8 	bl	8004344 <HAL_ADCEx_InjectedConfigChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 800279a:	f000 fb49 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 800279e:	4803      	ldr	r0, [pc, #12]	; (80027ac <MX_ADC1_Init+0x164>)
 80027a0:	f001 fcbc 	bl	800411c <HAL_ADCEx_InjectedStart_IT>
  /* USER CODE END ADC1_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	3730      	adds	r7, #48	; 0x30
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20003610 	.word	0x20003610
 80027b0:	40012000 	.word	0x40012000
 80027b4:	0f000001 	.word	0x0f000001

080027b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b096      	sub	sp, #88	; 0x58
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	615a      	str	r2, [r3, #20]
 80027e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	2220      	movs	r2, #32
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f006 fa23 	bl	8008c3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027f6:	4b50      	ldr	r3, [pc, #320]	; (8002938 <MX_TIM1_Init+0x180>)
 80027f8:	4a50      	ldr	r2, [pc, #320]	; (800293c <MX_TIM1_Init+0x184>)
 80027fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80027fc:	4b4e      	ldr	r3, [pc, #312]	; (8002938 <MX_TIM1_Init+0x180>)
 80027fe:	2201      	movs	r2, #1
 8002800:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002802:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <MX_TIM1_Init+0x180>)
 8002804:	2240      	movs	r2, #64	; 0x40
 8002806:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 12499;
 8002808:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <MX_TIM1_Init+0x180>)
 800280a:	f243 02d3 	movw	r2, #12499	; 0x30d3
 800280e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002810:	4b49      	ldr	r3, [pc, #292]	; (8002938 <MX_TIM1_Init+0x180>)
 8002812:	2200      	movs	r2, #0
 8002814:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8002816:	4b48      	ldr	r3, [pc, #288]	; (8002938 <MX_TIM1_Init+0x180>)
 8002818:	2201      	movs	r2, #1
 800281a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281c:	4b46      	ldr	r3, [pc, #280]	; (8002938 <MX_TIM1_Init+0x180>)
 800281e:	2200      	movs	r2, #0
 8002820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002822:	4845      	ldr	r0, [pc, #276]	; (8002938 <MX_TIM1_Init+0x180>)
 8002824:	f003 fdd2 	bl	80063cc <HAL_TIM_Base_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800282e:	f000 faff 	bl	8002e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002838:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800283c:	4619      	mov	r1, r3
 800283e:	483e      	ldr	r0, [pc, #248]	; (8002938 <MX_TIM1_Init+0x180>)
 8002840:	f004 fb0a 	bl	8006e58 <HAL_TIM_ConfigClockSource>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800284a:	f000 faf1 	bl	8002e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800284e:	483a      	ldr	r0, [pc, #232]	; (8002938 <MX_TIM1_Init+0x180>)
 8002850:	f003 fe0b 	bl	800646a <HAL_TIM_PWM_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800285a:	f000 fae9 	bl	8002e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800285e:	2320      	movs	r3, #32
 8002860:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002866:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800286a:	4619      	mov	r1, r3
 800286c:	4832      	ldr	r0, [pc, #200]	; (8002938 <MX_TIM1_Init+0x180>)
 800286e:	f005 f8f3 	bl	8007a58 <HAL_TIMEx_MasterConfigSynchronization>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002878:	f000 fada 	bl	8002e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800287c:	2360      	movs	r3, #96	; 0x60
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002884:	2300      	movs	r3, #0
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002888:	2300      	movs	r3, #0
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002890:	2300      	movs	r3, #0
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289c:	2200      	movs	r2, #0
 800289e:	4619      	mov	r1, r3
 80028a0:	4825      	ldr	r0, [pc, #148]	; (8002938 <MX_TIM1_Init+0x180>)
 80028a2:	f004 fa1b 	bl	8006cdc <HAL_TIM_PWM_ConfigChannel>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80028ac:	f000 fac0 	bl	8002e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b4:	2204      	movs	r2, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	481f      	ldr	r0, [pc, #124]	; (8002938 <MX_TIM1_Init+0x180>)
 80028ba:	f004 fa0f 	bl	8006cdc <HAL_TIM_PWM_ConfigChannel>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80028c4:	f000 fab4 	bl	8002e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028cc:	2208      	movs	r2, #8
 80028ce:	4619      	mov	r1, r3
 80028d0:	4819      	ldr	r0, [pc, #100]	; (8002938 <MX_TIM1_Init+0x180>)
 80028d2:	f004 fa03 	bl	8006cdc <HAL_TIM_PWM_ConfigChannel>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80028dc:	f000 faa8 	bl	8002e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e4:	220c      	movs	r2, #12
 80028e6:	4619      	mov	r1, r3
 80028e8:	4813      	ldr	r0, [pc, #76]	; (8002938 <MX_TIM1_Init+0x180>)
 80028ea:	f004 f9f7 	bl	8006cdc <HAL_TIM_PWM_ConfigChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80028f4:	f000 fa9c 	bl	8002e30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800290c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002910:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	4619      	mov	r1, r3
 800291a:	4807      	ldr	r0, [pc, #28]	; (8002938 <MX_TIM1_Init+0x180>)
 800291c:	f005 f918 	bl	8007b50 <HAL_TIMEx_ConfigBreakDeadTime>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002926:	f000 fa83 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800292a:	4803      	ldr	r0, [pc, #12]	; (8002938 <MX_TIM1_Init+0x180>)
 800292c:	f000 fbc6 	bl	80030bc <HAL_TIM_MspPostInit>

}
 8002930:	bf00      	nop
 8002932:	3758      	adds	r7, #88	; 0x58
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	200036bc 	.word	0x200036bc
 800293c:	40010000 	.word	0x40010000

08002940 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b090      	sub	sp, #64	; 0x40
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002954:	f107 031c 	add.w	r3, r7, #28
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002964:	f107 030c 	add.w	r3, r7, #12
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800297a:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <MX_TIM2_Init+0x144>)
 800297c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002980:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8002982:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <MX_TIM2_Init+0x144>)
 8002984:	2201      	movs	r2, #1
 8002986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002988:	4b3e      	ldr	r3, [pc, #248]	; (8002a84 <MX_TIM2_Init+0x144>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <MX_TIM2_Init+0x144>)
 8002990:	f04f 32ff 	mov.w	r2, #4294967295
 8002994:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002996:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <MX_TIM2_Init+0x144>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299c:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <MX_TIM2_Init+0x144>)
 800299e:	2200      	movs	r2, #0
 80029a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029a2:	4838      	ldr	r0, [pc, #224]	; (8002a84 <MX_TIM2_Init+0x144>)
 80029a4:	f003 fd12 	bl	80063cc <HAL_TIM_Base_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80029ae:	f000 fa3f 	bl	8002e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029bc:	4619      	mov	r1, r3
 80029be:	4831      	ldr	r0, [pc, #196]	; (8002a84 <MX_TIM2_Init+0x144>)
 80029c0:	f004 fa4a 	bl	8006e58 <HAL_TIM_ConfigClockSource>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80029ca:	f000 fa31 	bl	8002e30 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80029ce:	482d      	ldr	r0, [pc, #180]	; (8002a84 <MX_TIM2_Init+0x144>)
 80029d0:	f003 fe6c 	bl	80066ac <HAL_TIM_IC_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80029da:	f000 fa29 	bl	8002e30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80029de:	2304      	movs	r3, #4
 80029e0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80029e2:	2350      	movs	r3, #80	; 0x50
 80029e4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80029ea:	2300      	movs	r3, #0
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 13;
 80029ee:	230d      	movs	r3, #13
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80029f2:	f107 031c 	add.w	r3, r7, #28
 80029f6:	4619      	mov	r1, r3
 80029f8:	4822      	ldr	r0, [pc, #136]	; (8002a84 <MX_TIM2_Init+0x144>)
 80029fa:	f004 faf1 	bl	8006fe0 <HAL_TIM_SlaveConfigSynchro>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8002a04:	f000 fa14 	bl	8002e30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 13;
 8002a14:	230d      	movs	r3, #13
 8002a16:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4818      	ldr	r0, [pc, #96]	; (8002a84 <MX_TIM2_Init+0x144>)
 8002a22:	f004 f8c7 	bl	8006bb4 <HAL_TIM_IC_ConfigChannel>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002a2c:	f000 fa00 	bl	8002e30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002a30:	2302      	movs	r3, #2
 8002a32:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002a34:	2302      	movs	r3, #2
 8002a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4810      	ldr	r0, [pc, #64]	; (8002a84 <MX_TIM2_Init+0x144>)
 8002a42:	f004 f8b7 	bl	8006bb4 <HAL_TIM_IC_ConfigChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8002a4c:	f000 f9f0 	bl	8002e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a50:	2300      	movs	r3, #0
 8002a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4809      	ldr	r0, [pc, #36]	; (8002a84 <MX_TIM2_Init+0x144>)
 8002a5e:	f004 fffb 	bl	8007a58 <HAL_TIMEx_MasterConfigSynchronization>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8002a68:	f000 f9e2 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_TIM2_Init+0x144>)
 8002a70:	f003 fe76 	bl	8006760 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
 8002a74:	2104      	movs	r1, #4
 8002a76:	4803      	ldr	r0, [pc, #12]	; (8002a84 <MX_TIM2_Init+0x144>)
 8002a78:	f003 fe72 	bl	8006760 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	3740      	adds	r7, #64	; 0x40
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20003704 	.word	0x20003704

08002a88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b090      	sub	sp, #64	; 0x40
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002ac4:	4a3e      	ldr	r2, [pc, #248]	; (8002bc0 <MX_TIM3_Init+0x138>)
 8002ac6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002ac8:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ace:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ad4:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ada:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002adc:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ae8:	4834      	ldr	r0, [pc, #208]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002aea:	f003 fc6f 	bl	80063cc <HAL_TIM_Base_Init>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002af4:	f000 f99c 	bl	8002e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002afe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b02:	4619      	mov	r1, r3
 8002b04:	482d      	ldr	r0, [pc, #180]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002b06:	f004 f9a7 	bl	8006e58 <HAL_TIM_ConfigClockSource>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002b10:	f000 f98e 	bl	8002e30 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002b14:	4829      	ldr	r0, [pc, #164]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002b16:	f003 fdc9 	bl	80066ac <HAL_TIM_IC_Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002b20:	f000 f986 	bl	8002e30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002b24:	2304      	movs	r3, #4
 8002b26:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002b28:	2350      	movs	r3, #80	; 0x50
 8002b2a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002b38:	f107 031c 	add.w	r3, r7, #28
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	481f      	ldr	r0, [pc, #124]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002b40:	f004 fa4e 	bl	8006fe0 <HAL_TIM_SlaveConfigSynchro>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8002b4a:	f000 f971 	bl	8002e30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b52:	2301      	movs	r3, #1
 8002b54:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b5e:	f107 030c 	add.w	r3, r7, #12
 8002b62:	2200      	movs	r2, #0
 8002b64:	4619      	mov	r1, r3
 8002b66:	4815      	ldr	r0, [pc, #84]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002b68:	f004 f824 	bl	8006bb4 <HAL_TIM_IC_ConfigChannel>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002b72:	f000 f95d 	bl	8002e30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002b76:	2302      	movs	r3, #2
 8002b78:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	2204      	movs	r2, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	480d      	ldr	r0, [pc, #52]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002b88:	f004 f814 	bl	8006bb4 <HAL_TIM_IC_ConfigChannel>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8002b92:	f000 f94d 	bl	8002e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4806      	ldr	r0, [pc, #24]	; (8002bbc <MX_TIM3_Init+0x134>)
 8002ba4:	f004 ff58 	bl	8007a58 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8002bae:	f000 f93f 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	3740      	adds	r7, #64	; 0x40
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	200035c8 	.word	0x200035c8
 8002bc0:	40000400 	.word	0x40000400

08002bc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bca:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <MX_USART3_UART_Init+0x50>)
 8002bcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bea:	220c      	movs	r2, #12
 8002bec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bfa:	4805      	ldr	r0, [pc, #20]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bfc:	f005 f80e 	bl	8007c1c <HAL_UART_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c06:	f000 f913 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20003178 	.word	0x20003178
 8002c14:	40004800 	.word	0x40004800

08002c18 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c1c:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002c24:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c26:	2206      	movs	r2, #6
 8002c28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c2a:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c30:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c36:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c38:	2202      	movs	r2, #2
 8002c3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002c54:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c60:	4804      	ldr	r0, [pc, #16]	; (8002c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c62:	f002 fb5e 	bl	8005322 <HAL_PCD_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8002c6c:	f000 f8e0 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	200031bc 	.word	0x200031bc

08002c78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_DMA_Init+0x3c>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a0b      	ldr	r2, [pc, #44]	; (8002cb4 <MX_DMA_Init+0x3c>)
 8002c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <MX_DMA_Init+0x3c>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	2038      	movs	r0, #56	; 0x38
 8002ca0:	f001 fdc5 	bl	800482e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ca4:	2038      	movs	r0, #56	; 0x38
 8002ca6:	f001 fdde 	bl	8004866 <HAL_NVIC_EnableIRQ>

}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800

08002cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	; 0x30
 8002cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbe:	f107 031c 	add.w	r3, r7, #28
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	4b52      	ldr	r3, [pc, #328]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a51      	ldr	r2, [pc, #324]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b4f      	ldr	r3, [pc, #316]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a4a      	ldr	r2, [pc, #296]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b48      	ldr	r3, [pc, #288]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	4b44      	ldr	r3, [pc, #272]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a43      	ldr	r2, [pc, #268]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a3c      	ldr	r2, [pc, #240]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b3a      	ldr	r3, [pc, #232]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a35      	ldr	r2, [pc, #212]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d48:	f043 0310 	orr.w	r3, r3, #16
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a2e      	ldr	r2, [pc, #184]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b25      	ldr	r3, [pc, #148]	; (8002e1c <MX_GPIO_Init+0x164>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002d92:	2200      	movs	r2, #0
 8002d94:	f244 0181 	movw	r1, #16513	; 0x4081
 8002d98:	4821      	ldr	r0, [pc, #132]	; (8002e20 <MX_GPIO_Init+0x168>)
 8002d9a:	f002 fa8f 	bl	80052bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2140      	movs	r1, #64	; 0x40
 8002da2:	4820      	ldr	r0, [pc, #128]	; (8002e24 <MX_GPIO_Init+0x16c>)
 8002da4:	f002 fa8a 	bl	80052bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <MX_GPIO_Init+0x170>)
 8002db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002db6:	f107 031c 	add.w	r3, r7, #28
 8002dba:	4619      	mov	r1, r3
 8002dbc:	481b      	ldr	r0, [pc, #108]	; (8002e2c <MX_GPIO_Init+0x174>)
 8002dbe:	f002 f8e9 	bl	8004f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002dc2:	f244 0381 	movw	r3, #16513	; 0x4081
 8002dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd4:	f107 031c 	add.w	r3, r7, #28
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4811      	ldr	r0, [pc, #68]	; (8002e20 <MX_GPIO_Init+0x168>)
 8002ddc:	f002 f8da 	bl	8004f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002de0:	2340      	movs	r3, #64	; 0x40
 8002de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	2300      	movs	r3, #0
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	4619      	mov	r1, r3
 8002df6:	480b      	ldr	r0, [pc, #44]	; (8002e24 <MX_GPIO_Init+0x16c>)
 8002df8:	f002 f8cc 	bl	8004f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e00:	2300      	movs	r3, #0
 8002e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4805      	ldr	r0, [pc, #20]	; (8002e24 <MX_GPIO_Init+0x16c>)
 8002e10:	f002 f8c0 	bl	8004f94 <HAL_GPIO_Init>

}
 8002e14:	bf00      	nop
 8002e16:	3730      	adds	r7, #48	; 0x30
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020400 	.word	0x40020400
 8002e24:	40021800 	.word	0x40021800
 8002e28:	10110000 	.word	0x10110000
 8002e2c:	40020800 	.word	0x40020800

08002e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e34:	b672      	cpsid	i
}
 8002e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <Error_Handler+0x8>
	...

08002e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_MspInit+0x4c>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	4a0f      	ldr	r2, [pc, #60]	; (8002e88 <HAL_MspInit+0x4c>)
 8002e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e50:	6453      	str	r3, [r2, #68]	; 0x44
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <HAL_MspInit+0x4c>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	603b      	str	r3, [r7, #0]
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_MspInit+0x4c>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <HAL_MspInit+0x4c>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_MspInit+0x4c>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002e7a:	2005      	movs	r0, #5
 8002e7c:	f001 fccc 	bl	8004818 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40023800 	.word	0x40023800

08002e8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a33      	ldr	r2, [pc, #204]	; (8002f78 <HAL_ADC_MspInit+0xec>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d15f      	bne.n	8002f6e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <HAL_ADC_MspInit+0xf0>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	4a31      	ldr	r2, [pc, #196]	; (8002f7c <HAL_ADC_MspInit+0xf0>)
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ebe:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_ADC_MspInit+0xf0>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <HAL_ADC_MspInit+0xf0>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <HAL_ADC_MspInit+0xf0>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <HAL_ADC_MspInit+0xf0>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = AdcDcLink1_Pin_Pin|AdcDcLink2_Pin_Pin|AdcM1Current_Pin_Pin|AdcM2Current_Pin_Pin
 8002ee6:	233f      	movs	r3, #63	; 0x3f
 8002ee8:	617b      	str	r3, [r7, #20]
                          |AdcM3Current_Pin_Pin|AdcM4Current_Pin_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eea:	2303      	movs	r3, #3
 8002eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef2:	f107 0314 	add.w	r3, r7, #20
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4821      	ldr	r0, [pc, #132]	; (8002f80 <HAL_ADC_MspInit+0xf4>)
 8002efa:	f002 f84b 	bl	8004f94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f00:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <HAL_ADC_MspInit+0xfc>)
 8002f02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f42:	4810      	ldr	r0, [pc, #64]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f44:	f001 fcaa 	bl	800489c <HAL_DMA_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002f4e:	f7ff ff6f 	bl	8002e30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f56:	639a      	str	r2, [r3, #56]	; 0x38
 8002f58:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <HAL_ADC_MspInit+0xf8>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	2012      	movs	r0, #18
 8002f64:	f001 fc63 	bl	800482e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002f68:	2012      	movs	r0, #18
 8002f6a:	f001 fc7c 	bl	8004866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f6e:	bf00      	nop
 8002f70:	3728      	adds	r7, #40	; 0x28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40012000 	.word	0x40012000
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40020000 	.word	0x40020000
 8002f84:	2000365c 	.word	0x2000365c
 8002f88:	40026410 	.word	0x40026410

08002f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08c      	sub	sp, #48	; 0x30
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a40      	ldr	r2, [pc, #256]	; (80030ac <HAL_TIM_Base_MspInit+0x120>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a3e      	ldr	r2, [pc, #248]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbe:	4b3c      	ldr	r3, [pc, #240]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002fca:	e06b      	b.n	80030a4 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d135      	bne.n	8003042 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe6:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a2d      	ldr	r2, [pc, #180]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PwmInputM1_Pin_Pin;
 800300e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301c:	2300      	movs	r3, #0
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003020:	2301      	movs	r3, #1
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PwmInputM1_Pin_GPIO_Port, &GPIO_InitStruct);
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	4619      	mov	r1, r3
 800302a:	4822      	ldr	r0, [pc, #136]	; (80030b4 <HAL_TIM_Base_MspInit+0x128>)
 800302c:	f001 ffb2 	bl	8004f94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8003030:	2201      	movs	r2, #1
 8003032:	2100      	movs	r1, #0
 8003034:	201c      	movs	r0, #28
 8003036:	f001 fbfa 	bl	800482e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800303a:	201c      	movs	r0, #28
 800303c:	f001 fc13 	bl	8004866 <HAL_NVIC_EnableIRQ>
}
 8003040:	e030      	b.n	80030a4 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM3)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1c      	ldr	r2, [pc, #112]	; (80030b8 <HAL_TIM_Base_MspInit+0x12c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d12b      	bne.n	80030a4 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 8003056:	f043 0302 	orr.w	r3, r3, #2
 800305a:	6413      	str	r3, [r2, #64]	; 0x40
 800305c:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6313      	str	r3, [r2, #48]	; 0x30
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <HAL_TIM_Base_MspInit+0x124>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PwmInputM2_Pin_Pin;
 8003084:	2340      	movs	r3, #64	; 0x40
 8003086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003090:	2300      	movs	r3, #0
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003094:	2302      	movs	r3, #2
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PwmInputM2_Pin_GPIO_Port, &GPIO_InitStruct);
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	4619      	mov	r1, r3
 800309e:	4805      	ldr	r0, [pc, #20]	; (80030b4 <HAL_TIM_Base_MspInit+0x128>)
 80030a0:	f001 ff78 	bl	8004f94 <HAL_GPIO_Init>
}
 80030a4:	bf00      	nop
 80030a6:	3730      	adds	r7, #48	; 0x30
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40010000 	.word	0x40010000
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020000 	.word	0x40020000
 80030b8:	40000400 	.word	0x40000400

080030bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1a      	ldr	r2, [pc, #104]	; (8003144 <HAL_TIM_MspPostInit+0x88>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d12e      	bne.n	800313c <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_TIM_MspPostInit+0x8c>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a18      	ldr	r2, [pc, #96]	; (8003148 <HAL_TIM_MspPostInit+0x8c>)
 80030e8:	f043 0310 	orr.w	r3, r3, #16
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <HAL_TIM_MspPostInit+0x8c>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PwmOutput1M1_Pin_Pin|PwmOutput2M1_Pin_Pin|PwmOutput1M2_Pin_Pin|PwmOutput2M2_Pin_Pin;
 80030fa:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80030fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800310c:	2301      	movs	r3, #1
 800310e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	4619      	mov	r1, r3
 8003116:	480d      	ldr	r0, [pc, #52]	; (800314c <HAL_TIM_MspPostInit+0x90>)
 8003118:	f001 ff3c 	bl	8004f94 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */
    HAL_TIM_PWM_Start(htim,TIM_CHANNEL_1);
 800311c:	2100      	movs	r1, #0
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f003 f9fc 	bl	800651c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim,TIM_CHANNEL_2);
 8003124:	2104      	movs	r1, #4
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f003 f9f8 	bl	800651c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim,TIM_CHANNEL_3);
 800312c:	2108      	movs	r1, #8
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f003 f9f4 	bl	800651c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim,TIM_CHANNEL_4);
 8003134:	210c      	movs	r1, #12
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f003 f9f0 	bl	800651c <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800313c:	bf00      	nop
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40010000 	.word	0x40010000
 8003148:	40023800 	.word	0x40023800
 800314c:	40021000 	.word	0x40021000

08003150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <HAL_UART_MspInit+0x94>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d134      	bne.n	80031dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_UART_MspInit+0x98>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <HAL_UART_MspInit+0x98>)
 800317c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003180:	6413      	str	r3, [r2, #64]	; 0x40
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_UART_MspInit+0x98>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_UART_MspInit+0x98>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <HAL_UART_MspInit+0x98>)
 8003198:	f043 0308 	orr.w	r3, r3, #8
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_UART_MspInit+0x98>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80031aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b0:	2302      	movs	r3, #2
 80031b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b8:	2303      	movs	r3, #3
 80031ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031bc:	2307      	movs	r3, #7
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	4619      	mov	r1, r3
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <HAL_UART_MspInit+0x9c>)
 80031c8:	f001 fee4 	bl	8004f94 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80031cc:	2200      	movs	r2, #0
 80031ce:	2101      	movs	r1, #1
 80031d0:	2027      	movs	r0, #39	; 0x27
 80031d2:	f001 fb2c 	bl	800482e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031d6:	2027      	movs	r0, #39	; 0x27
 80031d8:	f001 fb45 	bl	8004866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80031dc:	bf00      	nop
 80031de:	3728      	adds	r7, #40	; 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40004800 	.word	0x40004800
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020c00 	.word	0x40020c00

080031f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003210:	d13f      	bne.n	8003292 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	4b21      	ldr	r3, [pc, #132]	; (800329c <HAL_PCD_MspInit+0xac>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a20      	ldr	r2, [pc, #128]	; (800329c <HAL_PCD_MspInit+0xac>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b1e      	ldr	r3, [pc, #120]	; (800329c <HAL_PCD_MspInit+0xac>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800322e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323c:	2303      	movs	r3, #3
 800323e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003240:	230a      	movs	r3, #10
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	4619      	mov	r1, r3
 800324a:	4815      	ldr	r0, [pc, #84]	; (80032a0 <HAL_PCD_MspInit+0xb0>)
 800324c:	f001 fea2 	bl	8004f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800325e:	f107 0314 	add.w	r3, r7, #20
 8003262:	4619      	mov	r1, r3
 8003264:	480e      	ldr	r0, [pc, #56]	; (80032a0 <HAL_PCD_MspInit+0xb0>)
 8003266:	f001 fe95 	bl	8004f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <HAL_PCD_MspInit+0xac>)
 800326c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326e:	4a0b      	ldr	r2, [pc, #44]	; (800329c <HAL_PCD_MspInit+0xac>)
 8003270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003274:	6353      	str	r3, [r2, #52]	; 0x34
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_PCD_MspInit+0xac>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <HAL_PCD_MspInit+0xac>)
 8003280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003284:	6453      	str	r3, [r2, #68]	; 0x44
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_PCD_MspInit+0xac>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003292:	bf00      	nop
 8003294:	3728      	adds	r7, #40	; 0x28
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020000 	.word	0x40020000

080032a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032a8:	e7fe      	b.n	80032a8 <NMI_Handler+0x4>

080032aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ae:	e7fe      	b.n	80032ae <HardFault_Handler+0x4>

080032b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b4:	e7fe      	b.n	80032b4 <MemManage_Handler+0x4>

080032b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032ba:	e7fe      	b.n	80032ba <BusFault_Handler+0x4>

080032bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <UsageFault_Handler+0x4>

080032c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

    HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80032f0:	2180      	movs	r1, #128	; 0x80
 80032f2:	4803      	ldr	r0, [pc, #12]	; (8003300 <SysTick_Handler+0x14>)
 80032f4:	f001 fffb 	bl	80052ee <HAL_GPIO_TogglePin>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f8:	f000 fafc 	bl	80038f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40020400 	.word	0x40020400

08003304 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003304:	b5b0      	push	{r4, r5, r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8003308:	2201      	movs	r2, #1
 800330a:	2101      	movs	r1, #1
 800330c:	48a5      	ldr	r0, [pc, #660]	; (80035a4 <ADC_IRQHandler+0x2a0>)
 800330e:	f001 ffd5 	bl	80052bc <HAL_GPIO_WritePin>

    /*Get the ADC values of current and dc link*/
    AdcValueM1Current = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8003312:	2101      	movs	r1, #1
 8003314:	48a4      	ldr	r0, [pc, #656]	; (80035a8 <ADC_IRQHandler+0x2a4>)
 8003316:	f000 ffd3 	bl	80042c0 <HAL_ADCEx_InjectedGetValue>
 800331a:	4603      	mov	r3, r0
 800331c:	b29a      	uxth	r2, r3
 800331e:	4ba3      	ldr	r3, [pc, #652]	; (80035ac <ADC_IRQHandler+0x2a8>)
 8003320:	801a      	strh	r2, [r3, #0]
    AdcValueDcLink1   = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8003322:	2102      	movs	r1, #2
 8003324:	48a0      	ldr	r0, [pc, #640]	; (80035a8 <ADC_IRQHandler+0x2a4>)
 8003326:	f000 ffcb 	bl	80042c0 <HAL_ADCEx_InjectedGetValue>
 800332a:	4603      	mov	r3, r0
 800332c:	b29a      	uxth	r2, r3
 800332e:	4ba0      	ldr	r3, [pc, #640]	; (80035b0 <ADC_IRQHandler+0x2ac>)
 8003330:	801a      	strh	r2, [r3, #0]
    AdcValueM3Current = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8003332:	2103      	movs	r1, #3
 8003334:	489c      	ldr	r0, [pc, #624]	; (80035a8 <ADC_IRQHandler+0x2a4>)
 8003336:	f000 ffc3 	bl	80042c0 <HAL_ADCEx_InjectedGetValue>
 800333a:	4603      	mov	r3, r0
 800333c:	b29a      	uxth	r2, r3
 800333e:	4b9d      	ldr	r3, [pc, #628]	; (80035b4 <ADC_IRQHandler+0x2b0>)
 8003340:	801a      	strh	r2, [r3, #0]
    AdcValueM4Current = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 8003342:	2104      	movs	r1, #4
 8003344:	4898      	ldr	r0, [pc, #608]	; (80035a8 <ADC_IRQHandler+0x2a4>)
 8003346:	f000 ffbb 	bl	80042c0 <HAL_ADCEx_InjectedGetValue>
 800334a:	4603      	mov	r3, r0
 800334c:	b29a      	uxth	r2, r3
 800334e:	4b9a      	ldr	r3, [pc, #616]	; (80035b8 <ADC_IRQHandler+0x2b4>)
 8003350:	801a      	strh	r2, [r3, #0]
    //AdcValueDcLink1 = ADC_GetSingleConv();

    /*Calculate the motor voltage as a proportion of DC Link*/
    MOTOR_PWM_DTC = (float)PWM_DTC_READ/((float)PWM_PER_READ+1);
 8003352:	4b9a      	ldr	r3, [pc, #616]	; (80035bc <ADC_IRQHandler+0x2b8>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335e:	4b98      	ldr	r3, [pc, #608]	; (80035c0 <ADC_IRQHandler+0x2bc>)
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800336e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003376:	4b93      	ldr	r3, [pc, #588]	; (80035c4 <ADC_IRQHandler+0x2c0>)
 8003378:	edc3 7a00 	vstr	s15, [r3]
    DC_LINK_VOLT = (((float)AdcValueDcLink1*3320.0F)/4095.0F)*3 ; /*adc to mV*/
 800337c:	4b8c      	ldr	r3, [pc, #560]	; (80035b0 <ADC_IRQHandler+0x2ac>)
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	ee07 3a90 	vmov	s15, r3
 8003384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003388:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80035c8 <ADC_IRQHandler+0x2c4>
 800338c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003390:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80035cc <ADC_IRQHandler+0x2c8>
 8003394:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003398:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800339c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033a0:	4b8b      	ldr	r3, [pc, #556]	; (80035d0 <ADC_IRQHandler+0x2cc>)
 80033a2:	edc3 7a00 	vstr	s15, [r3]
    MOTOR_VOLT = DC_LINK_VOLT*MOTOR_PWM_DTC - (DC_LINK_VOLT*0.5);
 80033a6:	4b8a      	ldr	r3, [pc, #552]	; (80035d0 <ADC_IRQHandler+0x2cc>)
 80033a8:	ed93 7a00 	vldr	s14, [r3]
 80033ac:	4b85      	ldr	r3, [pc, #532]	; (80035c4 <ADC_IRQHandler+0x2c0>)
 80033ae:	edd3 7a00 	vldr	s15, [r3]
 80033b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b6:	ee17 0a90 	vmov	r0, s15
 80033ba:	f7fd f891 	bl	80004e0 <__aeabi_f2d>
 80033be:	4604      	mov	r4, r0
 80033c0:	460d      	mov	r5, r1
 80033c2:	4b83      	ldr	r3, [pc, #524]	; (80035d0 <ADC_IRQHandler+0x2cc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd f88a 	bl	80004e0 <__aeabi_f2d>
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	4b80      	ldr	r3, [pc, #512]	; (80035d4 <ADC_IRQHandler+0x2d0>)
 80033d2:	f7fd f8dd 	bl	8000590 <__aeabi_dmul>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4620      	mov	r0, r4
 80033dc:	4629      	mov	r1, r5
 80033de:	f7fc ff1f 	bl	8000220 <__aeabi_dsub>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	f7fd fb03 	bl	80009f4 <__aeabi_d2f>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4a79      	ldr	r2, [pc, #484]	; (80035d8 <ADC_IRQHandler+0x2d4>)
 80033f2:	6013      	str	r3, [r2, #0]

    /*Calculate motor current*/
    M1_CURRENT =  (((float)AdcValueM1Current*3300.0F)/4096.0F) ; /*adc to mV*/
 80033f4:	4b6d      	ldr	r3, [pc, #436]	; (80035ac <ADC_IRQHandler+0x2a8>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	ee07 3a90 	vmov	s15, r3
 80033fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003400:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80035dc <ADC_IRQHandler+0x2d8>
 8003404:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003408:	eddf 6a75 	vldr	s13, [pc, #468]	; 80035e0 <ADC_IRQHandler+0x2dc>
 800340c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003410:	4b74      	ldr	r3, [pc, #464]	; (80035e4 <ADC_IRQHandler+0x2e0>)
 8003412:	edc3 7a00 	vstr	s15, [r3]
    M1_CURRENT /= 0.46F; /*mV to mA*/
 8003416:	4b73      	ldr	r3, [pc, #460]	; (80035e4 <ADC_IRQHandler+0x2e0>)
 8003418:	ed93 7a00 	vldr	s14, [r3]
 800341c:	eddf 6a72 	vldr	s13, [pc, #456]	; 80035e8 <ADC_IRQHandler+0x2e4>
 8003420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003424:	4b6f      	ldr	r3, [pc, #444]	; (80035e4 <ADC_IRQHandler+0x2e0>)
 8003426:	edc3 7a00 	vstr	s15, [r3]

    /*Estimate Speed based on measured  motor voltage and current using motor model */
    MOTOR_EST_SPEED = TessSpeedEstimation(M1_CURRENT,MOTOR_VOLT);
 800342a:	4b6e      	ldr	r3, [pc, #440]	; (80035e4 <ADC_IRQHandler+0x2e0>)
 800342c:	edd3 7a00 	vldr	s15, [r3]
 8003430:	4b69      	ldr	r3, [pc, #420]	; (80035d8 <ADC_IRQHandler+0x2d4>)
 8003432:	ed93 7a00 	vldr	s14, [r3]
 8003436:	eef0 0a47 	vmov.f32	s1, s14
 800343a:	eeb0 0a67 	vmov.f32	s0, s15
 800343e:	f000 f927 	bl	8003690 <TessSpeedEstimation>
 8003442:	eef0 7a40 	vmov.f32	s15, s0
 8003446:	4b69      	ldr	r3, [pc, #420]	; (80035ec <ADC_IRQHandler+0x2e8>)
 8003448:	edc3 7a00 	vstr	s15, [r3]
    WHEEL_EST_SPEED = MOTOR_EST_SPEED/TESS_GEAR_RATIO;
 800344c:	4b67      	ldr	r3, [pc, #412]	; (80035ec <ADC_IRQHandler+0x2e8>)
 800344e:	ed93 7a00 	vldr	s14, [r3]
 8003452:	eddf 6a67 	vldr	s13, [pc, #412]	; 80035f0 <ADC_IRQHandler+0x2ec>
 8003456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800345a:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <ADC_IRQHandler+0x2f0>)
 800345c:	edc3 7a00 	vstr	s15, [r3]
    REQUESTED_MOTOR_VOLTAGE = TessSpeedControler(REQUESTED_SPEED*TESS_GEAR_RATIO,MOTOR_EST_SPEED);
 8003460:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <ADC_IRQHandler+0x2f4>)
 8003462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800346e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80035f0 <ADC_IRQHandler+0x2ec>
 8003472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003476:	4b5d      	ldr	r3, [pc, #372]	; (80035ec <ADC_IRQHandler+0x2e8>)
 8003478:	ed93 7a00 	vldr	s14, [r3]
 800347c:	eef0 0a47 	vmov.f32	s1, s14
 8003480:	eeb0 0a67 	vmov.f32	s0, s15
 8003484:	f000 f95a 	bl	800373c <TessSpeedControler>
 8003488:	eef0 7a40 	vmov.f32	s15, s0
 800348c:	4b5b      	ldr	r3, [pc, #364]	; (80035fc <ADC_IRQHandler+0x2f8>)
 800348e:	edc3 7a00 	vstr	s15, [r3]

    PWM_DTC = 0.5F + (REQUESTED_MOTOR_VOLTAGE/DC_LINK_VOLT);
 8003492:	4b5a      	ldr	r3, [pc, #360]	; (80035fc <ADC_IRQHandler+0x2f8>)
 8003494:	edd3 6a00 	vldr	s13, [r3]
 8003498:	4b4d      	ldr	r3, [pc, #308]	; (80035d0 <ADC_IRQHandler+0x2cc>)
 800349a:	ed93 7a00 	vldr	s14, [r3]
 800349e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034aa:	4b55      	ldr	r3, [pc, #340]	; (8003600 <ADC_IRQHandler+0x2fc>)
 80034ac:	edc3 7a00 	vstr	s15, [r3]
    PWM_DTC = Saturate(PWM_DTC, 0.02F,0.98F);
 80034b0:	4b53      	ldr	r3, [pc, #332]	; (8003600 <ADC_IRQHandler+0x2fc>)
 80034b2:	edd3 7a00 	vldr	s15, [r3]
 80034b6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003604 <ADC_IRQHandler+0x300>
 80034ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c2:	d801      	bhi.n	80034c8 <ADC_IRQHandler+0x1c4>
 80034c4:	4b50      	ldr	r3, [pc, #320]	; (8003608 <ADC_IRQHandler+0x304>)
 80034c6:	e00d      	b.n	80034e4 <ADC_IRQHandler+0x1e0>
 80034c8:	4b4d      	ldr	r3, [pc, #308]	; (8003600 <ADC_IRQHandler+0x2fc>)
 80034ca:	edd3 7a00 	vldr	s15, [r3]
 80034ce:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800360c <ADC_IRQHandler+0x308>
 80034d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034da:	db01      	blt.n	80034e0 <ADC_IRQHandler+0x1dc>
 80034dc:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <ADC_IRQHandler+0x30c>)
 80034de:	e001      	b.n	80034e4 <ADC_IRQHandler+0x1e0>
 80034e0:	4b47      	ldr	r3, [pc, #284]	; (8003600 <ADC_IRQHandler+0x2fc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a46      	ldr	r2, [pc, #280]	; (8003600 <ADC_IRQHandler+0x2fc>)
 80034e6:	6013      	str	r3, [r2, #0]

    TIM1->CCR3 = htim1.Init.Period*0.5;/*((float)PWM_DTC*0.01F)*htim1.Init.Period;*/
 80034e8:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <ADC_IRQHandler+0x310>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fc ffd5 	bl	800049c <__aeabi_ui2d>
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <ADC_IRQHandler+0x2d0>)
 80034f8:	f7fd f84a 	bl	8000590 <__aeabi_dmul>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4c45      	ldr	r4, [pc, #276]	; (8003618 <ADC_IRQHandler+0x314>)
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f7fd fa55 	bl	80009b4 <__aeabi_d2uiz>
 800350a:	4603      	mov	r3, r0
 800350c:	63e3      	str	r3, [r4, #60]	; 0x3c
    TIM1->CCR4 = htim1.Init.Period*0.5;/*htim1.Init.Period - (((float)PWM_DTC*0.01F)*htim1.Init.Period);*/
 800350e:	4b41      	ldr	r3, [pc, #260]	; (8003614 <ADC_IRQHandler+0x310>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fc ffc2 	bl	800049c <__aeabi_ui2d>
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <ADC_IRQHandler+0x2d0>)
 800351e:	f7fd f837 	bl	8000590 <__aeabi_dmul>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4c3c      	ldr	r4, [pc, #240]	; (8003618 <ADC_IRQHandler+0x314>)
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	f7fd fa42 	bl	80009b4 <__aeabi_d2uiz>
 8003530:	4603      	mov	r3, r0
 8003532:	6423      	str	r3, [r4, #64]	; 0x40
    TIM1->CCR1 = PWM_DTC*htim1.Init.Period;
 8003534:	4b37      	ldr	r3, [pc, #220]	; (8003614 <ADC_IRQHandler+0x310>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003540:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <ADC_IRQHandler+0x2fc>)
 8003542:	edd3 7a00 	vldr	s15, [r3]
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354a:	4b33      	ldr	r3, [pc, #204]	; (8003618 <ADC_IRQHandler+0x314>)
 800354c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003550:	ee17 2a90 	vmov	r2, s15
 8003554:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2 = htim1.Init.Period - (PWM_DTC*htim1.Init.Period);
 8003556:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <ADC_IRQHandler+0x310>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	ee07 3a90 	vmov	s15, r3
 800355e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003562:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <ADC_IRQHandler+0x310>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <ADC_IRQHandler+0x2fc>)
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800357c:	4b26      	ldr	r3, [pc, #152]	; (8003618 <ADC_IRQHandler+0x314>)
 800357e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003582:	ee17 2a90 	vmov	r2, s15
 8003586:	639a      	str	r2, [r3, #56]	; 0x38

    MAIN_CLOCK++;
 8003588:	4b24      	ldr	r3, [pc, #144]	; (800361c <ADC_IRQHandler+0x318>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	4a23      	ldr	r2, [pc, #140]	; (800361c <ADC_IRQHandler+0x318>)
 8003590:	6013      	str	r3, [r2, #0]
#if(!FMSTR_DISABLE)
      FMSTR_Poll();
 8003592:	f7fe ff93 	bl	80024bc <FMSTR_Poll>
      FMSTR_Recorder();
 8003596:	f7fe fb9f 	bl	8001cd8 <FMSTR_Recorder>
#endif
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800359a:	4803      	ldr	r0, [pc, #12]	; (80035a8 <ADC_IRQHandler+0x2a4>)
 800359c:	f000 fa31 	bl	8003a02 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80035a0:	bf00      	nop
 80035a2:	bdb0      	pop	{r4, r5, r7, pc}
 80035a4:	40020400 	.word	0x40020400
 80035a8:	20003610 	.word	0x20003610
 80035ac:	20003774 	.word	0x20003774
 80035b0:	20003762 	.word	0x20003762
 80035b4:	20003764 	.word	0x20003764
 80035b8:	20003790 	.word	0x20003790
 80035bc:	2000377c 	.word	0x2000377c
 80035c0:	20003760 	.word	0x20003760
 80035c4:	20003768 	.word	0x20003768
 80035c8:	454f8000 	.word	0x454f8000
 80035cc:	457ff000 	.word	0x457ff000
 80035d0:	2000376c 	.word	0x2000376c
 80035d4:	3fe00000 	.word	0x3fe00000
 80035d8:	20003750 	.word	0x20003750
 80035dc:	454e4000 	.word	0x454e4000
 80035e0:	45800000 	.word	0x45800000
 80035e4:	2000378c 	.word	0x2000378c
 80035e8:	3eeb851f 	.word	0x3eeb851f
 80035ec:	20003784 	.word	0x20003784
 80035f0:	41873333 	.word	0x41873333
 80035f4:	20003780 	.word	0x20003780
 80035f8:	20003754 	.word	0x20003754
 80035fc:	20003758 	.word	0x20003758
 8003600:	2000375c 	.word	0x2000375c
 8003604:	3ca3d70a 	.word	0x3ca3d70a
 8003608:	3ca3d70a 	.word	0x3ca3d70a
 800360c:	3f7ae148 	.word	0x3f7ae148
 8003610:	3f7ae148 	.word	0x3f7ae148
 8003614:	200036bc 	.word	0x200036bc
 8003618:	40010000 	.word	0x40010000
 800361c:	20003778 	.word	0x20003778

08003620 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8003624:	2200      	movs	r2, #0
 8003626:	2101      	movs	r1, #1
 8003628:	4809      	ldr	r0, [pc, #36]	; (8003650 <TIM2_IRQHandler+0x30>)
 800362a:	f001 fe47 	bl	80052bc <HAL_GPIO_WritePin>
    PWM_DTC_READ = TIM2->CCR2;
 800362e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	b29a      	uxth	r2, r3
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <TIM2_IRQHandler+0x34>)
 8003638:	801a      	strh	r2, [r3, #0]
    PWM_PER_READ = TIM2->CCR1;
 800363a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003640:	b29a      	uxth	r2, r3
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <TIM2_IRQHandler+0x38>)
 8003644:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003646:	4805      	ldr	r0, [pc, #20]	; (800365c <TIM2_IRQHandler+0x3c>)
 8003648:	f003 f9ac 	bl	80069a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800364c:	bf00      	nop
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40020400 	.word	0x40020400
 8003654:	2000377c 	.word	0x2000377c
 8003658:	20003760 	.word	0x20003760
 800365c:	20003704 	.word	0x20003704

08003660 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
#if(!FMSTR_DISABLE)
  FMSTR_ProcessSCI();
 8003664:	f7fe fcf4 	bl	8002050 <FMSTR_ProcessSCI>
#endif
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <USART3_IRQHandler+0x14>)
 800366a:	f004 fb25 	bl	8007cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20003178 	.word	0x20003178

08003678 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800367c:	4802      	ldr	r0, [pc, #8]	; (8003688 <DMA2_Stream0_IRQHandler+0x10>)
 800367e:	f001 fa4d 	bl	8004b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	2000365c 	.word	0x2000365c
 800368c:	00000000 	.word	0x00000000

08003690 <TessSpeedEstimation>:

/* USER CODE BEGIN 1 */
float TessSpeedEstimation(float ia_meas, float va_meas)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	ed87 0a01 	vstr	s0, [r7, #4]
 800369a:	edc7 0a00 	vstr	s1, [r7]
    static float ia_k_1;
    float d_ia, est_speed;

    d_ia = ia_meas - ia_k_1;
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <TessSpeedEstimation+0x98>)
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80036a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ac:	edc7 7a03 	vstr	s15, [r7, #12]
    ia_k_1 = ia_meas;
 80036b0:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <TessSpeedEstimation+0x98>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6013      	str	r3, [r2, #0]

    est_speed  = (va_meas - ia_meas*TESS_MOTOR_RESISTANCE - (TESS_MOTOR_INDUCTANCE*d_ia)*TESS_TS)*TESS_mV_TO_V;
 80036b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80036ba:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800372c <TessSpeedEstimation+0x9c>
 80036be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036c2:	ed97 7a00 	vldr	s14, [r7]
 80036c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ce:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003730 <TessSpeedEstimation+0xa0>
 80036d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036d6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003734 <TessSpeedEstimation+0xa4>
 80036da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003738 <TessSpeedEstimation+0xa8>
 80036e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ea:	edc7 7a02 	vstr	s15, [r7, #8]
    est_speed /= TESS_MOTOR_KE;
 80036ee:	68b8      	ldr	r0, [r7, #8]
 80036f0:	f7fc fef6 	bl	80004e0 <__aeabi_f2d>
 80036f4:	a30a      	add	r3, pc, #40	; (adr r3, 8003720 <TessSpeedEstimation+0x90>)
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	f7fd f873 	bl	80007e4 <__aeabi_ddiv>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4610      	mov	r0, r2
 8003704:	4619      	mov	r1, r3
 8003706:	f7fd f975 	bl	80009f4 <__aeabi_d2f>
 800370a:	4603      	mov	r3, r0
 800370c:	60bb      	str	r3, [r7, #8]
    //est_speed /= TESS_MOTOR_POLE;
    //est_speed /= TESS_GEAR_RATIO;

    return est_speed;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	ee07 3a90 	vmov	s15, r3
}
 8003714:	eeb0 0a67 	vmov.f32	s0, s15
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	4765195f 	.word	0x4765195f
 8003724:	3f377cf4 	.word	0x3f377cf4
 8003728:	20003128 	.word	0x20003128
 800372c:	3ff33333 	.word	0x3ff33333
 8003730:	3acc35ce 	.word	0x3acc35ce
 8003734:	3a03126f 	.word	0x3a03126f
 8003738:	3a83126f 	.word	0x3a83126f

0800373c <TessSpeedControler>:

float TessSpeedControler(float RequestedSpeed, float MeasuredSpeed)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	ed87 0a01 	vstr	s0, [r7, #4]
 8003746:	edc7 0a00 	vstr	s1, [r7]
    //float SpeedError;
    float ProportionalPart;
    static float IntegralPart = 0;
    float RequestedMotorVoltage = 0;
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]

    SpeedError = RequestedSpeed - MeasuredSpeed;
 8003750:	ed97 7a01 	vldr	s14, [r7, #4]
 8003754:	edd7 7a00 	vldr	s15, [r7]
 8003758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800375c:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <TessSpeedControler+0x88>)
 800375e:	edc3 7a00 	vstr	s15, [r3]
    ProportionalPart = PGain*SpeedError;
 8003762:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <TessSpeedControler+0x8c>)
 8003764:	ed93 7a00 	vldr	s14, [r3]
 8003768:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <TessSpeedControler+0x88>)
 800376a:	edd3 7a00 	vldr	s15, [r3]
 800376e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003772:	edc7 7a02 	vstr	s15, [r7, #8]
    IntegralPart     = IntegralPart + SpeedError*TESS_TS;
 8003776:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <TessSpeedControler+0x88>)
 8003778:	edd3 7a00 	vldr	s15, [r3]
 800377c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80037cc <TessSpeedControler+0x90>
 8003780:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <TessSpeedControler+0x94>)
 8003786:	edd3 7a00 	vldr	s15, [r3]
 800378a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800378e:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <TessSpeedControler+0x94>)
 8003790:	edc3 7a00 	vstr	s15, [r3]

    RequestedMotorVoltage = ProportionalPart + IntegralPart*IGain;
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <TessSpeedControler+0x94>)
 8003796:	ed93 7a00 	vldr	s14, [r3]
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <TessSpeedControler+0x98>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80037a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ac:	edc7 7a03 	vstr	s15, [r7, #12]


    return RequestedMotorVoltage;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	ee07 3a90 	vmov	s15, r3
}
 80037b6:	eeb0 0a67 	vmov.f32	s0, s15
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	20003788 	.word	0x20003788
 80037c8:	20003658 	.word	0x20003658
 80037cc:	3a03126f 	.word	0x3a03126f
 80037d0:	2000312c 	.word	0x2000312c
 80037d4:	200035c4 	.word	0x200035c4

080037d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <SystemInit+0x20>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <SystemInit+0x20>)
 80037e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80037fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003834 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003800:	480d      	ldr	r0, [pc, #52]	; (8003838 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003802:	490e      	ldr	r1, [pc, #56]	; (800383c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003804:	4a0e      	ldr	r2, [pc, #56]	; (8003840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003808:	e002      	b.n	8003810 <LoopCopyDataInit>

0800380a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800380a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800380c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800380e:	3304      	adds	r3, #4

08003810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003814:	d3f9      	bcc.n	800380a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003816:	4a0b      	ldr	r2, [pc, #44]	; (8003844 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003818:	4c0b      	ldr	r4, [pc, #44]	; (8003848 <LoopFillZerobss+0x26>)
  movs r3, #0
 800381a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800381c:	e001      	b.n	8003822 <LoopFillZerobss>

0800381e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800381e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003820:	3204      	adds	r2, #4

08003822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003824:	d3fb      	bcc.n	800381e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003826:	f7ff ffd7 	bl	80037d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800382a:	f005 f9e3 	bl	8008bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800382e:	f7fe fe4b 	bl	80024c8 <main>
  bx  lr    
 8003832:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003834:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800383c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003840:	08008cb0 	.word	0x08008cb0
  ldr r2, =_sbss
 8003844:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003848:	20003798 	.word	0x20003798

0800384c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800384c:	e7fe      	b.n	800384c <CAN1_RX0_IRQHandler>
	...

08003850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_Init+0x40>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0d      	ldr	r2, [pc, #52]	; (8003890 <HAL_Init+0x40>)
 800385a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800385e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_Init+0x40>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <HAL_Init+0x40>)
 8003866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800386a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800386c:	4b08      	ldr	r3, [pc, #32]	; (8003890 <HAL_Init+0x40>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a07      	ldr	r2, [pc, #28]	; (8003890 <HAL_Init+0x40>)
 8003872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003878:	2003      	movs	r0, #3
 800387a:	f000 ffcd 	bl	8004818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800387e:	2000      	movs	r0, #0
 8003880:	f000 f808 	bl	8003894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003884:	f7ff fada 	bl	8002e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40023c00 	.word	0x40023c00

08003894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <HAL_InitTick+0x54>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b12      	ldr	r3, [pc, #72]	; (80038ec <HAL_InitTick+0x58>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	4619      	mov	r1, r3
 80038a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 ffe5 	bl	8004882 <HAL_SYSTICK_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e00e      	b.n	80038e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b0f      	cmp	r3, #15
 80038c6:	d80a      	bhi.n	80038de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038c8:	2200      	movs	r2, #0
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	f000 ffad 	bl	800482e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038d4:	4a06      	ldr	r2, [pc, #24]	; (80038f0 <HAL_InitTick+0x5c>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000000 	.word	0x20000000
 80038ec:	20000008 	.word	0x20000008
 80038f0:	20000004 	.word	0x20000004

080038f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_IncTick+0x20>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_IncTick+0x24>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4413      	add	r3, r2
 8003904:	4a04      	ldr	r2, [pc, #16]	; (8003918 <HAL_IncTick+0x24>)
 8003906:	6013      	str	r3, [r2, #0]
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000008 	.word	0x20000008
 8003918:	20003794 	.word	0x20003794

0800391c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return uwTick;
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <HAL_GetTick+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20003794 	.word	0x20003794

08003934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7ff ffee 	bl	800391c <HAL_GetTick>
 8003940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d005      	beq.n	800395a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_Delay+0x44>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800395a:	bf00      	nop
 800395c:	f7ff ffde 	bl	800391c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	429a      	cmp	r2, r3
 800396a:	d8f7      	bhi.n	800395c <HAL_Delay+0x28>
  {
  }
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000008 	.word	0x20000008

0800397c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e033      	b.n	80039fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fa76 	bl	8002e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d118      	bne.n	80039ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039c2:	f023 0302 	bic.w	r3, r3, #2
 80039c6:	f043 0202 	orr.w	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 faa8 	bl	8003f24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
 80039ea:	e001      	b.n	80039f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	bf0c      	ite	eq
 8003a36:	2301      	moveq	r3, #1
 8003a38:	2300      	movne	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d049      	beq.n	8003ad8 <HAL_ADC_IRQHandler+0xd6>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d046      	beq.n	8003ad8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d105      	bne.n	8003a62 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d12b      	bne.n	8003ac8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d127      	bne.n	8003ac8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d006      	beq.n	8003a94 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d119      	bne.n	8003ac8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0220 	bic.w	r2, r2, #32
 8003aa2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d105      	bne.n	8003ac8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f8db 	bl	8003c84 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f06f 0212 	mvn.w	r2, #18
 8003ad6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2301      	moveq	r3, #1
 8003ae8:	2300      	movne	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d057      	beq.n	8003bba <HAL_ADC_IRQHandler+0x1b8>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d054      	beq.n	8003bba <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d105      	bne.n	8003b28 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d139      	bne.n	8003baa <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d006      	beq.n	8003b52 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d12b      	bne.n	8003baa <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d124      	bne.n	8003baa <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11d      	bne.n	8003baa <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d119      	bne.n	8003baa <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b84:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d105      	bne.n	8003baa <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fbc0 	bl	8004330 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 020c 	mvn.w	r2, #12
 8003bb8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	bf0c      	ite	eq
 8003bde:	2301      	moveq	r3, #1
 8003be0:	2300      	movne	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d017      	beq.n	8003c1c <HAL_ADC_IRQHandler+0x21a>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d014      	beq.n	8003c1c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d10d      	bne.n	8003c1c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f843 	bl	8003c98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f06f 0201 	mvn.w	r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d015      	beq.n	8003c7c <HAL_ADC_IRQHandler+0x27a>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d012      	beq.n	8003c7c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f043 0202 	orr.w	r2, r3, #2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f06f 0220 	mvn.w	r2, #32
 8003c6a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f81d 	bl	8003cac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f06f 0220 	mvn.w	r2, #32
 8003c7a:	601a      	str	r2, [r3, #0]
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x1c>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e113      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x244>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b09      	cmp	r3, #9
 8003cea:	d925      	bls.n	8003d38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68d9      	ldr	r1, [r3, #12]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4413      	add	r3, r2
 8003d00:	3b1e      	subs	r3, #30
 8003d02:	2207      	movs	r2, #7
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43da      	mvns	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	400a      	ands	r2, r1
 8003d10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68d9      	ldr	r1, [r3, #12]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	4618      	mov	r0, r3
 8003d24:	4603      	mov	r3, r0
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	4403      	add	r3, r0
 8003d2a:	3b1e      	subs	r3, #30
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	e022      	b.n	8003d7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6919      	ldr	r1, [r3, #16]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	4613      	mov	r3, r2
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	2207      	movs	r2, #7
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	400a      	ands	r2, r1
 8003d5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6919      	ldr	r1, [r3, #16]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4403      	add	r3, r0
 8003d74:	409a      	lsls	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d824      	bhi.n	8003dd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	3b05      	subs	r3, #5
 8003d98:	221f      	movs	r2, #31
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43da      	mvns	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	400a      	ands	r2, r1
 8003da6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	4618      	mov	r0, r3
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3b05      	subs	r3, #5
 8003dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8003dce:	e04c      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b0c      	cmp	r3, #12
 8003dd6:	d824      	bhi.n	8003e22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	3b23      	subs	r3, #35	; 0x23
 8003dea:	221f      	movs	r2, #31
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43da      	mvns	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	400a      	ands	r2, r1
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	4618      	mov	r0, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	3b23      	subs	r3, #35	; 0x23
 8003e14:	fa00 f203 	lsl.w	r2, r0, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e20:	e023      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	3b41      	subs	r3, #65	; 0x41
 8003e34:	221f      	movs	r2, #31
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	400a      	ands	r2, r1
 8003e42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4618      	mov	r0, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3b41      	subs	r3, #65	; 0x41
 8003e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e6a:	4b29      	ldr	r3, [pc, #164]	; (8003f10 <HAL_ADC_ConfigChannel+0x250>)
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a28      	ldr	r2, [pc, #160]	; (8003f14 <HAL_ADC_ConfigChannel+0x254>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d10f      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x1d8>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b12      	cmp	r3, #18
 8003e7e:	d10b      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	; (8003f14 <HAL_ADC_ConfigChannel+0x254>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d12b      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x23a>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <HAL_ADC_ConfigChannel+0x258>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <HAL_ADC_ConfigChannel+0x1f4>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b11      	cmp	r3, #17
 8003eb2:	d122      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a11      	ldr	r2, [pc, #68]	; (8003f18 <HAL_ADC_ConfigChannel+0x258>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d111      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ed6:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <HAL_ADC_ConfigChannel+0x25c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a11      	ldr	r2, [pc, #68]	; (8003f20 <HAL_ADC_ConfigChannel+0x260>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	0c9a      	lsrs	r2, r3, #18
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003eec:	e002      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f9      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40012300 	.word	0x40012300
 8003f14:	40012000 	.word	0x40012000
 8003f18:	10000012 	.word	0x10000012
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	431bde83 	.word	0x431bde83

08003f24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f2c:	4b79      	ldr	r3, [pc, #484]	; (8004114 <ADC_Init+0x1f0>)
 8003f2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	431a      	orrs	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	021a      	lsls	r2, r3, #8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6899      	ldr	r1, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	4a58      	ldr	r2, [pc, #352]	; (8004118 <ADC_Init+0x1f4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d022      	beq.n	8004002 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6899      	ldr	r1, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6899      	ldr	r1, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	e00f      	b.n	8004022 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004010:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004020:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0202 	bic.w	r2, r2, #2
 8004030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6899      	ldr	r1, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7e1b      	ldrb	r3, [r3, #24]
 800403c:	005a      	lsls	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01b      	beq.n	8004088 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800405e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800406e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	3b01      	subs	r3, #1
 800407c:	035a      	lsls	r2, r3, #13
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	e007      	b.n	8004098 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004096:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	051a      	lsls	r2, r3, #20
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6899      	ldr	r1, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040da:	025a      	lsls	r2, r3, #9
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6899      	ldr	r1, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	029a      	lsls	r2, r3, #10
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	609a      	str	r2, [r3, #8]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40012300 	.word	0x40012300
 8004118:	0f000001 	.word	0x0f000001

0800411c <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_ADCEx_InjectedStart_IT+0x22>
 800413a:	2302      	movs	r3, #2
 800413c:	e0b2      	b.n	80042a4 <HAL_ADCEx_InjectedStart_IT+0x188>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d018      	beq.n	8004186 <HAL_ADCEx_InjectedStart_IT+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004164:	4b52      	ldr	r3, [pc, #328]	; (80042b0 <HAL_ADCEx_InjectedStart_IT+0x194>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a52      	ldr	r2, [pc, #328]	; (80042b4 <HAL_ADCEx_InjectedStart_IT+0x198>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	0c9a      	lsrs	r2, r3, #18
 8004170:	4613      	mov	r3, r2
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	4413      	add	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004178:	e002      	b.n	8004180 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	3b01      	subs	r3, #1
 800417e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f9      	bne.n	800417a <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b01      	cmp	r3, #1
 8004192:	d17a      	bne.n	800428a <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f06f 0204 	mvn.w	r2, #4
 80041ca:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041da:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041dc:	4b36      	ldr	r3, [pc, #216]	; (80042b8 <HAL_ADCEx_InjectedStart_IT+0x19c>)
 80041de:	60fb      	str	r3, [r7, #12]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d124      	bne.n	8004236 <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf0c      	ite	eq
 80041fa:	2301      	moveq	r3, #1
 80041fc:	2300      	movne	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d041      	beq.n	80042a2 <HAL_ADCEx_InjectedStart_IT+0x186>
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d03e      	beq.n	80042a2 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	e035      	b.n	80042a2 <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004240:	2b00      	cmp	r3, #0
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf0c      	ite	eq
 800425a:	2301      	moveq	r3, #1
 800425c:	2300      	movne	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a15      	ldr	r2, [pc, #84]	; (80042bc <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d11a      	bne.n	80042a2 <HAL_ADCEx_InjectedStart_IT+0x186>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d017      	beq.n	80042a2 <HAL_ADCEx_InjectedStart_IT+0x186>
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d014      	beq.n	80042a2 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	e00b      	b.n	80042a2 <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f043 0210 	orr.w	r2, r3, #16
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f043 0201 	orr.w	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	20000000 	.word	0x20000000
 80042b4:	431bde83 	.word	0x431bde83
 80042b8:	40012300 	.word	0x40012300
 80042bc:	40012000 	.word	0x40012000

080042c0 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f06f 0204 	mvn.w	r2, #4
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	3b01      	subs	r3, #1
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d81f      	bhi.n	8004320 <HAL_ADCEx_InjectedGetValue+0x60>
 80042e0:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <HAL_ADCEx_InjectedGetValue+0x28>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	08004317 	.word	0x08004317
 80042ec:	0800430d 	.word	0x0800430d
 80042f0:	08004303 	.word	0x08004303
 80042f4:	080042f9 	.word	0x080042f9
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fe:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004300:	e00f      	b.n	8004322 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800430a:	e00a      	b.n	8004322 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004314:	e005      	b.n	8004322 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	60fb      	str	r3, [r7, #12]
    }
    break;
 800431e:	e000      	b.n	8004322 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8004320:	bf00      	nop
  }
  return tmp;
 8004322:	68fb      	ldr	r3, [r7, #12]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004358:	2302      	movs	r3, #2
 800435a:	e17e      	b.n	800465a <HAL_ADCEx_InjectedConfigChannel+0x316>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b09      	cmp	r3, #9
 800436a:	d925      	bls.n	80043b8 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68d9      	ldr	r1, [r3, #12]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	3b1e      	subs	r3, #30
 8004382:	2207      	movs	r2, #7
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43da      	mvns	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	400a      	ands	r2, r1
 8004390:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68d9      	ldr	r1, [r3, #12]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	4618      	mov	r0, r3
 80043a4:	4603      	mov	r3, r0
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4403      	add	r3, r0
 80043aa:	3b1e      	subs	r3, #30
 80043ac:	409a      	lsls	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	e022      	b.n	80043fe <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6919      	ldr	r1, [r3, #16]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	2207      	movs	r2, #7
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43da      	mvns	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	400a      	ands	r2, r1
 80043da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6919      	ldr	r1, [r3, #16]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	4618      	mov	r0, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	4403      	add	r3, r0
 80043f4:	409a      	lsls	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	3b01      	subs	r3, #1
 800441a:	051a      	lsls	r2, r3, #20
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	b2da      	uxtb	r2, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	b2db      	uxtb	r3, r3
 800443a:	3303      	adds	r3, #3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	221f      	movs	r2, #31
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43da      	mvns	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	400a      	ands	r2, r1
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	4618      	mov	r0, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	3303      	adds	r3, #3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	fa00 f203 	lsl.w	r2, r0, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	4a75      	ldr	r2, [pc, #468]	; (8004668 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d022      	beq.n	80044dc <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80044a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6899      	ldr	r1, [r3, #8]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80044c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6899      	ldr	r1, [r3, #8]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	e00f      	b.n	80044fc <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80044ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80044fa:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	7d5b      	ldrb	r3, [r3, #21]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004512:	605a      	str	r2, [r3, #4]
 8004514:	e007      	b.n	8004526 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004524:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	7d1b      	ldrb	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	e007      	b.n	8004550 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800454e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d02e      	beq.n	80045b6 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8004558:	2b03      	cmp	r3, #3
 800455a:	d840      	bhi.n	80045de <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800455c:	2b01      	cmp	r3, #1
 800455e:	d002      	beq.n	8004566 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8004560:	2b02      	cmp	r3, #2
 8004562:	d014      	beq.n	800458e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8004564:	e03b      	b.n	80045de <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004574:	f023 030f 	bic.w	r3, r3, #15
 8004578:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6959      	ldr	r1, [r3, #20]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	615a      	str	r2, [r3, #20]
      break;
 800458c:	e03b      	b.n	8004606 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800459c:	f023 030f 	bic.w	r3, r3, #15
 80045a0:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6999      	ldr	r1, [r3, #24]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	619a      	str	r2, [r3, #24]
      break;
 80045b4:	e027      	b.n	8004606 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80045c4:	f023 030f 	bic.w	r3, r3, #15
 80045c8:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69d9      	ldr	r1, [r3, #28]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	61da      	str	r2, [r3, #28]
      break;
 80045dc:	e013      	b.n	8004606 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80045ec:	f023 030f 	bic.w	r3, r3, #15
 80045f0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6a19      	ldr	r1, [r3, #32]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	621a      	str	r2, [r3, #32]
      break;
 8004604:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004606:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004608:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d109      	bne.n	8004628 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b12      	cmp	r3, #18
 800461a:	d105      	bne.n	8004628 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a10      	ldr	r2, [pc, #64]	; (8004670 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10e      	bne.n	8004650 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a0f      	ldr	r2, [pc, #60]	; (8004674 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <HAL_ADCEx_InjectedConfigChannel+0x300>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b11      	cmp	r3, #17
 8004642:	d105      	bne.n	8004650 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	000f0001 	.word	0x000f0001
 800466c:	40012300 	.word	0x40012300
 8004670:	40012000 	.word	0x40012000
 8004674:	10000012 	.word	0x10000012

08004678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <__NVIC_SetPriorityGrouping+0x44>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004694:	4013      	ands	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046aa:	4a04      	ldr	r2, [pc, #16]	; (80046bc <__NVIC_SetPriorityGrouping+0x44>)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	60d3      	str	r3, [r2, #12]
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <__NVIC_GetPriorityGrouping+0x18>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	0a1b      	lsrs	r3, r3, #8
 80046ca:	f003 0307 	and.w	r3, r3, #7
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	e000ed00 	.word	0xe000ed00

080046dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	db0b      	blt.n	8004706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	f003 021f 	and.w	r2, r3, #31
 80046f4:	4907      	ldr	r1, [pc, #28]	; (8004714 <__NVIC_EnableIRQ+0x38>)
 80046f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	2001      	movs	r0, #1
 80046fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	e000e100 	.word	0xe000e100

08004718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	6039      	str	r1, [r7, #0]
 8004722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004728:	2b00      	cmp	r3, #0
 800472a:	db0a      	blt.n	8004742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	b2da      	uxtb	r2, r3
 8004730:	490c      	ldr	r1, [pc, #48]	; (8004764 <__NVIC_SetPriority+0x4c>)
 8004732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004736:	0112      	lsls	r2, r2, #4
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	440b      	add	r3, r1
 800473c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004740:	e00a      	b.n	8004758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	4908      	ldr	r1, [pc, #32]	; (8004768 <__NVIC_SetPriority+0x50>)
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	3b04      	subs	r3, #4
 8004750:	0112      	lsls	r2, r2, #4
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	440b      	add	r3, r1
 8004756:	761a      	strb	r2, [r3, #24]
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	e000e100 	.word	0xe000e100
 8004768:	e000ed00 	.word	0xe000ed00

0800476c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800476c:	b480      	push	{r7}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f1c3 0307 	rsb	r3, r3, #7
 8004786:	2b04      	cmp	r3, #4
 8004788:	bf28      	it	cs
 800478a:	2304      	movcs	r3, #4
 800478c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3304      	adds	r3, #4
 8004792:	2b06      	cmp	r3, #6
 8004794:	d902      	bls.n	800479c <NVIC_EncodePriority+0x30>
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	3b03      	subs	r3, #3
 800479a:	e000      	b.n	800479e <NVIC_EncodePriority+0x32>
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a0:	f04f 32ff 	mov.w	r2, #4294967295
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43da      	mvns	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	401a      	ands	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047b4:	f04f 31ff 	mov.w	r1, #4294967295
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	fa01 f303 	lsl.w	r3, r1, r3
 80047be:	43d9      	mvns	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c4:	4313      	orrs	r3, r2
         );
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3724      	adds	r7, #36	; 0x24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047e4:	d301      	bcc.n	80047ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047e6:	2301      	movs	r3, #1
 80047e8:	e00f      	b.n	800480a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <SysTick_Config+0x40>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047f2:	210f      	movs	r1, #15
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295
 80047f8:	f7ff ff8e 	bl	8004718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <SysTick_Config+0x40>)
 80047fe:	2200      	movs	r2, #0
 8004800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004802:	4b04      	ldr	r3, [pc, #16]	; (8004814 <SysTick_Config+0x40>)
 8004804:	2207      	movs	r2, #7
 8004806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	e000e010 	.word	0xe000e010

08004818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff ff29 	bl	8004678 <__NVIC_SetPriorityGrouping>
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af00      	add	r7, sp, #0
 8004834:	4603      	mov	r3, r0
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004840:	f7ff ff3e 	bl	80046c0 <__NVIC_GetPriorityGrouping>
 8004844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	f7ff ff8e 	bl	800476c <NVIC_EncodePriority>
 8004850:	4602      	mov	r2, r0
 8004852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ff5d 	bl	8004718 <__NVIC_SetPriority>
}
 800485e:	bf00      	nop
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	4603      	mov	r3, r0
 800486e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff ff31 	bl	80046dc <__NVIC_EnableIRQ>
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff ffa2 	bl	80047d4 <SysTick_Config>
 8004890:	4603      	mov	r3, r0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048a8:	f7ff f838 	bl	800391c <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e099      	b.n	80049ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d8:	e00f      	b.n	80048fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048da:	f7ff f81f 	bl	800391c <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d908      	bls.n	80048fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2203      	movs	r2, #3
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e078      	b.n	80049ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e8      	bne.n	80048da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4b38      	ldr	r3, [pc, #224]	; (80049f4 <HAL_DMA_Init+0x158>)
 8004914:	4013      	ands	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004926:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800493e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	2b04      	cmp	r3, #4
 8004952:	d107      	bne.n	8004964 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	4313      	orrs	r3, r2
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0307 	bic.w	r3, r3, #7
 800497a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2b04      	cmp	r3, #4
 800498c:	d117      	bne.n	80049be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fa7b 	bl	8004e9c <DMA_CheckFifoParam>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2240      	movs	r2, #64	; 0x40
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049ba:	2301      	movs	r3, #1
 80049bc:	e016      	b.n	80049ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fa32 	bl	8004e30 <DMA_CalcBaseAndBitshift>
 80049cc:	4603      	mov	r3, r0
 80049ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	223f      	movs	r2, #63	; 0x3f
 80049d6:	409a      	lsls	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	e010803f 	.word	0xe010803f

080049f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a06:	f7fe ff89 	bl	800391c <HAL_GetTick>
 8004a0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d008      	beq.n	8004a2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2280      	movs	r2, #128	; 0x80
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e052      	b.n	8004ad0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0216 	bic.w	r2, r2, #22
 8004a38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d103      	bne.n	8004a5a <HAL_DMA_Abort+0x62>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0208 	bic.w	r2, r2, #8
 8004a68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a7a:	e013      	b.n	8004aa4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a7c:	f7fe ff4e 	bl	800391c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b05      	cmp	r3, #5
 8004a88:	d90c      	bls.n	8004aa4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e015      	b.n	8004ad0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e4      	bne.n	8004a7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab6:	223f      	movs	r2, #63	; 0x3f
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d004      	beq.n	8004af6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2280      	movs	r2, #128	; 0x80
 8004af0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e00c      	b.n	8004b10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2205      	movs	r2, #5
 8004afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b28:	4b92      	ldr	r3, [pc, #584]	; (8004d74 <HAL_DMA_IRQHandler+0x258>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a92      	ldr	r2, [pc, #584]	; (8004d78 <HAL_DMA_IRQHandler+0x25c>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	0a9b      	lsrs	r3, r3, #10
 8004b34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b46:	2208      	movs	r2, #8
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01a      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d013      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0204 	bic.w	r2, r2, #4
 8004b6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	2208      	movs	r2, #8
 8004b76:	409a      	lsls	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b80:	f043 0201 	orr.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d012      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00b      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	2201      	movs	r2, #1
 8004bac:	409a      	lsls	r2, r3
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb6:	f043 0202 	orr.w	r2, r3, #2
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d012      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00b      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be0:	2204      	movs	r2, #4
 8004be2:	409a      	lsls	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	f043 0204 	orr.w	r2, r3, #4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf8:	2210      	movs	r2, #16
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d043      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d03c      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c16:	2210      	movs	r2, #16
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d018      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d108      	bne.n	8004c4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d024      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	4798      	blx	r3
 8004c4a:	e01f      	b.n	8004c8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01b      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	4798      	blx	r3
 8004c5c:	e016      	b.n	8004c8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d107      	bne.n	8004c7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0208 	bic.w	r2, r2, #8
 8004c7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c90:	2220      	movs	r2, #32
 8004c92:	409a      	lsls	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 808e 	beq.w	8004dba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8086 	beq.w	8004dba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	409a      	lsls	r2, r3
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d136      	bne.n	8004d34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0216 	bic.w	r2, r2, #22
 8004cd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ce4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d103      	bne.n	8004cf6 <HAL_DMA_IRQHandler+0x1da>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0208 	bic.w	r2, r2, #8
 8004d04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0a:	223f      	movs	r2, #63	; 0x3f
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d07d      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
        }
        return;
 8004d32:	e078      	b.n	8004e26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01c      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d108      	bne.n	8004d62 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d030      	beq.n	8004dba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
 8004d60:	e02b      	b.n	8004dba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d027      	beq.n	8004dba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	4798      	blx	r3
 8004d72:	e022      	b.n	8004dba <HAL_DMA_IRQHandler+0x29e>
 8004d74:	20000000 	.word	0x20000000
 8004d78:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10f      	bne.n	8004daa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0210 	bic.w	r2, r2, #16
 8004d98:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d032      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d022      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2205      	movs	r2, #5
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0201 	bic.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	3301      	adds	r3, #1
 8004dea:	60bb      	str	r3, [r7, #8]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d307      	bcc.n	8004e02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f2      	bne.n	8004de6 <HAL_DMA_IRQHandler+0x2ca>
 8004e00:	e000      	b.n	8004e04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004e02:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
 8004e24:	e000      	b.n	8004e28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004e26:	bf00      	nop
    }
  }
}
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop

08004e30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	3b10      	subs	r3, #16
 8004e40:	4a14      	ldr	r2, [pc, #80]	; (8004e94 <DMA_CalcBaseAndBitshift+0x64>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e4a:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <DMA_CalcBaseAndBitshift+0x68>)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d909      	bls.n	8004e72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	1d1a      	adds	r2, r3, #4
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	659a      	str	r2, [r3, #88]	; 0x58
 8004e70:	e007      	b.n	8004e82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e7a:	f023 0303 	bic.w	r3, r3, #3
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	aaaaaaab 	.word	0xaaaaaaab
 8004e98:	08008c98 	.word	0x08008c98

08004e9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d11f      	bne.n	8004ef6 <DMA_CheckFifoParam+0x5a>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d856      	bhi.n	8004f6a <DMA_CheckFifoParam+0xce>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <DMA_CheckFifoParam+0x28>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ed5 	.word	0x08004ed5
 8004ec8:	08004ee7 	.word	0x08004ee7
 8004ecc:	08004ed5 	.word	0x08004ed5
 8004ed0:	08004f6b 	.word	0x08004f6b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d046      	beq.n	8004f6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee4:	e043      	b.n	8004f6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eee:	d140      	bne.n	8004f72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef4:	e03d      	b.n	8004f72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efe:	d121      	bne.n	8004f44 <DMA_CheckFifoParam+0xa8>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d837      	bhi.n	8004f76 <DMA_CheckFifoParam+0xda>
 8004f06:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <DMA_CheckFifoParam+0x70>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f1d 	.word	0x08004f1d
 8004f10:	08004f23 	.word	0x08004f23
 8004f14:	08004f1d 	.word	0x08004f1d
 8004f18:	08004f35 	.word	0x08004f35
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f20:	e030      	b.n	8004f84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d025      	beq.n	8004f7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f32:	e022      	b.n	8004f7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f3c:	d11f      	bne.n	8004f7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f42:	e01c      	b.n	8004f7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d903      	bls.n	8004f52 <DMA_CheckFifoParam+0xb6>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d003      	beq.n	8004f58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f50:	e018      	b.n	8004f84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
      break;
 8004f56:	e015      	b.n	8004f84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00e      	beq.n	8004f82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
      break;
 8004f68:	e00b      	b.n	8004f82 <DMA_CheckFifoParam+0xe6>
      break;
 8004f6a:	bf00      	nop
 8004f6c:	e00a      	b.n	8004f84 <DMA_CheckFifoParam+0xe8>
      break;
 8004f6e:	bf00      	nop
 8004f70:	e008      	b.n	8004f84 <DMA_CheckFifoParam+0xe8>
      break;
 8004f72:	bf00      	nop
 8004f74:	e006      	b.n	8004f84 <DMA_CheckFifoParam+0xe8>
      break;
 8004f76:	bf00      	nop
 8004f78:	e004      	b.n	8004f84 <DMA_CheckFifoParam+0xe8>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e002      	b.n	8004f84 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f7e:	bf00      	nop
 8004f80:	e000      	b.n	8004f84 <DMA_CheckFifoParam+0xe8>
      break;
 8004f82:	bf00      	nop
    }
  } 
  
  return status; 
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop

08004f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b089      	sub	sp, #36	; 0x24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	e165      	b.n	800527c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	f040 8154 	bne.w	8005276 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d005      	beq.n	8004fe6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d130      	bne.n	8005048 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4313      	orrs	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800501c:	2201      	movs	r2, #1
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	43db      	mvns	r3, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4013      	ands	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	091b      	lsrs	r3, r3, #4
 8005032:	f003 0201 	and.w	r2, r3, #1
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4313      	orrs	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	2b03      	cmp	r3, #3
 8005052:	d017      	beq.n	8005084 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	2203      	movs	r2, #3
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	43db      	mvns	r3, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4013      	ands	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4313      	orrs	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d123      	bne.n	80050d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	08da      	lsrs	r2, r3, #3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3208      	adds	r2, #8
 8005098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	220f      	movs	r2, #15
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	08da      	lsrs	r2, r3, #3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3208      	adds	r2, #8
 80050d2:	69b9      	ldr	r1, [r7, #24]
 80050d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	2203      	movs	r2, #3
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4013      	ands	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 0203 	and.w	r2, r3, #3
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80ae 	beq.w	8005276 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	4b5d      	ldr	r3, [pc, #372]	; (8005294 <HAL_GPIO_Init+0x300>)
 8005120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005122:	4a5c      	ldr	r2, [pc, #368]	; (8005294 <HAL_GPIO_Init+0x300>)
 8005124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005128:	6453      	str	r3, [r2, #68]	; 0x44
 800512a:	4b5a      	ldr	r3, [pc, #360]	; (8005294 <HAL_GPIO_Init+0x300>)
 800512c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005136:	4a58      	ldr	r2, [pc, #352]	; (8005298 <HAL_GPIO_Init+0x304>)
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	089b      	lsrs	r3, r3, #2
 800513c:	3302      	adds	r3, #2
 800513e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	220f      	movs	r2, #15
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a4f      	ldr	r2, [pc, #316]	; (800529c <HAL_GPIO_Init+0x308>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d025      	beq.n	80051ae <HAL_GPIO_Init+0x21a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a4e      	ldr	r2, [pc, #312]	; (80052a0 <HAL_GPIO_Init+0x30c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01f      	beq.n	80051aa <HAL_GPIO_Init+0x216>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a4d      	ldr	r2, [pc, #308]	; (80052a4 <HAL_GPIO_Init+0x310>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d019      	beq.n	80051a6 <HAL_GPIO_Init+0x212>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a4c      	ldr	r2, [pc, #304]	; (80052a8 <HAL_GPIO_Init+0x314>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <HAL_GPIO_Init+0x20e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a4b      	ldr	r2, [pc, #300]	; (80052ac <HAL_GPIO_Init+0x318>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00d      	beq.n	800519e <HAL_GPIO_Init+0x20a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a4a      	ldr	r2, [pc, #296]	; (80052b0 <HAL_GPIO_Init+0x31c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <HAL_GPIO_Init+0x206>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a49      	ldr	r2, [pc, #292]	; (80052b4 <HAL_GPIO_Init+0x320>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d101      	bne.n	8005196 <HAL_GPIO_Init+0x202>
 8005192:	2306      	movs	r3, #6
 8005194:	e00c      	b.n	80051b0 <HAL_GPIO_Init+0x21c>
 8005196:	2307      	movs	r3, #7
 8005198:	e00a      	b.n	80051b0 <HAL_GPIO_Init+0x21c>
 800519a:	2305      	movs	r3, #5
 800519c:	e008      	b.n	80051b0 <HAL_GPIO_Init+0x21c>
 800519e:	2304      	movs	r3, #4
 80051a0:	e006      	b.n	80051b0 <HAL_GPIO_Init+0x21c>
 80051a2:	2303      	movs	r3, #3
 80051a4:	e004      	b.n	80051b0 <HAL_GPIO_Init+0x21c>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e002      	b.n	80051b0 <HAL_GPIO_Init+0x21c>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <HAL_GPIO_Init+0x21c>
 80051ae:	2300      	movs	r3, #0
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	f002 0203 	and.w	r2, r2, #3
 80051b6:	0092      	lsls	r2, r2, #2
 80051b8:	4093      	lsls	r3, r2
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	4313      	orrs	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051c0:	4935      	ldr	r1, [pc, #212]	; (8005298 <HAL_GPIO_Init+0x304>)
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	089b      	lsrs	r3, r3, #2
 80051c6:	3302      	adds	r3, #2
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051ce:	4b3a      	ldr	r3, [pc, #232]	; (80052b8 <HAL_GPIO_Init+0x324>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	43db      	mvns	r3, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4013      	ands	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051f2:	4a31      	ldr	r2, [pc, #196]	; (80052b8 <HAL_GPIO_Init+0x324>)
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051f8:	4b2f      	ldr	r3, [pc, #188]	; (80052b8 <HAL_GPIO_Init+0x324>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	43db      	mvns	r3, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4013      	ands	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800521c:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <HAL_GPIO_Init+0x324>)
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005222:	4b25      	ldr	r3, [pc, #148]	; (80052b8 <HAL_GPIO_Init+0x324>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	43db      	mvns	r3, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4013      	ands	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005246:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <HAL_GPIO_Init+0x324>)
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800524c:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <HAL_GPIO_Init+0x324>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	43db      	mvns	r3, r3
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	4013      	ands	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005270:	4a11      	ldr	r2, [pc, #68]	; (80052b8 <HAL_GPIO_Init+0x324>)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	3301      	adds	r3, #1
 800527a:	61fb      	str	r3, [r7, #28]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2b0f      	cmp	r3, #15
 8005280:	f67f ae96 	bls.w	8004fb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	3724      	adds	r7, #36	; 0x24
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40023800 	.word	0x40023800
 8005298:	40013800 	.word	0x40013800
 800529c:	40020000 	.word	0x40020000
 80052a0:	40020400 	.word	0x40020400
 80052a4:	40020800 	.word	0x40020800
 80052a8:	40020c00 	.word	0x40020c00
 80052ac:	40021000 	.word	0x40021000
 80052b0:	40021400 	.word	0x40021400
 80052b4:	40021800 	.word	0x40021800
 80052b8:	40013c00 	.word	0x40013c00

080052bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
 80052c8:	4613      	mov	r3, r2
 80052ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052cc:	787b      	ldrb	r3, [r7, #1]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052d2:	887a      	ldrh	r2, [r7, #2]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052d8:	e003      	b.n	80052e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052da:	887b      	ldrh	r3, [r7, #2]
 80052dc:	041a      	lsls	r2, r3, #16
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	619a      	str	r2, [r3, #24]
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	460b      	mov	r3, r1
 80052f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005300:	887a      	ldrh	r2, [r7, #2]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4013      	ands	r3, r2
 8005306:	041a      	lsls	r2, r3, #16
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	43d9      	mvns	r1, r3
 800530c:	887b      	ldrh	r3, [r7, #2]
 800530e:	400b      	ands	r3, r1
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	619a      	str	r2, [r3, #24]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005322:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005324:	b08f      	sub	sp, #60	; 0x3c
 8005326:	af0a      	add	r7, sp, #40	; 0x28
 8005328:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e116      	b.n	8005562 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fd ff4e 	bl	80031f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2203      	movs	r2, #3
 8005358:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f003 f9ef 	bl	8008756 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	687e      	ldr	r6, [r7, #4]
 8005380:	466d      	mov	r5, sp
 8005382:	f106 0410 	add.w	r4, r6, #16
 8005386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800538a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800538c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800538e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005392:	e885 0003 	stmia.w	r5, {r0, r1}
 8005396:	1d33      	adds	r3, r6, #4
 8005398:	cb0e      	ldmia	r3, {r1, r2, r3}
 800539a:	6838      	ldr	r0, [r7, #0]
 800539c:	f003 f97a 	bl	8008694 <USB_CoreInit>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2202      	movs	r2, #2
 80053aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e0d7      	b.n	8005562 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f003 f9dd 	bl	8008778 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]
 80053c2:	e04a      	b.n	800545a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053c4:	7bfa      	ldrb	r2, [r7, #15]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	333d      	adds	r3, #61	; 0x3d
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053d8:	7bfa      	ldrb	r2, [r7, #15]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	333c      	adds	r3, #60	; 0x3c
 80053e8:	7bfa      	ldrb	r2, [r7, #15]
 80053ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80053ec:	7bfa      	ldrb	r2, [r7, #15]
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	b298      	uxth	r0, r3
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	3342      	adds	r3, #66	; 0x42
 8005400:	4602      	mov	r2, r0
 8005402:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005404:	7bfa      	ldrb	r2, [r7, #15]
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	333f      	adds	r3, #63	; 0x3f
 8005414:	2200      	movs	r2, #0
 8005416:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005418:	7bfa      	ldrb	r2, [r7, #15]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	3344      	adds	r3, #68	; 0x44
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800542c:	7bfa      	ldrb	r2, [r7, #15]
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	3348      	adds	r3, #72	; 0x48
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005440:	7bfa      	ldrb	r2, [r7, #15]
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	3350      	adds	r3, #80	; 0x50
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	3301      	adds	r3, #1
 8005458:	73fb      	strb	r3, [r7, #15]
 800545a:	7bfa      	ldrb	r2, [r7, #15]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d3af      	bcc.n	80053c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005464:	2300      	movs	r3, #0
 8005466:	73fb      	strb	r3, [r7, #15]
 8005468:	e044      	b.n	80054f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800546a:	7bfa      	ldrb	r2, [r7, #15]
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005480:	7bfa      	ldrb	r2, [r7, #15]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005492:	7bfa      	ldrb	r2, [r7, #15]
 8005494:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005496:	7bfa      	ldrb	r2, [r7, #15]
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054ac:	7bfa      	ldrb	r2, [r7, #15]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054c2:	7bfa      	ldrb	r2, [r7, #15]
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054d8:	7bfa      	ldrb	r2, [r7, #15]
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	4613      	mov	r3, r2
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	440b      	add	r3, r1
 80054e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	3301      	adds	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
 80054f4:	7bfa      	ldrb	r2, [r7, #15]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d3b5      	bcc.n	800546a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	687e      	ldr	r6, [r7, #4]
 8005506:	466d      	mov	r5, sp
 8005508:	f106 0410 	add.w	r4, r6, #16
 800550c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800550e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005514:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005518:	e885 0003 	stmia.w	r5, {r0, r1}
 800551c:	1d33      	adds	r3, r6, #4
 800551e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005520:	6838      	ldr	r0, [r7, #0]
 8005522:	f003 f953 	bl	80087cc <USB_DevInit>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e014      	b.n	8005562 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	2b01      	cmp	r3, #1
 800554e:	d102      	bne.n	8005556 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f80a 	bl	800556a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f003 faf5 	bl	8008b4a <USB_DevDisconnect>

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800556a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559c:	f043 0303 	orr.w	r3, r3, #3
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0cc      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055c8:	4b68      	ldr	r3, [pc, #416]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d90c      	bls.n	80055f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d6:	4b65      	ldr	r3, [pc, #404]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055de:	4b63      	ldr	r3, [pc, #396]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0b8      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005608:	4b59      	ldr	r3, [pc, #356]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	4a58      	ldr	r2, [pc, #352]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005620:	4b53      	ldr	r3, [pc, #332]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	4a52      	ldr	r2, [pc, #328]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800562a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800562c:	4b50      	ldr	r3, [pc, #320]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	494d      	ldr	r1, [pc, #308]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	4313      	orrs	r3, r2
 800563c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d044      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d107      	bne.n	8005662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005652:	4b47      	ldr	r3, [pc, #284]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d119      	bne.n	8005692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e07f      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d003      	beq.n	8005672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800566e:	2b03      	cmp	r3, #3
 8005670:	d107      	bne.n	8005682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005672:	4b3f      	ldr	r3, [pc, #252]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d109      	bne.n	8005692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e06f      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005682:	4b3b      	ldr	r3, [pc, #236]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e067      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005692:	4b37      	ldr	r3, [pc, #220]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f023 0203 	bic.w	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	4934      	ldr	r1, [pc, #208]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056a4:	f7fe f93a 	bl	800391c <HAL_GetTick>
 80056a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056aa:	e00a      	b.n	80056c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ac:	f7fe f936 	bl	800391c <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e04f      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c2:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 020c 	and.w	r2, r3, #12
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d1eb      	bne.n	80056ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056d4:	4b25      	ldr	r3, [pc, #148]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d20c      	bcs.n	80056fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e2:	4b22      	ldr	r3, [pc, #136]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ea:	4b20      	ldr	r3, [pc, #128]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d001      	beq.n	80056fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e032      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005708:	4b19      	ldr	r3, [pc, #100]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4916      	ldr	r1, [pc, #88]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	4313      	orrs	r3, r2
 8005718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d009      	beq.n	800573a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005726:	4b12      	ldr	r3, [pc, #72]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	490e      	ldr	r1, [pc, #56]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	4313      	orrs	r3, r2
 8005738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800573a:	f000 f821 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 800573e:	4602      	mov	r2, r0
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	091b      	lsrs	r3, r3, #4
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	490a      	ldr	r1, [pc, #40]	; (8005774 <HAL_RCC_ClockConfig+0x1c0>)
 800574c:	5ccb      	ldrb	r3, [r1, r3]
 800574e:	fa22 f303 	lsr.w	r3, r2, r3
 8005752:	4a09      	ldr	r2, [pc, #36]	; (8005778 <HAL_RCC_ClockConfig+0x1c4>)
 8005754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe f89a 	bl	8003894 <HAL_InitTick>

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40023c00 	.word	0x40023c00
 8005770:	40023800 	.word	0x40023800
 8005774:	08008c80 	.word	0x08008c80
 8005778:	20000000 	.word	0x20000000
 800577c:	20000004 	.word	0x20000004

08005780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	607b      	str	r3, [r7, #4]
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	2300      	movs	r3, #0
 8005792:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005798:	4b67      	ldr	r3, [pc, #412]	; (8005938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 030c 	and.w	r3, r3, #12
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d00d      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x40>
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	f200 80bd 	bhi.w	8005924 <HAL_RCC_GetSysClockFreq+0x1a4>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_RCC_GetSysClockFreq+0x34>
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d003      	beq.n	80057ba <HAL_RCC_GetSysClockFreq+0x3a>
 80057b2:	e0b7      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057b4:	4b61      	ldr	r3, [pc, #388]	; (800593c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80057b6:	60bb      	str	r3, [r7, #8]
       break;
 80057b8:	e0b7      	b.n	800592a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057ba:	4b61      	ldr	r3, [pc, #388]	; (8005940 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80057bc:	60bb      	str	r3, [r7, #8]
      break;
 80057be:	e0b4      	b.n	800592a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057c0:	4b5d      	ldr	r3, [pc, #372]	; (8005938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ca:	4b5b      	ldr	r3, [pc, #364]	; (8005938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d04d      	beq.n	8005872 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057d6:	4b58      	ldr	r3, [pc, #352]	; (8005938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	099b      	lsrs	r3, r3, #6
 80057dc:	461a      	mov	r2, r3
 80057de:	f04f 0300 	mov.w	r3, #0
 80057e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057e6:	f04f 0100 	mov.w	r1, #0
 80057ea:	ea02 0800 	and.w	r8, r2, r0
 80057ee:	ea03 0901 	and.w	r9, r3, r1
 80057f2:	4640      	mov	r0, r8
 80057f4:	4649      	mov	r1, r9
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	014b      	lsls	r3, r1, #5
 8005800:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005804:	0142      	lsls	r2, r0, #5
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	ebb0 0008 	subs.w	r0, r0, r8
 800580e:	eb61 0109 	sbc.w	r1, r1, r9
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	018b      	lsls	r3, r1, #6
 800581c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005820:	0182      	lsls	r2, r0, #6
 8005822:	1a12      	subs	r2, r2, r0
 8005824:	eb63 0301 	sbc.w	r3, r3, r1
 8005828:	f04f 0000 	mov.w	r0, #0
 800582c:	f04f 0100 	mov.w	r1, #0
 8005830:	00d9      	lsls	r1, r3, #3
 8005832:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005836:	00d0      	lsls	r0, r2, #3
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	eb12 0208 	adds.w	r2, r2, r8
 8005840:	eb43 0309 	adc.w	r3, r3, r9
 8005844:	f04f 0000 	mov.w	r0, #0
 8005848:	f04f 0100 	mov.w	r1, #0
 800584c:	0259      	lsls	r1, r3, #9
 800584e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005852:	0250      	lsls	r0, r2, #9
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4610      	mov	r0, r2
 800585a:	4619      	mov	r1, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	461a      	mov	r2, r3
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	f7fb f916 	bl	8000a94 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4613      	mov	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e04a      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005872:	4b31      	ldr	r3, [pc, #196]	; (8005938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	099b      	lsrs	r3, r3, #6
 8005878:	461a      	mov	r2, r3
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005882:	f04f 0100 	mov.w	r1, #0
 8005886:	ea02 0400 	and.w	r4, r2, r0
 800588a:	ea03 0501 	and.w	r5, r3, r1
 800588e:	4620      	mov	r0, r4
 8005890:	4629      	mov	r1, r5
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	f04f 0300 	mov.w	r3, #0
 800589a:	014b      	lsls	r3, r1, #5
 800589c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058a0:	0142      	lsls	r2, r0, #5
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	1b00      	subs	r0, r0, r4
 80058a8:	eb61 0105 	sbc.w	r1, r1, r5
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	018b      	lsls	r3, r1, #6
 80058b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058ba:	0182      	lsls	r2, r0, #6
 80058bc:	1a12      	subs	r2, r2, r0
 80058be:	eb63 0301 	sbc.w	r3, r3, r1
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f04f 0100 	mov.w	r1, #0
 80058ca:	00d9      	lsls	r1, r3, #3
 80058cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058d0:	00d0      	lsls	r0, r2, #3
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	1912      	adds	r2, r2, r4
 80058d8:	eb45 0303 	adc.w	r3, r5, r3
 80058dc:	f04f 0000 	mov.w	r0, #0
 80058e0:	f04f 0100 	mov.w	r1, #0
 80058e4:	0299      	lsls	r1, r3, #10
 80058e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80058ea:	0290      	lsls	r0, r2, #10
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4610      	mov	r0, r2
 80058f2:	4619      	mov	r1, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	f7fb f8ca 	bl	8000a94 <__aeabi_uldivmod>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4613      	mov	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	0c1b      	lsrs	r3, r3, #16
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	3301      	adds	r3, #1
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005920:	60bb      	str	r3, [r7, #8]
      break;
 8005922:	e002      	b.n	800592a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005924:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005926:	60bb      	str	r3, [r7, #8]
      break;
 8005928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800592a:	68bb      	ldr	r3, [r7, #8]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005936:	bf00      	nop
 8005938:	40023800 	.word	0x40023800
 800593c:	00f42400 	.word	0x00f42400
 8005940:	007a1200 	.word	0x007a1200

08005944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005948:	4b03      	ldr	r3, [pc, #12]	; (8005958 <HAL_RCC_GetHCLKFreq+0x14>)
 800594a:	681b      	ldr	r3, [r3, #0]
}
 800594c:	4618      	mov	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20000000 	.word	0x20000000

0800595c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005960:	f7ff fff0 	bl	8005944 <HAL_RCC_GetHCLKFreq>
 8005964:	4602      	mov	r2, r0
 8005966:	4b05      	ldr	r3, [pc, #20]	; (800597c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	0a9b      	lsrs	r3, r3, #10
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	4903      	ldr	r1, [pc, #12]	; (8005980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005972:	5ccb      	ldrb	r3, [r1, r3]
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005978:	4618      	mov	r0, r3
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40023800 	.word	0x40023800
 8005980:	08008c90 	.word	0x08008c90

08005984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005988:	f7ff ffdc 	bl	8005944 <HAL_RCC_GetHCLKFreq>
 800598c:	4602      	mov	r2, r0
 800598e:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	0b5b      	lsrs	r3, r3, #13
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	4903      	ldr	r1, [pc, #12]	; (80059a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800599a:	5ccb      	ldrb	r3, [r1, r3]
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40023800 	.word	0x40023800
 80059a8:	08008c90 	.word	0x08008c90

080059ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80059d0:	4b7a      	ldr	r3, [pc, #488]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80059d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	4977      	ldr	r1, [pc, #476]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80059ee:	2301      	movs	r3, #1
 80059f0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d010      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80059fe:	4b6f      	ldr	r3, [pc, #444]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a04:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	496b      	ldr	r1, [pc, #428]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d022      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8005a2c:	4b63      	ldr	r3, [pc, #396]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a3a:	4960      	ldr	r1, [pc, #384]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a56:	d10c      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005a58:	4b58      	ldr	r3, [pc, #352]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a5e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	4954      	ldr	r1, [pc, #336]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d022      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8005a7e:	4b4f      	ldr	r3, [pc, #316]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8c:	494b      	ldr	r1, [pc, #300]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005aa8:	d10c      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005aaa:	4b44      	ldr	r3, [pc, #272]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	493f      	ldr	r1, [pc, #252]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 808a 	beq.w	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	4b39      	ldr	r3, [pc, #228]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	4a38      	ldr	r2, [pc, #224]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ae2:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005aee:	4b34      	ldr	r3, [pc, #208]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a33      	ldr	r2, [pc, #204]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005afa:	f7fd ff0f 	bl	800391c <HAL_GetTick>
 8005afe:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b00:	e008      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b02:	f7fd ff0b 	bl	800391c <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e1d1      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b14:	4b2a      	ldr	r3, [pc, #168]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b20:	4b26      	ldr	r3, [pc, #152]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b28:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d02f      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d028      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b3e:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b46:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b48:	4b1e      	ldr	r3, [pc, #120]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b54:	4a19      	ldr	r2, [pc, #100]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b5a:	4b18      	ldr	r3, [pc, #96]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d114      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b66:	f7fd fed9 	bl	800391c <HAL_GetTick>
 8005b6a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fd fed5 	bl	800391c <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e199      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b84:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0ee      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9c:	d114      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005b9e:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb2:	4902      	ldr	r1, [pc, #8]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	608b      	str	r3, [r1, #8]
 8005bb8:	e00c      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005bba:	bf00      	nop
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	40007000 	.word	0x40007000
 8005bc4:	42470e40 	.word	0x42470e40
 8005bc8:	4b89      	ldr	r3, [pc, #548]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4a88      	ldr	r2, [pc, #544]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005bce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bd2:	6093      	str	r3, [r2, #8]
 8005bd4:	4b86      	ldr	r3, [pc, #536]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be0:	4983      	ldr	r1, [pc, #524]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005bf8:	4b7e      	ldr	r3, [pc, #504]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8005bfa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005c08:	4b79      	ldr	r3, [pc, #484]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	4976      	ldr	r1, [pc, #472]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d011      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c2a:	4b71      	ldr	r3, [pc, #452]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c38:	496d      	ldr	r1, [pc, #436]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c48:	d101      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005c5a:	4b65      	ldr	r3, [pc, #404]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c60:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	4961      	ldr	r1, [pc, #388]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d004      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b80      	cmp	r3, #128	; 0x80
 8005c7c:	f040 80c6 	bne.w	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c80:	4b5d      	ldr	r3, [pc, #372]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c86:	f7fd fe49 	bl	800391c <HAL_GetTick>
 8005c8a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c8e:	f7fd fe45 	bl	800391c <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e10b      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ca0:	4b53      	ldr	r3, [pc, #332]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f0      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005cac:	4a53      	ldr	r2, [pc, #332]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d023      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d019      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d004      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cf0:	d00e      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d019      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d115      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d0e:	d110      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	019b      	lsls	r3, r3, #6
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	061b      	lsls	r3, r3, #24
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	071b      	lsls	r3, r3, #28
 8005d2a:	4931      	ldr	r1, [pc, #196]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d026      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d122      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d5a:	4b25      	ldr	r3, [pc, #148]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d60:	0e1b      	lsrs	r3, r3, #24
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	019b      	lsls	r3, r3, #6
 8005d72:	431a      	orrs	r2, r3
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	061b      	lsls	r3, r3, #24
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	071b      	lsls	r3, r3, #28
 8005d80:	491b      	ldr	r1, [pc, #108]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8005d88:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d8e:	f023 021f 	bic.w	r2, r3, #31
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	4915      	ldr	r1, [pc, #84]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d010      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	019b      	lsls	r3, r3, #6
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	061b      	lsls	r3, r3, #24
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	071b      	lsls	r3, r3, #28
 8005dc6:	490a      	ldr	r1, [pc, #40]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005dce:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dd4:	f7fd fda2 	bl	800391c <HAL_GetTick>
 8005dd8:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dda:	e011      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ddc:	f7fd fd9e 	bl	800391c <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d90a      	bls.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e064      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005dee:	bf00      	nop
 8005df0:	40023800 	.word	0x40023800
 8005df4:	424711e0 	.word	0x424711e0
 8005df8:	42470068 	.word	0x42470068
 8005dfc:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e00:	4b2f      	ldr	r3, [pc, #188]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0e7      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e18:	4b29      	ldr	r3, [pc, #164]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e26:	4926      	ldr	r1, [pc, #152]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005e3a:	4b21      	ldr	r3, [pc, #132]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e40:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	491d      	ldr	r1, [pc, #116]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005e5c:	4b18      	ldr	r3, [pc, #96]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6a:	4915      	ldr	r1, [pc, #84]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005e7e:	4b10      	ldr	r3, [pc, #64]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e84:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	490c      	ldr	r1, [pc, #48]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ea6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	4904      	ldr	r1, [pc, #16]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3720      	adds	r7, #32
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40023800 	.word	0x40023800

08005ec4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e270      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d075      	beq.n	8005fce <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ee2:	4ba3      	ldr	r3, [pc, #652]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d00c      	beq.n	8005f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eee:	4ba0      	ldr	r3, [pc, #640]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d112      	bne.n	8005f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005efa:	4b9d      	ldr	r3, [pc, #628]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f06:	d10b      	bne.n	8005f20 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f08:	4b99      	ldr	r3, [pc, #612]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d05b      	beq.n	8005fcc <HAL_RCC_OscConfig+0x108>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d157      	bne.n	8005fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e24b      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f28:	d106      	bne.n	8005f38 <HAL_RCC_OscConfig+0x74>
 8005f2a:	4b91      	ldr	r3, [pc, #580]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a90      	ldr	r2, [pc, #576]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e01d      	b.n	8005f74 <HAL_RCC_OscConfig+0xb0>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f40:	d10c      	bne.n	8005f5c <HAL_RCC_OscConfig+0x98>
 8005f42:	4b8b      	ldr	r3, [pc, #556]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a8a      	ldr	r2, [pc, #552]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	4b88      	ldr	r3, [pc, #544]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a87      	ldr	r2, [pc, #540]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	e00b      	b.n	8005f74 <HAL_RCC_OscConfig+0xb0>
 8005f5c:	4b84      	ldr	r3, [pc, #528]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a83      	ldr	r2, [pc, #524]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	4b81      	ldr	r3, [pc, #516]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a80      	ldr	r2, [pc, #512]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d013      	beq.n	8005fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fd fcce 	bl	800391c <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f84:	f7fd fcca 	bl	800391c <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b64      	cmp	r3, #100	; 0x64
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e210      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f96:	4b76      	ldr	r3, [pc, #472]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f0      	beq.n	8005f84 <HAL_RCC_OscConfig+0xc0>
 8005fa2:	e014      	b.n	8005fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa4:	f7fd fcba 	bl	800391c <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fac:	f7fd fcb6 	bl	800391c <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b64      	cmp	r3, #100	; 0x64
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e1fc      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fbe:	4b6c      	ldr	r3, [pc, #432]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f0      	bne.n	8005fac <HAL_RCC_OscConfig+0xe8>
 8005fca:	e000      	b.n	8005fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d063      	beq.n	80060a2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005fda:	4b65      	ldr	r3, [pc, #404]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 030c 	and.w	r3, r3, #12
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fe6:	4b62      	ldr	r3, [pc, #392]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d11c      	bne.n	800602c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ff2:	4b5f      	ldr	r3, [pc, #380]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d116      	bne.n	800602c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ffe:	4b5c      	ldr	r3, [pc, #368]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <HAL_RCC_OscConfig+0x152>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d001      	beq.n	8006016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e1d0      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006016:	4b56      	ldr	r3, [pc, #344]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4952      	ldr	r1, [pc, #328]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8006026:	4313      	orrs	r3, r2
 8006028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800602a:	e03a      	b.n	80060a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d020      	beq.n	8006076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006034:	4b4f      	ldr	r3, [pc, #316]	; (8006174 <HAL_RCC_OscConfig+0x2b0>)
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603a:	f7fd fc6f 	bl	800391c <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006042:	f7fd fc6b 	bl	800391c <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e1b1      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006054:	4b46      	ldr	r3, [pc, #280]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0f0      	beq.n	8006042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006060:	4b43      	ldr	r3, [pc, #268]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	4940      	ldr	r1, [pc, #256]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8006070:	4313      	orrs	r3, r2
 8006072:	600b      	str	r3, [r1, #0]
 8006074:	e015      	b.n	80060a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006076:	4b3f      	ldr	r3, [pc, #252]	; (8006174 <HAL_RCC_OscConfig+0x2b0>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607c:	f7fd fc4e 	bl	800391c <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006084:	f7fd fc4a 	bl	800391c <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e190      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006096:	4b36      	ldr	r3, [pc, #216]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1f0      	bne.n	8006084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d030      	beq.n	8006110 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d016      	beq.n	80060e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060b6:	4b30      	ldr	r3, [pc, #192]	; (8006178 <HAL_RCC_OscConfig+0x2b4>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060bc:	f7fd fc2e 	bl	800391c <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060c4:	f7fd fc2a 	bl	800391c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e170      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060d6:	4b26      	ldr	r3, [pc, #152]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 80060d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCC_OscConfig+0x200>
 80060e2:	e015      	b.n	8006110 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060e4:	4b24      	ldr	r3, [pc, #144]	; (8006178 <HAL_RCC_OscConfig+0x2b4>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ea:	f7fd fc17 	bl	800391c <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060f0:	e008      	b.n	8006104 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060f2:	f7fd fc13 	bl	800391c <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e159      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006104:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8006106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f0      	bne.n	80060f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 80a0 	beq.w	800625e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800611e:	2300      	movs	r3, #0
 8006120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006122:	4b13      	ldr	r3, [pc, #76]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10f      	bne.n	800614e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800612e:	2300      	movs	r3, #0
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	4a0e      	ldr	r2, [pc, #56]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8006138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800613c:	6413      	str	r3, [r2, #64]	; 0x40
 800613e:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <HAL_RCC_OscConfig+0x2ac>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006146:	60bb      	str	r3, [r7, #8]
 8006148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800614a:	2301      	movs	r3, #1
 800614c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800614e:	4b0b      	ldr	r3, [pc, #44]	; (800617c <HAL_RCC_OscConfig+0x2b8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d121      	bne.n	800619e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800615a:	4b08      	ldr	r3, [pc, #32]	; (800617c <HAL_RCC_OscConfig+0x2b8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a07      	ldr	r2, [pc, #28]	; (800617c <HAL_RCC_OscConfig+0x2b8>)
 8006160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006166:	f7fd fbd9 	bl	800391c <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800616c:	e011      	b.n	8006192 <HAL_RCC_OscConfig+0x2ce>
 800616e:	bf00      	nop
 8006170:	40023800 	.word	0x40023800
 8006174:	42470000 	.word	0x42470000
 8006178:	42470e80 	.word	0x42470e80
 800617c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006180:	f7fd fbcc 	bl	800391c <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e112      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006192:	4b8b      	ldr	r3, [pc, #556]	; (80063c0 <HAL_RCC_OscConfig+0x4fc>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d106      	bne.n	80061b4 <HAL_RCC_OscConfig+0x2f0>
 80061a6:	4b87      	ldr	r3, [pc, #540]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 80061a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061aa:	4a86      	ldr	r2, [pc, #536]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 80061ac:	f043 0301 	orr.w	r3, r3, #1
 80061b0:	6713      	str	r3, [r2, #112]	; 0x70
 80061b2:	e01c      	b.n	80061ee <HAL_RCC_OscConfig+0x32a>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b05      	cmp	r3, #5
 80061ba:	d10c      	bne.n	80061d6 <HAL_RCC_OscConfig+0x312>
 80061bc:	4b81      	ldr	r3, [pc, #516]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 80061be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c0:	4a80      	ldr	r2, [pc, #512]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 80061c2:	f043 0304 	orr.w	r3, r3, #4
 80061c6:	6713      	str	r3, [r2, #112]	; 0x70
 80061c8:	4b7e      	ldr	r3, [pc, #504]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 80061ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061cc:	4a7d      	ldr	r2, [pc, #500]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	6713      	str	r3, [r2, #112]	; 0x70
 80061d4:	e00b      	b.n	80061ee <HAL_RCC_OscConfig+0x32a>
 80061d6:	4b7b      	ldr	r3, [pc, #492]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	4a7a      	ldr	r2, [pc, #488]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	6713      	str	r3, [r2, #112]	; 0x70
 80061e2:	4b78      	ldr	r3, [pc, #480]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 80061e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e6:	4a77      	ldr	r2, [pc, #476]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 80061e8:	f023 0304 	bic.w	r3, r3, #4
 80061ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d015      	beq.n	8006222 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f6:	f7fd fb91 	bl	800391c <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fc:	e00a      	b.n	8006214 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061fe:	f7fd fb8d 	bl	800391c <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	f241 3288 	movw	r2, #5000	; 0x1388
 800620c:	4293      	cmp	r3, r2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e0d1      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006214:	4b6b      	ldr	r3, [pc, #428]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 8006216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0ee      	beq.n	80061fe <HAL_RCC_OscConfig+0x33a>
 8006220:	e014      	b.n	800624c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006222:	f7fd fb7b 	bl	800391c <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006228:	e00a      	b.n	8006240 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800622a:	f7fd fb77 	bl	800391c <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f241 3288 	movw	r2, #5000	; 0x1388
 8006238:	4293      	cmp	r3, r2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e0bb      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006240:	4b60      	ldr	r3, [pc, #384]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 8006242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1ee      	bne.n	800622a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d105      	bne.n	800625e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006252:	4b5c      	ldr	r3, [pc, #368]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	4a5b      	ldr	r2, [pc, #364]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 8006258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800625c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80a7 	beq.w	80063b6 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006268:	4b56      	ldr	r3, [pc, #344]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f003 030c 	and.w	r3, r3, #12
 8006270:	2b08      	cmp	r3, #8
 8006272:	d060      	beq.n	8006336 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	2b02      	cmp	r3, #2
 800627a:	d145      	bne.n	8006308 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800627c:	4b52      	ldr	r3, [pc, #328]	; (80063c8 <HAL_RCC_OscConfig+0x504>)
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006282:	f7fd fb4b 	bl	800391c <HAL_GetTick>
 8006286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800628a:	f7fd fb47 	bl	800391c <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e08d      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800629c:	4b49      	ldr	r3, [pc, #292]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f0      	bne.n	800628a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	019b      	lsls	r3, r3, #6
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	3b01      	subs	r3, #1
 80062c2:	041b      	lsls	r3, r3, #16
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	061b      	lsls	r3, r3, #24
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	071b      	lsls	r3, r3, #28
 80062d4:	493b      	ldr	r1, [pc, #236]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062da:	4b3b      	ldr	r3, [pc, #236]	; (80063c8 <HAL_RCC_OscConfig+0x504>)
 80062dc:	2201      	movs	r2, #1
 80062de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e0:	f7fd fb1c 	bl	800391c <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062e8:	f7fd fb18 	bl	800391c <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e05e      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062fa:	4b32      	ldr	r3, [pc, #200]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0f0      	beq.n	80062e8 <HAL_RCC_OscConfig+0x424>
 8006306:	e056      	b.n	80063b6 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006308:	4b2f      	ldr	r3, [pc, #188]	; (80063c8 <HAL_RCC_OscConfig+0x504>)
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630e:	f7fd fb05 	bl	800391c <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006314:	e008      	b.n	8006328 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006316:	f7fd fb01 	bl	800391c <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e047      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006328:	4b26      	ldr	r3, [pc, #152]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1f0      	bne.n	8006316 <HAL_RCC_OscConfig+0x452>
 8006334:	e03f      	b.n	80063b6 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e03a      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006342:	4b20      	ldr	r3, [pc, #128]	; (80063c4 <HAL_RCC_OscConfig+0x500>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d030      	beq.n	80063b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800635a:	429a      	cmp	r2, r3
 800635c:	d129      	bne.n	80063b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006368:	429a      	cmp	r2, r3
 800636a:	d122      	bne.n	80063b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006372:	4013      	ands	r3, r2
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006378:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800637a:	4293      	cmp	r3, r2
 800637c:	d119      	bne.n	80063b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	3b01      	subs	r3, #1
 800638c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800638e:	429a      	cmp	r2, r3
 8006390:	d10f      	bne.n	80063b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800639e:	429a      	cmp	r2, r3
 80063a0:	d107      	bne.n	80063b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d001      	beq.n	80063b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40007000 	.word	0x40007000
 80063c4:	40023800 	.word	0x40023800
 80063c8:	42470060 	.word	0x42470060

080063cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e041      	b.n	8006462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fc fdca 	bl	8002f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	4610      	mov	r0, r2
 800640c:	f000 fe5c 	bl	80070c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e041      	b.n	8006500 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f839 	bl	8006508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f000 fe0d 	bl	80070c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d109      	bne.n	8006540 <HAL_TIM_PWM_Start+0x24>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b01      	cmp	r3, #1
 8006536:	bf14      	ite	ne
 8006538:	2301      	movne	r3, #1
 800653a:	2300      	moveq	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	e022      	b.n	8006586 <HAL_TIM_PWM_Start+0x6a>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b04      	cmp	r3, #4
 8006544:	d109      	bne.n	800655a <HAL_TIM_PWM_Start+0x3e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b01      	cmp	r3, #1
 8006550:	bf14      	ite	ne
 8006552:	2301      	movne	r3, #1
 8006554:	2300      	moveq	r3, #0
 8006556:	b2db      	uxtb	r3, r3
 8006558:	e015      	b.n	8006586 <HAL_TIM_PWM_Start+0x6a>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b08      	cmp	r3, #8
 800655e:	d109      	bne.n	8006574 <HAL_TIM_PWM_Start+0x58>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	bf14      	ite	ne
 800656c:	2301      	movne	r3, #1
 800656e:	2300      	moveq	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	e008      	b.n	8006586 <HAL_TIM_PWM_Start+0x6a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	bf14      	ite	ne
 8006580:	2301      	movne	r3, #1
 8006582:	2300      	moveq	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e07c      	b.n	8006688 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <HAL_TIM_PWM_Start+0x82>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800659c:	e013      	b.n	80065c6 <HAL_TIM_PWM_Start+0xaa>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d104      	bne.n	80065ae <HAL_TIM_PWM_Start+0x92>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ac:	e00b      	b.n	80065c6 <HAL_TIM_PWM_Start+0xaa>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d104      	bne.n	80065be <HAL_TIM_PWM_Start+0xa2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065bc:	e003      	b.n	80065c6 <HAL_TIM_PWM_Start+0xaa>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2202      	movs	r2, #2
 80065c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2201      	movs	r2, #1
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f001 fa1c 	bl	8007a0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a2d      	ldr	r2, [pc, #180]	; (8006690 <HAL_TIM_PWM_Start+0x174>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <HAL_TIM_PWM_Start+0xcc>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a2c      	ldr	r2, [pc, #176]	; (8006694 <HAL_TIM_PWM_Start+0x178>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d101      	bne.n	80065ec <HAL_TIM_PWM_Start+0xd0>
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <HAL_TIM_PWM_Start+0xd2>
 80065ec:	2300      	movs	r3, #0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d007      	beq.n	8006602 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a22      	ldr	r2, [pc, #136]	; (8006690 <HAL_TIM_PWM_Start+0x174>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d022      	beq.n	8006652 <HAL_TIM_PWM_Start+0x136>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006614:	d01d      	beq.n	8006652 <HAL_TIM_PWM_Start+0x136>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a1f      	ldr	r2, [pc, #124]	; (8006698 <HAL_TIM_PWM_Start+0x17c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d018      	beq.n	8006652 <HAL_TIM_PWM_Start+0x136>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1d      	ldr	r2, [pc, #116]	; (800669c <HAL_TIM_PWM_Start+0x180>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_TIM_PWM_Start+0x136>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1c      	ldr	r2, [pc, #112]	; (80066a0 <HAL_TIM_PWM_Start+0x184>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00e      	beq.n	8006652 <HAL_TIM_PWM_Start+0x136>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a16      	ldr	r2, [pc, #88]	; (8006694 <HAL_TIM_PWM_Start+0x178>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d009      	beq.n	8006652 <HAL_TIM_PWM_Start+0x136>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a18      	ldr	r2, [pc, #96]	; (80066a4 <HAL_TIM_PWM_Start+0x188>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_TIM_PWM_Start+0x136>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a16      	ldr	r2, [pc, #88]	; (80066a8 <HAL_TIM_PWM_Start+0x18c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d111      	bne.n	8006676 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b06      	cmp	r3, #6
 8006662:	d010      	beq.n	8006686 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006674:	e007      	b.n	8006686 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f042 0201 	orr.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40010000 	.word	0x40010000
 8006694:	40010400 	.word	0x40010400
 8006698:	40000400 	.word	0x40000400
 800669c:	40000800 	.word	0x40000800
 80066a0:	40000c00 	.word	0x40000c00
 80066a4:	40014000 	.word	0x40014000
 80066a8:	40001800 	.word	0x40001800

080066ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e041      	b.n	8006742 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f839 	bl	800674a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f000 fcec 	bl	80070c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <HAL_TIM_IC_Start_IT+0x1a>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006776:	b2db      	uxtb	r3, r3
 8006778:	e013      	b.n	80067a2 <HAL_TIM_IC_Start_IT+0x42>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b04      	cmp	r3, #4
 800677e:	d104      	bne.n	800678a <HAL_TIM_IC_Start_IT+0x2a>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006786:	b2db      	uxtb	r3, r3
 8006788:	e00b      	b.n	80067a2 <HAL_TIM_IC_Start_IT+0x42>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b08      	cmp	r3, #8
 800678e:	d104      	bne.n	800679a <HAL_TIM_IC_Start_IT+0x3a>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006796:	b2db      	uxtb	r3, r3
 8006798:	e003      	b.n	80067a2 <HAL_TIM_IC_Start_IT+0x42>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d104      	bne.n	80067b4 <HAL_TIM_IC_Start_IT+0x54>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	e013      	b.n	80067dc <HAL_TIM_IC_Start_IT+0x7c>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d104      	bne.n	80067c4 <HAL_TIM_IC_Start_IT+0x64>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	e00b      	b.n	80067dc <HAL_TIM_IC_Start_IT+0x7c>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d104      	bne.n	80067d4 <HAL_TIM_IC_Start_IT+0x74>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	e003      	b.n	80067dc <HAL_TIM_IC_Start_IT+0x7c>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d102      	bne.n	80067ea <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d001      	beq.n	80067ee <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e0c7      	b.n	800697e <HAL_TIM_IC_Start_IT+0x21e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d104      	bne.n	80067fe <HAL_TIM_IC_Start_IT+0x9e>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067fc:	e013      	b.n	8006826 <HAL_TIM_IC_Start_IT+0xc6>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b04      	cmp	r3, #4
 8006802:	d104      	bne.n	800680e <HAL_TIM_IC_Start_IT+0xae>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800680c:	e00b      	b.n	8006826 <HAL_TIM_IC_Start_IT+0xc6>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b08      	cmp	r3, #8
 8006812:	d104      	bne.n	800681e <HAL_TIM_IC_Start_IT+0xbe>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800681c:	e003      	b.n	8006826 <HAL_TIM_IC_Start_IT+0xc6>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <HAL_TIM_IC_Start_IT+0xd6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006834:	e013      	b.n	800685e <HAL_TIM_IC_Start_IT+0xfe>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b04      	cmp	r3, #4
 800683a:	d104      	bne.n	8006846 <HAL_TIM_IC_Start_IT+0xe6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006844:	e00b      	b.n	800685e <HAL_TIM_IC_Start_IT+0xfe>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b08      	cmp	r3, #8
 800684a:	d104      	bne.n	8006856 <HAL_TIM_IC_Start_IT+0xf6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006854:	e003      	b.n	800685e <HAL_TIM_IC_Start_IT+0xfe>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b0c      	cmp	r3, #12
 8006862:	d841      	bhi.n	80068e8 <HAL_TIM_IC_Start_IT+0x188>
 8006864:	a201      	add	r2, pc, #4	; (adr r2, 800686c <HAL_TIM_IC_Start_IT+0x10c>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	080068a1 	.word	0x080068a1
 8006870:	080068e9 	.word	0x080068e9
 8006874:	080068e9 	.word	0x080068e9
 8006878:	080068e9 	.word	0x080068e9
 800687c:	080068b3 	.word	0x080068b3
 8006880:	080068e9 	.word	0x080068e9
 8006884:	080068e9 	.word	0x080068e9
 8006888:	080068e9 	.word	0x080068e9
 800688c:	080068c5 	.word	0x080068c5
 8006890:	080068e9 	.word	0x080068e9
 8006894:	080068e9 	.word	0x080068e9
 8006898:	080068e9 	.word	0x080068e9
 800689c:	080068d7 	.word	0x080068d7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0202 	orr.w	r2, r2, #2
 80068ae:	60da      	str	r2, [r3, #12]
      break;
 80068b0:	e01b      	b.n	80068ea <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0204 	orr.w	r2, r2, #4
 80068c0:	60da      	str	r2, [r3, #12]
      break;
 80068c2:	e012      	b.n	80068ea <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0208 	orr.w	r2, r2, #8
 80068d2:	60da      	str	r2, [r3, #12]
      break;
 80068d4:	e009      	b.n	80068ea <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f042 0210 	orr.w	r2, r2, #16
 80068e4:	60da      	str	r2, [r3, #12]
      break;
 80068e6:	e000      	b.n	80068ea <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80068e8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2201      	movs	r2, #1
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f001 f88a 	bl	8007a0c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a22      	ldr	r2, [pc, #136]	; (8006988 <HAL_TIM_IC_Start_IT+0x228>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d022      	beq.n	8006948 <HAL_TIM_IC_Start_IT+0x1e8>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690a:	d01d      	beq.n	8006948 <HAL_TIM_IC_Start_IT+0x1e8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a1e      	ldr	r2, [pc, #120]	; (800698c <HAL_TIM_IC_Start_IT+0x22c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d018      	beq.n	8006948 <HAL_TIM_IC_Start_IT+0x1e8>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a1d      	ldr	r2, [pc, #116]	; (8006990 <HAL_TIM_IC_Start_IT+0x230>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d013      	beq.n	8006948 <HAL_TIM_IC_Start_IT+0x1e8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1b      	ldr	r2, [pc, #108]	; (8006994 <HAL_TIM_IC_Start_IT+0x234>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00e      	beq.n	8006948 <HAL_TIM_IC_Start_IT+0x1e8>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1a      	ldr	r2, [pc, #104]	; (8006998 <HAL_TIM_IC_Start_IT+0x238>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d009      	beq.n	8006948 <HAL_TIM_IC_Start_IT+0x1e8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a18      	ldr	r2, [pc, #96]	; (800699c <HAL_TIM_IC_Start_IT+0x23c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d004      	beq.n	8006948 <HAL_TIM_IC_Start_IT+0x1e8>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a17      	ldr	r2, [pc, #92]	; (80069a0 <HAL_TIM_IC_Start_IT+0x240>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d111      	bne.n	800696c <HAL_TIM_IC_Start_IT+0x20c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b06      	cmp	r3, #6
 8006958:	d010      	beq.n	800697c <HAL_TIM_IC_Start_IT+0x21c>
    {
      __HAL_TIM_ENABLE(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0201 	orr.w	r2, r2, #1
 8006968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696a:	e007      	b.n	800697c <HAL_TIM_IC_Start_IT+0x21c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40010000 	.word	0x40010000
 800698c:	40000400 	.word	0x40000400
 8006990:	40000800 	.word	0x40000800
 8006994:	40000c00 	.word	0x40000c00
 8006998:	40010400 	.word	0x40010400
 800699c:	40014000 	.word	0x40014000
 80069a0:	40001800 	.word	0x40001800

080069a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d122      	bne.n	8006a00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d11b      	bne.n	8006a00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0202 	mvn.w	r2, #2
 80069d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fb50 	bl	800708c <HAL_TIM_IC_CaptureCallback>
 80069ec:	e005      	b.n	80069fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fb42 	bl	8007078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fb53 	bl	80070a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d122      	bne.n	8006a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d11b      	bne.n	8006a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0204 	mvn.w	r2, #4
 8006a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fb26 	bl	800708c <HAL_TIM_IC_CaptureCallback>
 8006a40:	e005      	b.n	8006a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fb18 	bl	8007078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fb29 	bl	80070a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b08      	cmp	r3, #8
 8006a60:	d122      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d11b      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0208 	mvn.w	r2, #8
 8006a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2204      	movs	r2, #4
 8006a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fafc 	bl	800708c <HAL_TIM_IC_CaptureCallback>
 8006a94:	e005      	b.n	8006aa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 faee 	bl	8007078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 faff 	bl	80070a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0310 	and.w	r3, r3, #16
 8006ab2:	2b10      	cmp	r3, #16
 8006ab4:	d122      	bne.n	8006afc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f003 0310 	and.w	r3, r3, #16
 8006ac0:	2b10      	cmp	r3, #16
 8006ac2:	d11b      	bne.n	8006afc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f06f 0210 	mvn.w	r2, #16
 8006acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fad2 	bl	800708c <HAL_TIM_IC_CaptureCallback>
 8006ae8:	e005      	b.n	8006af6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fac4 	bl	8007078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fad5 	bl	80070a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d10e      	bne.n	8006b28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d107      	bne.n	8006b28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0201 	mvn.w	r2, #1
 8006b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa9e 	bl	8007064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b32:	2b80      	cmp	r3, #128	; 0x80
 8006b34:	d10e      	bne.n	8006b54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b40:	2b80      	cmp	r3, #128	; 0x80
 8006b42:	d107      	bne.n	8006b54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 f85a 	bl	8007c08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	d10e      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d107      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fa9a 	bl	80070b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d10e      	bne.n	8006bac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d107      	bne.n	8006bac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0220 	mvn.w	r2, #32
 8006ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 f824 	bl	8007bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bac:	bf00      	nop
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_TIM_IC_ConfigChannel+0x1a>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e082      	b.n	8006cd4 <HAL_TIM_IC_ConfigChannel+0x120>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d11b      	bne.n	8006c14 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	6819      	ldr	r1, [r3, #0]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f000 fd4a 	bl	8007684 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 020c 	bic.w	r2, r2, #12
 8006bfe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6999      	ldr	r1, [r3, #24]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	619a      	str	r2, [r3, #24]
 8006c12:	e05a      	b.n	8006cca <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d11c      	bne.n	8006c54 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6819      	ldr	r1, [r3, #0]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f000 fdce 	bl	80077ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	699a      	ldr	r2, [r3, #24]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c3c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6999      	ldr	r1, [r3, #24]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	021a      	lsls	r2, r3, #8
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	619a      	str	r2, [r3, #24]
 8006c52:	e03a      	b.n	8006cca <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b08      	cmp	r3, #8
 8006c58:	d11b      	bne.n	8006c92 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6819      	ldr	r1, [r3, #0]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f000 fe1b 	bl	80078a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 020c 	bic.w	r2, r2, #12
 8006c7c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69d9      	ldr	r1, [r3, #28]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	61da      	str	r2, [r3, #28]
 8006c90:	e01b      	b.n	8006cca <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6818      	ldr	r0, [r3, #0]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6819      	ldr	r1, [r3, #0]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f000 fe3b 	bl	800791c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69da      	ldr	r2, [r3, #28]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006cb4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69d9      	ldr	r1, [r3, #28]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	021a      	lsls	r2, r3, #8
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d101      	bne.n	8006cf6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	e0ac      	b.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b0c      	cmp	r3, #12
 8006d02:	f200 809f 	bhi.w	8006e44 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006d06:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d41 	.word	0x08006d41
 8006d10:	08006e45 	.word	0x08006e45
 8006d14:	08006e45 	.word	0x08006e45
 8006d18:	08006e45 	.word	0x08006e45
 8006d1c:	08006d81 	.word	0x08006d81
 8006d20:	08006e45 	.word	0x08006e45
 8006d24:	08006e45 	.word	0x08006e45
 8006d28:	08006e45 	.word	0x08006e45
 8006d2c:	08006dc3 	.word	0x08006dc3
 8006d30:	08006e45 	.word	0x08006e45
 8006d34:	08006e45 	.word	0x08006e45
 8006d38:	08006e45 	.word	0x08006e45
 8006d3c:	08006e03 	.word	0x08006e03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fa5e 	bl	8007208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0208 	orr.w	r2, r2, #8
 8006d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0204 	bic.w	r2, r2, #4
 8006d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6999      	ldr	r1, [r3, #24]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	619a      	str	r2, [r3, #24]
      break;
 8006d7e:	e062      	b.n	8006e46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 faae 	bl	80072e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6999      	ldr	r1, [r3, #24]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	021a      	lsls	r2, r3, #8
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	619a      	str	r2, [r3, #24]
      break;
 8006dc0:	e041      	b.n	8006e46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fb03 	bl	80073d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69da      	ldr	r2, [r3, #28]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 0208 	orr.w	r2, r2, #8
 8006ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69da      	ldr	r2, [r3, #28]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0204 	bic.w	r2, r2, #4
 8006dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69d9      	ldr	r1, [r3, #28]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	61da      	str	r2, [r3, #28]
      break;
 8006e00:	e021      	b.n	8006e46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fb57 	bl	80074bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69da      	ldr	r2, [r3, #28]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69d9      	ldr	r1, [r3, #28]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	021a      	lsls	r2, r3, #8
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	61da      	str	r2, [r3, #28]
      break;
 8006e42:	e000      	b.n	8006e46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006e44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIM_ConfigClockSource+0x18>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e0b3      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x180>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea8:	d03e      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0xd0>
 8006eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eae:	f200 8087 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb6:	f000 8085 	beq.w	8006fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ebe:	d87f      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ec0:	2b70      	cmp	r3, #112	; 0x70
 8006ec2:	d01a      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0xa2>
 8006ec4:	2b70      	cmp	r3, #112	; 0x70
 8006ec6:	d87b      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ec8:	2b60      	cmp	r3, #96	; 0x60
 8006eca:	d050      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0x116>
 8006ecc:	2b60      	cmp	r3, #96	; 0x60
 8006ece:	d877      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ed0:	2b50      	cmp	r3, #80	; 0x50
 8006ed2:	d03c      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0xf6>
 8006ed4:	2b50      	cmp	r3, #80	; 0x50
 8006ed6:	d873      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ed8:	2b40      	cmp	r3, #64	; 0x40
 8006eda:	d058      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x136>
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d86f      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ee0:	2b30      	cmp	r3, #48	; 0x30
 8006ee2:	d064      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x156>
 8006ee4:	2b30      	cmp	r3, #48	; 0x30
 8006ee6:	d86b      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d060      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x156>
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	d867      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d05c      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x156>
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d05a      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ef8:	e062      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6899      	ldr	r1, [r3, #8]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f000 fd5f 	bl	80079cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	609a      	str	r2, [r3, #8]
      break;
 8006f26:	e04e      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	6899      	ldr	r1, [r3, #8]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f000 fd48 	bl	80079cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f4a:	609a      	str	r2, [r3, #8]
      break;
 8006f4c:	e03b      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6859      	ldr	r1, [r3, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f000 fc06 	bl	800776c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2150      	movs	r1, #80	; 0x50
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 fd15 	bl	8007996 <TIM_ITRx_SetConfig>
      break;
 8006f6c:	e02b      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6859      	ldr	r1, [r3, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f000 fc62 	bl	8007844 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2160      	movs	r1, #96	; 0x60
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fd05 	bl	8007996 <TIM_ITRx_SetConfig>
      break;
 8006f8c:	e01b      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6859      	ldr	r1, [r3, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f000 fbe6 	bl	800776c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2140      	movs	r1, #64	; 0x40
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fcf5 	bl	8007996 <TIM_ITRx_SetConfig>
      break;
 8006fac:	e00b      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f000 fcec 	bl	8007996 <TIM_ITRx_SetConfig>
        break;
 8006fbe:	e002      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006fc0:	bf00      	nop
 8006fc2:	e000      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006fc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d101      	bne.n	8006ff8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e031      	b.n	800705c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 faac 	bl	8007568 <TIM_SlaveTimer_SetConfig>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d009      	beq.n	800702a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e018      	b.n	800705c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007038:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007048:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a40      	ldr	r2, [pc, #256]	; (80071dc <TIM_Base_SetConfig+0x114>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d013      	beq.n	8007108 <TIM_Base_SetConfig+0x40>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e6:	d00f      	beq.n	8007108 <TIM_Base_SetConfig+0x40>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a3d      	ldr	r2, [pc, #244]	; (80071e0 <TIM_Base_SetConfig+0x118>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d00b      	beq.n	8007108 <TIM_Base_SetConfig+0x40>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a3c      	ldr	r2, [pc, #240]	; (80071e4 <TIM_Base_SetConfig+0x11c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d007      	beq.n	8007108 <TIM_Base_SetConfig+0x40>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a3b      	ldr	r2, [pc, #236]	; (80071e8 <TIM_Base_SetConfig+0x120>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d003      	beq.n	8007108 <TIM_Base_SetConfig+0x40>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a3a      	ldr	r2, [pc, #232]	; (80071ec <TIM_Base_SetConfig+0x124>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d108      	bne.n	800711a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a2f      	ldr	r2, [pc, #188]	; (80071dc <TIM_Base_SetConfig+0x114>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d02b      	beq.n	800717a <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007128:	d027      	beq.n	800717a <TIM_Base_SetConfig+0xb2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a2c      	ldr	r2, [pc, #176]	; (80071e0 <TIM_Base_SetConfig+0x118>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d023      	beq.n	800717a <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a2b      	ldr	r2, [pc, #172]	; (80071e4 <TIM_Base_SetConfig+0x11c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d01f      	beq.n	800717a <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a2a      	ldr	r2, [pc, #168]	; (80071e8 <TIM_Base_SetConfig+0x120>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d01b      	beq.n	800717a <TIM_Base_SetConfig+0xb2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a29      	ldr	r2, [pc, #164]	; (80071ec <TIM_Base_SetConfig+0x124>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d017      	beq.n	800717a <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a28      	ldr	r2, [pc, #160]	; (80071f0 <TIM_Base_SetConfig+0x128>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d013      	beq.n	800717a <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a27      	ldr	r2, [pc, #156]	; (80071f4 <TIM_Base_SetConfig+0x12c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00f      	beq.n	800717a <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a26      	ldr	r2, [pc, #152]	; (80071f8 <TIM_Base_SetConfig+0x130>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00b      	beq.n	800717a <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a25      	ldr	r2, [pc, #148]	; (80071fc <TIM_Base_SetConfig+0x134>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d007      	beq.n	800717a <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a24      	ldr	r2, [pc, #144]	; (8007200 <TIM_Base_SetConfig+0x138>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d003      	beq.n	800717a <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a23      	ldr	r2, [pc, #140]	; (8007204 <TIM_Base_SetConfig+0x13c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d108      	bne.n	800718c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a0a      	ldr	r2, [pc, #40]	; (80071dc <TIM_Base_SetConfig+0x114>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_Base_SetConfig+0xf8>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a0c      	ldr	r2, [pc, #48]	; (80071ec <TIM_Base_SetConfig+0x124>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d103      	bne.n	80071c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	615a      	str	r2, [r3, #20]
}
 80071ce:	bf00      	nop
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40010000 	.word	0x40010000
 80071e0:	40000400 	.word	0x40000400
 80071e4:	40000800 	.word	0x40000800
 80071e8:	40000c00 	.word	0x40000c00
 80071ec:	40010400 	.word	0x40010400
 80071f0:	40014000 	.word	0x40014000
 80071f4:	40014400 	.word	0x40014400
 80071f8:	40014800 	.word	0x40014800
 80071fc:	40001800 	.word	0x40001800
 8007200:	40001c00 	.word	0x40001c00
 8007204:	40002000 	.word	0x40002000

08007208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f023 0201 	bic.w	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0303 	bic.w	r3, r3, #3
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f023 0302 	bic.w	r3, r3, #2
 8007250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a20      	ldr	r2, [pc, #128]	; (80072e0 <TIM_OC1_SetConfig+0xd8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d003      	beq.n	800726c <TIM_OC1_SetConfig+0x64>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a1f      	ldr	r2, [pc, #124]	; (80072e4 <TIM_OC1_SetConfig+0xdc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d10c      	bne.n	8007286 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f023 0308 	bic.w	r3, r3, #8
 8007272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	4313      	orrs	r3, r2
 800727c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f023 0304 	bic.w	r3, r3, #4
 8007284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <TIM_OC1_SetConfig+0xd8>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d003      	beq.n	8007296 <TIM_OC1_SetConfig+0x8e>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a14      	ldr	r2, [pc, #80]	; (80072e4 <TIM_OC1_SetConfig+0xdc>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d111      	bne.n	80072ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800729c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	621a      	str	r2, [r3, #32]
}
 80072d4:	bf00      	nop
 80072d6:	371c      	adds	r7, #28
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40010400 	.word	0x40010400

080072e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	f023 0210 	bic.w	r2, r3, #16
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800731e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	021b      	lsls	r3, r3, #8
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4313      	orrs	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f023 0320 	bic.w	r3, r3, #32
 8007332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	011b      	lsls	r3, r3, #4
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a22      	ldr	r2, [pc, #136]	; (80073cc <TIM_OC2_SetConfig+0xe4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d003      	beq.n	8007350 <TIM_OC2_SetConfig+0x68>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a21      	ldr	r2, [pc, #132]	; (80073d0 <TIM_OC2_SetConfig+0xe8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d10d      	bne.n	800736c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	4313      	orrs	r3, r2
 8007362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800736a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a17      	ldr	r2, [pc, #92]	; (80073cc <TIM_OC2_SetConfig+0xe4>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d003      	beq.n	800737c <TIM_OC2_SetConfig+0x94>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a16      	ldr	r2, [pc, #88]	; (80073d0 <TIM_OC2_SetConfig+0xe8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d113      	bne.n	80073a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800738a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	4313      	orrs	r3, r2
 8007396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	621a      	str	r2, [r3, #32]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	40010000 	.word	0x40010000
 80073d0:	40010400 	.word	0x40010400

080073d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0303 	bic.w	r3, r3, #3
 800740a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800741c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a21      	ldr	r2, [pc, #132]	; (80074b4 <TIM_OC3_SetConfig+0xe0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d003      	beq.n	800743a <TIM_OC3_SetConfig+0x66>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a20      	ldr	r2, [pc, #128]	; (80074b8 <TIM_OC3_SetConfig+0xe4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d10d      	bne.n	8007456 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	021b      	lsls	r3, r3, #8
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a16      	ldr	r2, [pc, #88]	; (80074b4 <TIM_OC3_SetConfig+0xe0>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d003      	beq.n	8007466 <TIM_OC3_SetConfig+0x92>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <TIM_OC3_SetConfig+0xe4>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d113      	bne.n	800748e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800746c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	4313      	orrs	r3, r2
 800748c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	621a      	str	r2, [r3, #32]
}
 80074a8:	bf00      	nop
 80074aa:	371c      	adds	r7, #28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	40010000 	.word	0x40010000
 80074b8:	40010400 	.word	0x40010400

080074bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	021b      	lsls	r3, r3, #8
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	031b      	lsls	r3, r3, #12
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	4313      	orrs	r3, r2
 8007512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a12      	ldr	r2, [pc, #72]	; (8007560 <TIM_OC4_SetConfig+0xa4>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d003      	beq.n	8007524 <TIM_OC4_SetConfig+0x68>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a11      	ldr	r2, [pc, #68]	; (8007564 <TIM_OC4_SetConfig+0xa8>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d109      	bne.n	8007538 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800752a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	019b      	lsls	r3, r3, #6
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	621a      	str	r2, [r3, #32]
}
 8007552:	bf00      	nop
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	40010000 	.word	0x40010000
 8007564:	40010400 	.word	0x40010400

08007568 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007580:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	4313      	orrs	r3, r2
 800758a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f023 0307 	bic.w	r3, r3, #7
 8007592:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2b70      	cmp	r3, #112	; 0x70
 80075ac:	d01a      	beq.n	80075e4 <TIM_SlaveTimer_SetConfig+0x7c>
 80075ae:	2b70      	cmp	r3, #112	; 0x70
 80075b0:	d860      	bhi.n	8007674 <TIM_SlaveTimer_SetConfig+0x10c>
 80075b2:	2b60      	cmp	r3, #96	; 0x60
 80075b4:	d054      	beq.n	8007660 <TIM_SlaveTimer_SetConfig+0xf8>
 80075b6:	2b60      	cmp	r3, #96	; 0x60
 80075b8:	d85c      	bhi.n	8007674 <TIM_SlaveTimer_SetConfig+0x10c>
 80075ba:	2b50      	cmp	r3, #80	; 0x50
 80075bc:	d046      	beq.n	800764c <TIM_SlaveTimer_SetConfig+0xe4>
 80075be:	2b50      	cmp	r3, #80	; 0x50
 80075c0:	d858      	bhi.n	8007674 <TIM_SlaveTimer_SetConfig+0x10c>
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d019      	beq.n	80075fa <TIM_SlaveTimer_SetConfig+0x92>
 80075c6:	2b40      	cmp	r3, #64	; 0x40
 80075c8:	d854      	bhi.n	8007674 <TIM_SlaveTimer_SetConfig+0x10c>
 80075ca:	2b30      	cmp	r3, #48	; 0x30
 80075cc:	d054      	beq.n	8007678 <TIM_SlaveTimer_SetConfig+0x110>
 80075ce:	2b30      	cmp	r3, #48	; 0x30
 80075d0:	d850      	bhi.n	8007674 <TIM_SlaveTimer_SetConfig+0x10c>
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d050      	beq.n	8007678 <TIM_SlaveTimer_SetConfig+0x110>
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	d84c      	bhi.n	8007674 <TIM_SlaveTimer_SetConfig+0x10c>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d04c      	beq.n	8007678 <TIM_SlaveTimer_SetConfig+0x110>
 80075de:	2b10      	cmp	r3, #16
 80075e0:	d04a      	beq.n	8007678 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80075e2:	e047      	b.n	8007674 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6818      	ldr	r0, [r3, #0]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	68d9      	ldr	r1, [r3, #12]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f000 f9ea 	bl	80079cc <TIM_ETR_SetConfig>
      break;
 80075f8:	e03f      	b.n	800767a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b05      	cmp	r3, #5
 8007600:	d101      	bne.n	8007606 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e03a      	b.n	800767c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6a1b      	ldr	r3, [r3, #32]
 800760c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6a1a      	ldr	r2, [r3, #32]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0201 	bic.w	r2, r2, #1
 800761c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800762c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	621a      	str	r2, [r3, #32]
      break;
 800764a:	e016      	b.n	800767a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6818      	ldr	r0, [r3, #0]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	6899      	ldr	r1, [r3, #8]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	461a      	mov	r2, r3
 800765a:	f000 f887 	bl	800776c <TIM_TI1_ConfigInputStage>
      break;
 800765e:	e00c      	b.n	800767a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	6899      	ldr	r1, [r3, #8]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	461a      	mov	r2, r3
 800766e:	f000 f8e9 	bl	8007844 <TIM_TI2_ConfigInputStage>
      break;
 8007672:	e002      	b.n	800767a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8007674:	bf00      	nop
 8007676:	e000      	b.n	800767a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8007678:	bf00      	nop
  }
  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	f023 0201 	bic.w	r2, r3, #1
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4a28      	ldr	r2, [pc, #160]	; (8007750 <TIM_TI1_SetConfig+0xcc>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d01b      	beq.n	80076ea <TIM_TI1_SetConfig+0x66>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b8:	d017      	beq.n	80076ea <TIM_TI1_SetConfig+0x66>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4a25      	ldr	r2, [pc, #148]	; (8007754 <TIM_TI1_SetConfig+0xd0>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d013      	beq.n	80076ea <TIM_TI1_SetConfig+0x66>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4a24      	ldr	r2, [pc, #144]	; (8007758 <TIM_TI1_SetConfig+0xd4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00f      	beq.n	80076ea <TIM_TI1_SetConfig+0x66>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4a23      	ldr	r2, [pc, #140]	; (800775c <TIM_TI1_SetConfig+0xd8>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00b      	beq.n	80076ea <TIM_TI1_SetConfig+0x66>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4a22      	ldr	r2, [pc, #136]	; (8007760 <TIM_TI1_SetConfig+0xdc>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d007      	beq.n	80076ea <TIM_TI1_SetConfig+0x66>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4a21      	ldr	r2, [pc, #132]	; (8007764 <TIM_TI1_SetConfig+0xe0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d003      	beq.n	80076ea <TIM_TI1_SetConfig+0x66>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4a20      	ldr	r2, [pc, #128]	; (8007768 <TIM_TI1_SetConfig+0xe4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d101      	bne.n	80076ee <TIM_TI1_SetConfig+0x6a>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <TIM_TI1_SetConfig+0x6c>
 80076ee:	2300      	movs	r3, #0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d008      	beq.n	8007706 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f023 0303 	bic.w	r3, r3, #3
 80076fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	e003      	b.n	800770e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f043 0301 	orr.w	r3, r3, #1
 800770c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007714:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	b2db      	uxtb	r3, r3
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f023 030a 	bic.w	r3, r3, #10
 8007728:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f003 030a 	and.w	r3, r3, #10
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	621a      	str	r2, [r3, #32]
}
 8007742:	bf00      	nop
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	40010000 	.word	0x40010000
 8007754:	40000400 	.word	0x40000400
 8007758:	40000800 	.word	0x40000800
 800775c:	40000c00 	.word	0x40000c00
 8007760:	40010400 	.word	0x40010400
 8007764:	40014000 	.word	0x40014000
 8007768:	40001800 	.word	0x40001800

0800776c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	f023 0201 	bic.w	r2, r3, #1
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f023 030a 	bic.w	r3, r3, #10
 80077a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	621a      	str	r2, [r3, #32]
}
 80077be:	bf00      	nop
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b087      	sub	sp, #28
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	f023 0210 	bic.w	r2, r3, #16
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	021b      	lsls	r3, r3, #8
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	4313      	orrs	r3, r2
 8007800:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007808:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	031b      	lsls	r3, r3, #12
 800780e:	b29b      	uxth	r3, r3
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800781c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	621a      	str	r2, [r3, #32]
}
 8007838:	bf00      	nop
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	f023 0210 	bic.w	r2, r3, #16
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800786e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	031b      	lsls	r3, r3, #12
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007880:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	4313      	orrs	r3, r2
 800788a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	621a      	str	r2, [r3, #32]
}
 8007898:	bf00      	nop
 800789a:	371c      	adds	r7, #28
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f023 0303 	bic.w	r3, r3, #3
 80078d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	011b      	lsls	r3, r3, #4
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80078f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	621a      	str	r2, [r3, #32]
}
 8007910:	bf00      	nop
 8007912:	371c      	adds	r7, #28
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007948:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	4313      	orrs	r3, r2
 8007952:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800795a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	031b      	lsls	r3, r3, #12
 8007960:	b29b      	uxth	r3, r3
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800796e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	031b      	lsls	r3, r3, #12
 8007974:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	4313      	orrs	r3, r2
 800797c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	621a      	str	r2, [r3, #32]
}
 800798a:	bf00      	nop
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f043 0307 	orr.w	r3, r3, #7
 80079b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	609a      	str	r2, [r3, #8]
}
 80079c0:	bf00      	nop
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	021a      	lsls	r2, r3, #8
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	431a      	orrs	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	609a      	str	r2, [r3, #8]
}
 8007a00:	bf00      	nop
 8007a02:	371c      	adds	r7, #28
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f003 031f 	and.w	r3, r3, #31
 8007a1e:	2201      	movs	r2, #1
 8007a20:	fa02 f303 	lsl.w	r3, r2, r3
 8007a24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a1a      	ldr	r2, [r3, #32]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	43db      	mvns	r3, r3
 8007a2e:	401a      	ands	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a1a      	ldr	r2, [r3, #32]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	fa01 f303 	lsl.w	r3, r1, r3
 8007a44:	431a      	orrs	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	621a      	str	r2, [r3, #32]
}
 8007a4a:	bf00      	nop
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
	...

08007a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e05a      	b.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a21      	ldr	r2, [pc, #132]	; (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d022      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007abc:	d01d      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a1d      	ldr	r2, [pc, #116]	; (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d018      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a1b      	ldr	r2, [pc, #108]	; (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d013      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a1a      	ldr	r2, [pc, #104]	; (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d00e      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a18      	ldr	r2, [pc, #96]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d009      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a17      	ldr	r2, [pc, #92]	; (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d004      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a15      	ldr	r2, [pc, #84]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d10c      	bne.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	40010000 	.word	0x40010000
 8007b38:	40000400 	.word	0x40000400
 8007b3c:	40000800 	.word	0x40000800
 8007b40:	40000c00 	.word	0x40000c00
 8007b44:	40010400 	.word	0x40010400
 8007b48:	40014000 	.word	0x40014000
 8007b4c:	40001800 	.word	0x40001800

08007b50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d101      	bne.n	8007b6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e03d      	b.n	8007be8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e03f      	b.n	8007cae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7fb fa84 	bl	8003150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2224      	movs	r2, #36	; 0x24
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fb3f 	bl	80082e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	695a      	ldr	r2, [r3, #20]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68da      	ldr	r2, [r3, #12]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08a      	sub	sp, #40	; 0x28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	f003 030f 	and.w	r3, r3, #15
 8007ce6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10d      	bne.n	8007d0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	f003 0320 	and.w	r3, r3, #32
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d008      	beq.n	8007d0a <HAL_UART_IRQHandler+0x52>
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa57 	bl	80081b6 <UART_Receive_IT>
      return;
 8007d08:	e17c      	b.n	8008004 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 80b1 	beq.w	8007e74 <HAL_UART_IRQHandler+0x1bc>
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d105      	bne.n	8007d28 <HAL_UART_IRQHandler+0x70>
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80a6 	beq.w	8007e74 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <HAL_UART_IRQHandler+0x90>
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	f043 0201 	orr.w	r2, r3, #1
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <HAL_UART_IRQHandler+0xb0>
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	f043 0202 	orr.w	r2, r3, #2
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <HAL_UART_IRQHandler+0xd0>
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d80:	f043 0204 	orr.w	r2, r3, #4
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	f003 0308 	and.w	r3, r3, #8
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00f      	beq.n	8007db2 <HAL_UART_IRQHandler+0xfa>
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	f003 0320 	and.w	r3, r3, #32
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <HAL_UART_IRQHandler+0xee>
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	f043 0208 	orr.w	r2, r3, #8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 811f 	beq.w	8007ffa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	f003 0320 	and.w	r3, r3, #32
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d007      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x11e>
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f9f0 	bl	80081b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de0:	2b40      	cmp	r3, #64	; 0x40
 8007de2:	bf0c      	ite	eq
 8007de4:	2301      	moveq	r3, #1
 8007de6:	2300      	movne	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <HAL_UART_IRQHandler+0x146>
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d031      	beq.n	8007e62 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f930 	bl	8008064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b40      	cmp	r3, #64	; 0x40
 8007e10:	d123      	bne.n	8007e5a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695a      	ldr	r2, [r3, #20]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e20:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d013      	beq.n	8007e52 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2e:	4a77      	ldr	r2, [pc, #476]	; (800800c <HAL_UART_IRQHandler+0x354>)
 8007e30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fc fe4e 	bl	8004ad8 <HAL_DMA_Abort_IT>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d016      	beq.n	8007e70 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e50:	e00e      	b.n	8007e70 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f8f0 	bl	8008038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e58:	e00a      	b.n	8007e70 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f8ec 	bl	8008038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e60:	e006      	b.n	8007e70 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f8e8 	bl	8008038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007e6e:	e0c4      	b.n	8007ffa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e70:	bf00      	nop
    return;
 8007e72:	e0c2      	b.n	8007ffa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	f040 80a2 	bne.w	8007fc2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	f003 0310 	and.w	r3, r3, #16
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 809c 	beq.w	8007fc2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 8096 	beq.w	8007fc2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb6:	2b40      	cmp	r3, #64	; 0x40
 8007eb8:	d14f      	bne.n	8007f5a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007ec4:	8a3b      	ldrh	r3, [r7, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 8099 	beq.w	8007ffe <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ed0:	8a3a      	ldrh	r2, [r7, #16]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	f080 8093 	bcs.w	8007ffe <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8a3a      	ldrh	r2, [r7, #16]
 8007edc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee8:	d02b      	beq.n	8007f42 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ef8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	695a      	ldr	r2, [r3, #20]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0201 	bic.w	r2, r2, #1
 8007f08:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695a      	ldr	r2, [r3, #20]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f18:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0210 	bic.w	r2, r2, #16
 8007f36:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fc fd5b 	bl	80049f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f87a 	bl	800804c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007f58:	e051      	b.n	8007ffe <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d047      	beq.n	8008002 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007f72:	8a7b      	ldrh	r3, [r7, #18]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d044      	beq.n	8008002 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f86:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	695a      	ldr	r2, [r3, #20]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0201 	bic.w	r2, r2, #1
 8007f96:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0210 	bic.w	r2, r2, #16
 8007fb4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fb6:	8a7b      	ldrh	r3, [r7, #18]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f846 	bl	800804c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007fc0:	e01f      	b.n	8008002 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d008      	beq.n	8007fde <HAL_UART_IRQHandler+0x326>
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f885 	bl	80080e6 <UART_Transmit_IT>
    return;
 8007fdc:	e012      	b.n	8008004 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00d      	beq.n	8008004 <HAL_UART_IRQHandler+0x34c>
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d008      	beq.n	8008004 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f8c7 	bl	8008186 <UART_EndTransmit_IT>
    return;
 8007ff8:	e004      	b.n	8008004 <HAL_UART_IRQHandler+0x34c>
    return;
 8007ffa:	bf00      	nop
 8007ffc:	e002      	b.n	8008004 <HAL_UART_IRQHandler+0x34c>
      return;
 8007ffe:	bf00      	nop
 8008000:	e000      	b.n	8008004 <HAL_UART_IRQHandler+0x34c>
      return;
 8008002:	bf00      	nop
  }
}
 8008004:	3728      	adds	r7, #40	; 0x28
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	080080bf 	.word	0x080080bf

08008010 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800807a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	695a      	ldr	r2, [r3, #20]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0201 	bic.w	r2, r2, #1
 800808a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008090:	2b01      	cmp	r3, #1
 8008092:	d107      	bne.n	80080a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f022 0210 	bic.w	r2, r2, #16
 80080a2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f7ff ffad 	bl	8008038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080de:	bf00      	nop
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b085      	sub	sp, #20
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b21      	cmp	r3, #33	; 0x21
 80080f8:	d13e      	bne.n	8008178 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008102:	d114      	bne.n	800812e <UART_Transmit_IT+0x48>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d110      	bne.n	800812e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a1b      	ldr	r3, [r3, #32]
 8008110:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008120:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	1c9a      	adds	r2, r3, #2
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	621a      	str	r2, [r3, #32]
 800812c:	e008      	b.n	8008140 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	1c59      	adds	r1, r3, #1
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6211      	str	r1, [r2, #32]
 8008138:	781a      	ldrb	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008144:	b29b      	uxth	r3, r3
 8008146:	3b01      	subs	r3, #1
 8008148:	b29b      	uxth	r3, r3
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	4619      	mov	r1, r3
 800814e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10f      	bne.n	8008174 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008162:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008172:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	e000      	b.n	800817a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008178:	2302      	movs	r3, #2
  }
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68da      	ldr	r2, [r3, #12]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800819c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff ff32 	bl	8008010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b22      	cmp	r3, #34	; 0x22
 80081c8:	f040 8087 	bne.w	80082da <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d4:	d117      	bne.n	8008206 <UART_Receive_IT+0x50>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d113      	bne.n	8008206 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fe:	1c9a      	adds	r2, r3, #2
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	629a      	str	r2, [r3, #40]	; 0x28
 8008204:	e026      	b.n	8008254 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008218:	d007      	beq.n	800822a <UART_Receive_IT+0x74>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10a      	bne.n	8008238 <UART_Receive_IT+0x82>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d106      	bne.n	8008238 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	b2da      	uxtb	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	e008      	b.n	800824a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008244:	b2da      	uxtb	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008258:	b29b      	uxth	r3, r3
 800825a:	3b01      	subs	r3, #1
 800825c:	b29b      	uxth	r3, r3
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	4619      	mov	r1, r3
 8008262:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008264:	2b00      	cmp	r3, #0
 8008266:	d136      	bne.n	80082d6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0220 	bic.w	r2, r2, #32
 8008276:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	695a      	ldr	r2, [r3, #20]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0201 	bic.w	r2, r2, #1
 8008296:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d10e      	bne.n	80082c6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0210 	bic.w	r2, r2, #16
 80082b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7ff fec4 	bl	800804c <HAL_UARTEx_RxEventCallback>
 80082c4:	e002      	b.n	80082cc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7ff feac 	bl	8008024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	e002      	b.n	80082dc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	e000      	b.n	80082dc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80082da:	2302      	movs	r3, #2
  }
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e8:	b09f      	sub	sp, #124	; 0x7c
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fa:	68d9      	ldr	r1, [r3, #12]
 80082fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	ea40 0301 	orr.w	r3, r0, r1
 8008304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	431a      	orrs	r2, r3
 8008310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	431a      	orrs	r2, r3
 8008316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	4313      	orrs	r3, r2
 800831c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800831e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008328:	f021 010c 	bic.w	r1, r1, #12
 800832c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008332:	430b      	orrs	r3, r1
 8008334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008342:	6999      	ldr	r1, [r3, #24]
 8008344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	ea40 0301 	orr.w	r3, r0, r1
 800834c:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800834e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	4b6a      	ldr	r3, [pc, #424]	; (80084fc <UART_SetConfig+0x218>)
 8008354:	429a      	cmp	r2, r3
 8008356:	d00e      	beq.n	8008376 <UART_SetConfig+0x92>
 8008358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	4b68      	ldr	r3, [pc, #416]	; (8008500 <UART_SetConfig+0x21c>)
 800835e:	429a      	cmp	r2, r3
 8008360:	d009      	beq.n	8008376 <UART_SetConfig+0x92>
 8008362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4b67      	ldr	r3, [pc, #412]	; (8008504 <UART_SetConfig+0x220>)
 8008368:	429a      	cmp	r2, r3
 800836a:	d004      	beq.n	8008376 <UART_SetConfig+0x92>
 800836c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	4b65      	ldr	r3, [pc, #404]	; (8008508 <UART_SetConfig+0x224>)
 8008372:	429a      	cmp	r2, r3
 8008374:	d103      	bne.n	800837e <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008376:	f7fd fb05 	bl	8005984 <HAL_RCC_GetPCLK2Freq>
 800837a:	6778      	str	r0, [r7, #116]	; 0x74
 800837c:	e002      	b.n	8008384 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800837e:	f7fd faed 	bl	800595c <HAL_RCC_GetPCLK1Freq>
 8008382:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800838c:	f040 80c0 	bne.w	8008510 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008392:	461c      	mov	r4, r3
 8008394:	f04f 0500 	mov.w	r5, #0
 8008398:	4622      	mov	r2, r4
 800839a:	462b      	mov	r3, r5
 800839c:	1891      	adds	r1, r2, r2
 800839e:	6439      	str	r1, [r7, #64]	; 0x40
 80083a0:	415b      	adcs	r3, r3
 80083a2:	647b      	str	r3, [r7, #68]	; 0x44
 80083a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083a8:	1912      	adds	r2, r2, r4
 80083aa:	eb45 0303 	adc.w	r3, r5, r3
 80083ae:	f04f 0000 	mov.w	r0, #0
 80083b2:	f04f 0100 	mov.w	r1, #0
 80083b6:	00d9      	lsls	r1, r3, #3
 80083b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083bc:	00d0      	lsls	r0, r2, #3
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	1911      	adds	r1, r2, r4
 80083c4:	6639      	str	r1, [r7, #96]	; 0x60
 80083c6:	416b      	adcs	r3, r5
 80083c8:	667b      	str	r3, [r7, #100]	; 0x64
 80083ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	461a      	mov	r2, r3
 80083d0:	f04f 0300 	mov.w	r3, #0
 80083d4:	1891      	adds	r1, r2, r2
 80083d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80083d8:	415b      	adcs	r3, r3
 80083da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80083e4:	f7f8 fb56 	bl	8000a94 <__aeabi_uldivmod>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	4b47      	ldr	r3, [pc, #284]	; (800850c <UART_SetConfig+0x228>)
 80083ee:	fba3 2302 	umull	r2, r3, r3, r2
 80083f2:	095b      	lsrs	r3, r3, #5
 80083f4:	011e      	lsls	r6, r3, #4
 80083f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083f8:	461c      	mov	r4, r3
 80083fa:	f04f 0500 	mov.w	r5, #0
 80083fe:	4622      	mov	r2, r4
 8008400:	462b      	mov	r3, r5
 8008402:	1891      	adds	r1, r2, r2
 8008404:	6339      	str	r1, [r7, #48]	; 0x30
 8008406:	415b      	adcs	r3, r3
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
 800840a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800840e:	1912      	adds	r2, r2, r4
 8008410:	eb45 0303 	adc.w	r3, r5, r3
 8008414:	f04f 0000 	mov.w	r0, #0
 8008418:	f04f 0100 	mov.w	r1, #0
 800841c:	00d9      	lsls	r1, r3, #3
 800841e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008422:	00d0      	lsls	r0, r2, #3
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	1911      	adds	r1, r2, r4
 800842a:	65b9      	str	r1, [r7, #88]	; 0x58
 800842c:	416b      	adcs	r3, r5
 800842e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	461a      	mov	r2, r3
 8008436:	f04f 0300 	mov.w	r3, #0
 800843a:	1891      	adds	r1, r2, r2
 800843c:	62b9      	str	r1, [r7, #40]	; 0x28
 800843e:	415b      	adcs	r3, r3
 8008440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008446:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800844a:	f7f8 fb23 	bl	8000a94 <__aeabi_uldivmod>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4b2e      	ldr	r3, [pc, #184]	; (800850c <UART_SetConfig+0x228>)
 8008454:	fba3 1302 	umull	r1, r3, r3, r2
 8008458:	095b      	lsrs	r3, r3, #5
 800845a:	2164      	movs	r1, #100	; 0x64
 800845c:	fb01 f303 	mul.w	r3, r1, r3
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	3332      	adds	r3, #50	; 0x32
 8008466:	4a29      	ldr	r2, [pc, #164]	; (800850c <UART_SetConfig+0x228>)
 8008468:	fba2 2303 	umull	r2, r3, r2, r3
 800846c:	095b      	lsrs	r3, r3, #5
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008474:	441e      	add	r6, r3
 8008476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008478:	4618      	mov	r0, r3
 800847a:	f04f 0100 	mov.w	r1, #0
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	1894      	adds	r4, r2, r2
 8008484:	623c      	str	r4, [r7, #32]
 8008486:	415b      	adcs	r3, r3
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
 800848a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800848e:	1812      	adds	r2, r2, r0
 8008490:	eb41 0303 	adc.w	r3, r1, r3
 8008494:	f04f 0400 	mov.w	r4, #0
 8008498:	f04f 0500 	mov.w	r5, #0
 800849c:	00dd      	lsls	r5, r3, #3
 800849e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084a2:	00d4      	lsls	r4, r2, #3
 80084a4:	4622      	mov	r2, r4
 80084a6:	462b      	mov	r3, r5
 80084a8:	1814      	adds	r4, r2, r0
 80084aa:	653c      	str	r4, [r7, #80]	; 0x50
 80084ac:	414b      	adcs	r3, r1
 80084ae:	657b      	str	r3, [r7, #84]	; 0x54
 80084b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	461a      	mov	r2, r3
 80084b6:	f04f 0300 	mov.w	r3, #0
 80084ba:	1891      	adds	r1, r2, r2
 80084bc:	61b9      	str	r1, [r7, #24]
 80084be:	415b      	adcs	r3, r3
 80084c0:	61fb      	str	r3, [r7, #28]
 80084c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80084ca:	f7f8 fae3 	bl	8000a94 <__aeabi_uldivmod>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4b0e      	ldr	r3, [pc, #56]	; (800850c <UART_SetConfig+0x228>)
 80084d4:	fba3 1302 	umull	r1, r3, r3, r2
 80084d8:	095b      	lsrs	r3, r3, #5
 80084da:	2164      	movs	r1, #100	; 0x64
 80084dc:	fb01 f303 	mul.w	r3, r1, r3
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	00db      	lsls	r3, r3, #3
 80084e4:	3332      	adds	r3, #50	; 0x32
 80084e6:	4a09      	ldr	r2, [pc, #36]	; (800850c <UART_SetConfig+0x228>)
 80084e8:	fba2 2303 	umull	r2, r3, r2, r3
 80084ec:	095b      	lsrs	r3, r3, #5
 80084ee:	f003 0207 	and.w	r2, r3, #7
 80084f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4432      	add	r2, r6
 80084f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084fa:	e0c3      	b.n	8008684 <UART_SetConfig+0x3a0>
 80084fc:	40011000 	.word	0x40011000
 8008500:	40011400 	.word	0x40011400
 8008504:	40011800 	.word	0x40011800
 8008508:	40011c00 	.word	0x40011c00
 800850c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008512:	461c      	mov	r4, r3
 8008514:	f04f 0500 	mov.w	r5, #0
 8008518:	4622      	mov	r2, r4
 800851a:	462b      	mov	r3, r5
 800851c:	1891      	adds	r1, r2, r2
 800851e:	6139      	str	r1, [r7, #16]
 8008520:	415b      	adcs	r3, r3
 8008522:	617b      	str	r3, [r7, #20]
 8008524:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008528:	1912      	adds	r2, r2, r4
 800852a:	eb45 0303 	adc.w	r3, r5, r3
 800852e:	f04f 0000 	mov.w	r0, #0
 8008532:	f04f 0100 	mov.w	r1, #0
 8008536:	00d9      	lsls	r1, r3, #3
 8008538:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800853c:	00d0      	lsls	r0, r2, #3
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	eb12 0804 	adds.w	r8, r2, r4
 8008546:	eb43 0905 	adc.w	r9, r3, r5
 800854a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	4618      	mov	r0, r3
 8008550:	f04f 0100 	mov.w	r1, #0
 8008554:	f04f 0200 	mov.w	r2, #0
 8008558:	f04f 0300 	mov.w	r3, #0
 800855c:	008b      	lsls	r3, r1, #2
 800855e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008562:	0082      	lsls	r2, r0, #2
 8008564:	4640      	mov	r0, r8
 8008566:	4649      	mov	r1, r9
 8008568:	f7f8 fa94 	bl	8000a94 <__aeabi_uldivmod>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4b47      	ldr	r3, [pc, #284]	; (8008690 <UART_SetConfig+0x3ac>)
 8008572:	fba3 2302 	umull	r2, r3, r3, r2
 8008576:	095b      	lsrs	r3, r3, #5
 8008578:	011e      	lsls	r6, r3, #4
 800857a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800857c:	4618      	mov	r0, r3
 800857e:	f04f 0100 	mov.w	r1, #0
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	1894      	adds	r4, r2, r2
 8008588:	60bc      	str	r4, [r7, #8]
 800858a:	415b      	adcs	r3, r3
 800858c:	60fb      	str	r3, [r7, #12]
 800858e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008592:	1812      	adds	r2, r2, r0
 8008594:	eb41 0303 	adc.w	r3, r1, r3
 8008598:	f04f 0400 	mov.w	r4, #0
 800859c:	f04f 0500 	mov.w	r5, #0
 80085a0:	00dd      	lsls	r5, r3, #3
 80085a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085a6:	00d4      	lsls	r4, r2, #3
 80085a8:	4622      	mov	r2, r4
 80085aa:	462b      	mov	r3, r5
 80085ac:	1814      	adds	r4, r2, r0
 80085ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80085b0:	414b      	adcs	r3, r1
 80085b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f04f 0100 	mov.w	r1, #0
 80085be:	f04f 0200 	mov.w	r2, #0
 80085c2:	f04f 0300 	mov.w	r3, #0
 80085c6:	008b      	lsls	r3, r1, #2
 80085c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085cc:	0082      	lsls	r2, r0, #2
 80085ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085d2:	f7f8 fa5f 	bl	8000a94 <__aeabi_uldivmod>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4b2d      	ldr	r3, [pc, #180]	; (8008690 <UART_SetConfig+0x3ac>)
 80085dc:	fba3 1302 	umull	r1, r3, r3, r2
 80085e0:	095b      	lsrs	r3, r3, #5
 80085e2:	2164      	movs	r1, #100	; 0x64
 80085e4:	fb01 f303 	mul.w	r3, r1, r3
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	011b      	lsls	r3, r3, #4
 80085ec:	3332      	adds	r3, #50	; 0x32
 80085ee:	4a28      	ldr	r2, [pc, #160]	; (8008690 <UART_SetConfig+0x3ac>)
 80085f0:	fba2 2303 	umull	r2, r3, r2, r3
 80085f4:	095b      	lsrs	r3, r3, #5
 80085f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085fa:	441e      	add	r6, r3
 80085fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085fe:	4618      	mov	r0, r3
 8008600:	f04f 0100 	mov.w	r1, #0
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	1894      	adds	r4, r2, r2
 800860a:	603c      	str	r4, [r7, #0]
 800860c:	415b      	adcs	r3, r3
 800860e:	607b      	str	r3, [r7, #4]
 8008610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008614:	1812      	adds	r2, r2, r0
 8008616:	eb41 0303 	adc.w	r3, r1, r3
 800861a:	f04f 0400 	mov.w	r4, #0
 800861e:	f04f 0500 	mov.w	r5, #0
 8008622:	00dd      	lsls	r5, r3, #3
 8008624:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008628:	00d4      	lsls	r4, r2, #3
 800862a:	4622      	mov	r2, r4
 800862c:	462b      	mov	r3, r5
 800862e:	eb12 0a00 	adds.w	sl, r2, r0
 8008632:	eb43 0b01 	adc.w	fp, r3, r1
 8008636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	4618      	mov	r0, r3
 800863c:	f04f 0100 	mov.w	r1, #0
 8008640:	f04f 0200 	mov.w	r2, #0
 8008644:	f04f 0300 	mov.w	r3, #0
 8008648:	008b      	lsls	r3, r1, #2
 800864a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800864e:	0082      	lsls	r2, r0, #2
 8008650:	4650      	mov	r0, sl
 8008652:	4659      	mov	r1, fp
 8008654:	f7f8 fa1e 	bl	8000a94 <__aeabi_uldivmod>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <UART_SetConfig+0x3ac>)
 800865e:	fba3 1302 	umull	r1, r3, r3, r2
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	2164      	movs	r1, #100	; 0x64
 8008666:	fb01 f303 	mul.w	r3, r1, r3
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	011b      	lsls	r3, r3, #4
 800866e:	3332      	adds	r3, #50	; 0x32
 8008670:	4a07      	ldr	r2, [pc, #28]	; (8008690 <UART_SetConfig+0x3ac>)
 8008672:	fba2 2303 	umull	r2, r3, r2, r3
 8008676:	095b      	lsrs	r3, r3, #5
 8008678:	f003 020f 	and.w	r2, r3, #15
 800867c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4432      	add	r2, r6
 8008682:	609a      	str	r2, [r3, #8]
}
 8008684:	bf00      	nop
 8008686:	377c      	adds	r7, #124	; 0x7c
 8008688:	46bd      	mov	sp, r7
 800868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868e:	bf00      	nop
 8008690:	51eb851f 	.word	0x51eb851f

08008694 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008694:	b084      	sub	sp, #16
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	f107 001c 	add.w	r0, r7, #28
 80086a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d122      	bne.n	80086f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80086c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d105      	bne.n	80086e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa50 	bl	8008b8c <USB_CoreReset>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73fb      	strb	r3, [r7, #15]
 80086f0:	e01a      	b.n	8008728 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fa44 	bl	8008b8c <USB_CoreReset>
 8008704:	4603      	mov	r3, r0
 8008706:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800870a:	2b00      	cmp	r3, #0
 800870c:	d106      	bne.n	800871c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	639a      	str	r2, [r3, #56]	; 0x38
 800871a:	e005      	b.n	8008728 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	2b01      	cmp	r3, #1
 800872c:	d10b      	bne.n	8008746 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f043 0206 	orr.w	r2, r3, #6
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f043 0220 	orr.w	r2, r3, #32
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008752:	b004      	add	sp, #16
 8008754:	4770      	bx	lr

08008756 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f023 0201 	bic.w	r2, r3, #1
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d106      	bne.n	80087a4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60da      	str	r2, [r3, #12]
 80087a2:	e00b      	b.n	80087bc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d106      	bne.n	80087b8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	60da      	str	r2, [r3, #12]
 80087b6:	e001      	b.n	80087bc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e003      	b.n	80087c4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80087bc:	2032      	movs	r0, #50	; 0x32
 80087be:	f7fb f8b9 	bl	8003934 <HAL_Delay>

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087cc:	b084      	sub	sp, #16
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b086      	sub	sp, #24
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80087da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80087e6:	2300      	movs	r3, #0
 80087e8:	613b      	str	r3, [r7, #16]
 80087ea:	e009      	b.n	8008800 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	3340      	adds	r3, #64	; 0x40
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	2200      	movs	r2, #0
 80087f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	3301      	adds	r3, #1
 80087fe:	613b      	str	r3, [r7, #16]
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	2b0e      	cmp	r3, #14
 8008804:	d9f2      	bls.n	80087ec <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d11c      	bne.n	8008846 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800881a:	f043 0302 	orr.w	r3, r3, #2
 800881e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008824:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	e005      	b.n	8008852 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008858:	461a      	mov	r2, r3
 800885a:	2300      	movs	r3, #0
 800885c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008864:	4619      	mov	r1, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800886c:	461a      	mov	r2, r3
 800886e:	680b      	ldr	r3, [r1, #0]
 8008870:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008874:	2b01      	cmp	r3, #1
 8008876:	d10c      	bne.n	8008892 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	2b00      	cmp	r3, #0
 800887c:	d104      	bne.n	8008888 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800887e:	2100      	movs	r1, #0
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f949 	bl	8008b18 <USB_SetDevSpeed>
 8008886:	e008      	b.n	800889a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008888:	2101      	movs	r1, #1
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f944 	bl	8008b18 <USB_SetDevSpeed>
 8008890:	e003      	b.n	800889a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008892:	2103      	movs	r1, #3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f93f 	bl	8008b18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800889a:	2110      	movs	r1, #16
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f8f3 	bl	8008a88 <USB_FlushTxFifo>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f911 	bl	8008ad4 <USB_FlushRxFifo>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c2:	461a      	mov	r2, r3
 80088c4:	2300      	movs	r3, #0
 80088c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ce:	461a      	mov	r2, r3
 80088d0:	2300      	movs	r3, #0
 80088d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088da:	461a      	mov	r2, r3
 80088dc:	2300      	movs	r3, #0
 80088de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088e0:	2300      	movs	r3, #0
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	e043      	b.n	800896e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088fc:	d118      	bne.n	8008930 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10a      	bne.n	800891a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008910:	461a      	mov	r2, r3
 8008912:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	e013      	b.n	8008942 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008926:	461a      	mov	r2, r3
 8008928:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	e008      	b.n	8008942 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800893c:	461a      	mov	r2, r3
 800893e:	2300      	movs	r3, #0
 8008940:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4413      	add	r3, r2
 800894a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800894e:	461a      	mov	r2, r3
 8008950:	2300      	movs	r3, #0
 8008952:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4413      	add	r3, r2
 800895c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008960:	461a      	mov	r2, r3
 8008962:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008966:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	3301      	adds	r3, #1
 800896c:	613b      	str	r3, [r7, #16]
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	429a      	cmp	r2, r3
 8008974:	d3b7      	bcc.n	80088e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008976:	2300      	movs	r3, #0
 8008978:	613b      	str	r3, [r7, #16]
 800897a:	e043      	b.n	8008a04 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800898e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008992:	d118      	bne.n	80089c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10a      	bne.n	80089b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a6:	461a      	mov	r2, r3
 80089a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	e013      	b.n	80089d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089bc:	461a      	mov	r2, r3
 80089be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80089c2:	6013      	str	r3, [r2, #0]
 80089c4:	e008      	b.n	80089d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d2:	461a      	mov	r2, r3
 80089d4:	2300      	movs	r3, #0
 80089d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e4:	461a      	mov	r2, r3
 80089e6:	2300      	movs	r3, #0
 80089e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f6:	461a      	mov	r2, r3
 80089f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	3301      	adds	r3, #1
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d3b7      	bcc.n	800897c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008a2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d105      	bne.n	8008a40 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	f043 0210 	orr.w	r2, r3, #16
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699a      	ldr	r2, [r3, #24]
 8008a44:	4b0f      	ldr	r3, [pc, #60]	; (8008a84 <USB_DevInit+0x2b8>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d005      	beq.n	8008a5e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	f043 0208 	orr.w	r2, r3, #8
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d107      	bne.n	8008a74 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a6c:	f043 0304 	orr.w	r3, r3, #4
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a80:	b004      	add	sp, #16
 8008a82:	4770      	bx	lr
 8008a84:	803c3800 	.word	0x803c3800

08008a88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	019b      	lsls	r3, r3, #6
 8008a9a:	f043 0220 	orr.w	r2, r3, #32
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	4a09      	ldr	r2, [pc, #36]	; (8008ad0 <USB_FlushTxFifo+0x48>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d901      	bls.n	8008ab4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e006      	b.n	8008ac2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	f003 0320 	and.w	r3, r3, #32
 8008abc:	2b20      	cmp	r3, #32
 8008abe:	d0f0      	beq.n	8008aa2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	00030d40 	.word	0x00030d40

08008ad4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2210      	movs	r2, #16
 8008ae4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4a09      	ldr	r2, [pc, #36]	; (8008b14 <USB_FlushRxFifo+0x40>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d901      	bls.n	8008af8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e006      	b.n	8008b06 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	f003 0310 	and.w	r3, r3, #16
 8008b00:	2b10      	cmp	r3, #16
 8008b02:	d0f0      	beq.n	8008ae6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	00030d40 	.word	0x00030d40

08008b18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	68f9      	ldr	r1, [r7, #12]
 8008b34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b085      	sub	sp, #20
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b64:	f023 0303 	bic.w	r3, r3, #3
 8008b68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b78:	f043 0302 	orr.w	r3, r3, #2
 8008b7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	4a13      	ldr	r2, [pc, #76]	; (8008bf0 <USB_CoreReset+0x64>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d901      	bls.n	8008baa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e01b      	b.n	8008be2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	daf2      	bge.n	8008b98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	f043 0201 	orr.w	r2, r3, #1
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	60fb      	str	r3, [r7, #12]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4a09      	ldr	r2, [pc, #36]	; (8008bf0 <USB_CoreReset+0x64>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d901      	bls.n	8008bd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e006      	b.n	8008be2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d0f0      	beq.n	8008bc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	00030d40 	.word	0x00030d40

08008bf4 <__libc_init_array>:
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	4d0d      	ldr	r5, [pc, #52]	; (8008c2c <__libc_init_array+0x38>)
 8008bf8:	4c0d      	ldr	r4, [pc, #52]	; (8008c30 <__libc_init_array+0x3c>)
 8008bfa:	1b64      	subs	r4, r4, r5
 8008bfc:	10a4      	asrs	r4, r4, #2
 8008bfe:	2600      	movs	r6, #0
 8008c00:	42a6      	cmp	r6, r4
 8008c02:	d109      	bne.n	8008c18 <__libc_init_array+0x24>
 8008c04:	4d0b      	ldr	r5, [pc, #44]	; (8008c34 <__libc_init_array+0x40>)
 8008c06:	4c0c      	ldr	r4, [pc, #48]	; (8008c38 <__libc_init_array+0x44>)
 8008c08:	f000 f820 	bl	8008c4c <_init>
 8008c0c:	1b64      	subs	r4, r4, r5
 8008c0e:	10a4      	asrs	r4, r4, #2
 8008c10:	2600      	movs	r6, #0
 8008c12:	42a6      	cmp	r6, r4
 8008c14:	d105      	bne.n	8008c22 <__libc_init_array+0x2e>
 8008c16:	bd70      	pop	{r4, r5, r6, pc}
 8008c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c1c:	4798      	blx	r3
 8008c1e:	3601      	adds	r6, #1
 8008c20:	e7ee      	b.n	8008c00 <__libc_init_array+0xc>
 8008c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c26:	4798      	blx	r3
 8008c28:	3601      	adds	r6, #1
 8008c2a:	e7f2      	b.n	8008c12 <__libc_init_array+0x1e>
 8008c2c:	08008ca8 	.word	0x08008ca8
 8008c30:	08008ca8 	.word	0x08008ca8
 8008c34:	08008ca8 	.word	0x08008ca8
 8008c38:	08008cac 	.word	0x08008cac

08008c3c <memset>:
 8008c3c:	4402      	add	r2, r0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d100      	bne.n	8008c46 <memset+0xa>
 8008c44:	4770      	bx	lr
 8008c46:	f803 1b01 	strb.w	r1, [r3], #1
 8008c4a:	e7f9      	b.n	8008c40 <memset+0x4>

08008c4c <_init>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr

08008c58 <_fini>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr

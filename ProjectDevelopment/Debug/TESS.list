
TESS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d78  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005f50  08005f50  00015f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fac  08005fac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb4  08005fb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003248  2000000c  08005fc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003254  08005fc8  00023254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c2b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a62  00000000  00000000  00032c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  000356d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00036950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d03  00000000  00000000  00037aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012160  00000000  00000000  0005d7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9091  00000000  00000000  0006f90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016899c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d1c  00000000  00000000  001689f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005f38 	.word	0x08005f38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005f38 	.word	0x08005f38

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <FMSTR_CopyMemory>:
* @param    nSize     - memory size (always in bytes)
*
******************************************************************************/

void FMSTR_CopyMemory(FMSTR_ADDR nDestAddr, FMSTR_ADDR nSrcAddr, FMSTR_SIZE8 nSize)
{
 8000510:	b480      	push	{r7}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	4613      	mov	r3, r2
 800051c:	71fb      	strb	r3, [r7, #7]
    FMSTR_U8* ps = (FMSTR_U8*) nSrcAddr;
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	617b      	str	r3, [r7, #20]
    FMSTR_U8* pd = (FMSTR_U8*) nDestAddr;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	613b      	str	r3, [r7, #16]

    while(nSize--) 
 8000526:	e007      	b.n	8000538 <FMSTR_CopyMemory+0x28>
    {
        *pd++ = *ps++;
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	1c53      	adds	r3, r2, #1
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	1c59      	adds	r1, r3, #1
 8000532:	6139      	str	r1, [r7, #16]
 8000534:	7812      	ldrb	r2, [r2, #0]
 8000536:	701a      	strb	r2, [r3, #0]
    while(nSize--) 
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	1e5a      	subs	r2, r3, #1
 800053c:	71fa      	strb	r2, [r7, #7]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d1f2      	bne.n	8000528 <FMSTR_CopyMemory+0x18>
    }
}
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	371c      	adds	r7, #28
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <FMSTR_CopyToBuffer>:
* @return This function returns a pointer to next byte in comm. buffer
*
******************************************************************************/

FMSTR_BPTR FMSTR_CopyToBuffer(FMSTR_BPTR pDestBuff, FMSTR_ADDR nSrcAddr, FMSTR_SIZE8 nSize)
{
 8000550:	b480      	push	{r7}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	4613      	mov	r3, r2
 800055c:	71fb      	strb	r3, [r7, #7]
    FMSTR_U8* ps = (FMSTR_U8*) nSrcAddr;
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	617b      	str	r3, [r7, #20]
    FMSTR_U8* pd = (FMSTR_U8*) pDestBuff;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	613b      	str	r3, [r7, #16]

    while(nSize--)
 8000566:	e007      	b.n	8000578 <FMSTR_CopyToBuffer+0x28>
    {
        *pd++ = *ps++;
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	1c53      	adds	r3, r2, #1
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	1c59      	adds	r1, r3, #1
 8000572:	6139      	str	r1, [r7, #16]
 8000574:	7812      	ldrb	r2, [r2, #0]
 8000576:	701a      	strb	r2, [r3, #0]
    while(nSize--)
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	1e5a      	subs	r2, r3, #1
 800057c:	71fa      	strb	r2, [r7, #7]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1f2      	bne.n	8000568 <FMSTR_CopyToBuffer+0x18>
    }

    return (FMSTR_BPTR) pd;
 8000582:	693b      	ldr	r3, [r7, #16]
}
 8000584:	4618      	mov	r0, r3
 8000586:	371c      	adds	r7, #28
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <FMSTR_CopyFromBuffer>:
* @return This function returns a pointer to next byte in comm. buffer
*
******************************************************************************/

FMSTR_BPTR FMSTR_CopyFromBuffer(FMSTR_ADDR nDestAddr, FMSTR_BPTR pSrcBuff, FMSTR_SIZE8 nSize)
{
 8000590:	b480      	push	{r7}
 8000592:	b087      	sub	sp, #28
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	4613      	mov	r3, r2
 800059c:	71fb      	strb	r3, [r7, #7]
    FMSTR_U8* ps = (FMSTR_U8*) pSrcBuff;
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	617b      	str	r3, [r7, #20]
    FMSTR_U8* pd = (FMSTR_U8*) nDestAddr;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	613b      	str	r3, [r7, #16]

    while(nSize--)
 80005a6:	e007      	b.n	80005b8 <FMSTR_CopyFromBuffer+0x28>
    {
        *pd++ = *ps++;
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	1c53      	adds	r3, r2, #1
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	1c59      	adds	r1, r3, #1
 80005b2:	6139      	str	r1, [r7, #16]
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	701a      	strb	r2, [r3, #0]
    while(nSize--)
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	1e5a      	subs	r2, r3, #1
 80005bc:	71fa      	strb	r2, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1f2      	bne.n	80005a8 <FMSTR_CopyFromBuffer+0x18>
    }

    return (FMSTR_BPTR) ps;
 80005c2:	697b      	ldr	r3, [r7, #20]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	371c      	adds	r7, #28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <FMSTR_CopyFromBufferWithMask>:
* @param  nSize     - buffer size (always in bytes)
*
******************************************************************************/

void FMSTR_CopyFromBufferWithMask(FMSTR_ADDR nDestAddr, FMSTR_BPTR pSrcBuff, FMSTR_SIZE8 nSize)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	4613      	mov	r3, r2
 80005dc:	71fb      	strb	r3, [r7, #7]
    FMSTR_U8* ps = (FMSTR_U8*) pSrcBuff;
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	61fb      	str	r3, [r7, #28]
    FMSTR_U8* pd = (FMSTR_U8*) nDestAddr;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	61bb      	str	r3, [r7, #24]
    FMSTR_U8* pm = ps + nSize;
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	69fa      	ldr	r2, [r7, #28]
 80005ea:	4413      	add	r3, r2
 80005ec:	617b      	str	r3, [r7, #20]
    FMSTR_U8 mask, stmp, dtmp;

    while(nSize--)
 80005ee:	e021      	b.n	8000634 <FMSTR_CopyFromBufferWithMask+0x64>
    {
        mask = *pm++;
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	617a      	str	r2, [r7, #20]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	74fb      	strb	r3, [r7, #19]
        stmp = *ps++;
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	1c5a      	adds	r2, r3, #1
 80005fe:	61fa      	str	r2, [r7, #28]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	74bb      	strb	r3, [r7, #18]
        dtmp = *pd;
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	747b      	strb	r3, [r7, #17]

        /* perform AND-masking */
        stmp = (FMSTR_U8) ((stmp & mask) | (dtmp & ~mask));
 800060a:	7cba      	ldrb	r2, [r7, #18]
 800060c:	7cfb      	ldrb	r3, [r7, #19]
 800060e:	4013      	ands	r3, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	b25a      	sxtb	r2, r3
 8000614:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000618:	43db      	mvns	r3, r3
 800061a:	b259      	sxtb	r1, r3
 800061c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000620:	400b      	ands	r3, r1
 8000622:	b25b      	sxtb	r3, r3
 8000624:	4313      	orrs	r3, r2
 8000626:	b25b      	sxtb	r3, r3
 8000628:	74bb      	strb	r3, [r7, #18]

        /* put the result back */
        *pd++ = stmp;
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	61ba      	str	r2, [r7, #24]
 8000630:	7cba      	ldrb	r2, [r7, #18]
 8000632:	701a      	strb	r2, [r3, #0]
    while(nSize--)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	1e5a      	subs	r2, r3, #1
 8000638:	71fa      	strb	r2, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1d8      	bne.n	80005f0 <FMSTR_CopyFromBufferWithMask+0x20>
    }
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3724      	adds	r7, #36	; 0x24
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <FMSTR_SetExAddr>:
******************************************************************************/

static FMSTR_BOOL pcm_bNextAddrIsEx;

void FMSTR_SetExAddr(FMSTR_BOOL bNextAddrIsEx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
    pcm_bNextAddrIsEx = bNextAddrIsEx;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <FMSTR_SetExAddr+0x1c>)
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	8013      	strh	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000028 	.word	0x20000028

0800066c <FMSTR_AddressToBuffer>:
*         32 or 16 bit wide (based on previous call to FMSTR_SetExAddr)
*
******************************************************************************/

FMSTR_BPTR FMSTR_AddressToBuffer(FMSTR_BPTR pDest, FMSTR_ADDR nAddr)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
    if(pcm_bNextAddrIsEx)
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <FMSTR_AddressToBuffer+0x3c>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <FMSTR_AddressToBuffer+0x20>
    {
        /* fill in the 32bit address */
#if FMSTR_BYTE_BUFFER_ACCESS
        pDest = FMSTR_CopyToBuffer(pDest, (FMSTR_ADDR)&nAddr, 4U);
#else
        *(FMSTR_U32*) pDest = ((FMSTR_U32)nAddr);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	601a      	str	r2, [r3, #0]
        pDest += 4;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3304      	adds	r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	e006      	b.n	800069a <FMSTR_AddressToBuffer+0x2e>
    {
        /* fill in the 16bit address (never used) */
#if FMSTR_BYTE_BUFFER_ACCESS
        pDest = FMSTR_CopyToBuffer(pDest, (FMSTR_ADDR)&nAddr, 2U);
#else
        *(FMSTR_U16*) pDest = ((FMSTR_U16)nAddr);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b29a      	uxth	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	801a      	strh	r2, [r3, #0]
        pDest += 2;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3302      	adds	r3, #2
 8000698:	607b      	str	r3, [r7, #4]
#endif
    }

    return pDest;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	20000028 	.word	0x20000028

080006ac <FMSTR_AddressFromBuffer>:
* @brief  Fetch address from communication buffer
*
******************************************************************************/

FMSTR_BPTR FMSTR_AddressFromBuffer(FMSTR_ADDR* pAddr, FMSTR_BPTR pSrc)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    if(pcm_bNextAddrIsEx)
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <FMSTR_AddressFromBuffer+0x40>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d007      	beq.n	80006ce <FMSTR_AddressFromBuffer+0x22>
    {
#if FMSTR_BYTE_BUFFER_ACCESS
        pSrc = FMSTR_CopyFromBuffer((FMSTR_ADDR)(FMSTR_U8*)pAddr, pSrc, 4U);
#else
        *pAddr = (FMSTR_ADDR) *((FMSTR_U32*) pSrc);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
        pSrc += 4;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	3304      	adds	r3, #4
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	e007      	b.n	80006de <FMSTR_AddressFromBuffer+0x32>
    else
    {
#if FMSTR_BYTE_BUFFER_ACCESS
        pSrc = FMSTR_CopyFromBuffer((FMSTR_ADDR)(FMSTR_U8*)pAddr, pSrc, 2U);
#else
        *pAddr = (FMSTR_ADDR) *((FMSTR_U16*) pSrc);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	601a      	str	r2, [r3, #0]
        pSrc += 2;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	3302      	adds	r3, #2
 80006dc:	603b      	str	r3, [r7, #0]
#endif
    }

    return pSrc;
 80006de:	683b      	ldr	r3, [r7, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	20000028 	.word	0x20000028

080006f0 <FMSTR_InitAppCmds>:
* @brief    Initialize app.cmds interface
*
******************************************************************************/

void FMSTR_InitAppCmds(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
#if FMSTR_MAX_APPCMD_CALLS
    FMSTR_INDEX i;
    
    for(i=0; i<FMSTR_MAX_APPCMD_CALLS; i++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	80fb      	strh	r3, [r7, #6]
 80006fa:	e011      	b.n	8000720 <FMSTR_InitAppCmds+0x30>
    {
        pcm_pAppCmdCallId[i] = FMSTR_APPCMDRESULT_NOCMD;
 80006fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000700:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <FMSTR_InitAppCmds+0x50>)
 8000702:	21ff      	movs	r1, #255	; 0xff
 8000704:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        pcm_pAppCmdCallFunc[i] = NULL;
 8000708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <FMSTR_InitAppCmds+0x54>)
 800070e:	2100      	movs	r1, #0
 8000710:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(i=0; i<FMSTR_MAX_APPCMD_CALLS; i++)
 8000714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000718:	b29b      	uxth	r3, r3
 800071a:	3301      	adds	r3, #1
 800071c:	b29b      	uxth	r3, r3
 800071e:	80fb      	strh	r3, [r7, #6]
 8000720:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000724:	2b03      	cmp	r3, #3
 8000726:	dde9      	ble.n	80006fc <FMSTR_InitAppCmds+0xc>
    }
#endif      

    pcm_nAppCmd = (FMSTR_APPCMD_CODE) FMSTR_APPCMDRESULT_NOCMD;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <FMSTR_InitAppCmds+0x58>)
 800072a:	22ff      	movs	r2, #255	; 0xff
 800072c:	801a      	strh	r2, [r3, #0]
    pcm_nAppCmdResult = (FMSTR_APPCMD_RESULT) FMSTR_APPCMDRESULT_NOCMD;
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <FMSTR_InitAppCmds+0x5c>)
 8000730:	22ff      	movs	r2, #255	; 0xff
 8000732:	801a      	strh	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	20000074 	.word	0x20000074
 8000744:	2000007c 	.word	0x2000007c
 8000748:	2000002a 	.word	0x2000002a
 800074c:	2000006e 	.word	0x2000006e

08000750 <FMSTR_StoreAppCmd>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_StoreAppCmd(FMSTR_BPTR pMessageIO)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	617b      	str	r3, [r7, #20]
    FMSTR_U8 nArgsLen;
    FMSTR_U8 nCode;

    /* the previous command not yet processed */
    if(pcm_nAppCmd != ((FMSTR_APPCMD_CODE) FMSTR_APPCMDRESULT_NOCMD))
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <FMSTR_StoreAppCmd+0x9c>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	2bff      	cmp	r3, #255	; 0xff
 8000762:	d005      	beq.n	8000770 <FMSTR_StoreAppCmd+0x20>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_SERVBUSY);
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	2287      	movs	r2, #135	; 0x87
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	3301      	adds	r3, #1
 800076e:	e039      	b.n	80007e4 <FMSTR_StoreAppCmd+0x94>
    }

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3301      	adds	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nArgsLen, pMessageIO);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3301      	adds	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nCode, pMessageIO);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	73bb      	strb	r3, [r7, #14]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3301      	adds	r3, #1
 800078c:	607b      	str	r3, [r7, #4]

    /* args len is datalen minus one */
    nArgsLen--;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3b01      	subs	r3, #1
 8000792:	b2db      	uxtb	r3, r3
 8000794:	73fb      	strb	r3, [r7, #15]
        
    /* does the application command fit to buffer ? */
    if (nArgsLen > (FMSTR_SIZE8) FMSTR_APPCMD_BUFF_SIZE)
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	2b20      	cmp	r3, #32
 800079a:	d905      	bls.n	80007a8 <FMSTR_StoreAppCmd+0x58>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVBUFF);
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	2285      	movs	r2, #133	; 0x85
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3301      	adds	r3, #1
 80007a6:	e01d      	b.n	80007e4 <FMSTR_StoreAppCmd+0x94>
    }
    
    /* store command data into dedicated buffer */
    pcm_nAppCmd = nCode;
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <FMSTR_StoreAppCmd+0x9c>)
 80007ae:	801a      	strh	r2, [r3, #0]
    pcm_nAppCmdLen = nArgsLen;
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <FMSTR_StoreAppCmd+0xa0>)
 80007b6:	801a      	strh	r2, [r3, #0]
    
    /* data copy */
    if(nArgsLen)
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d007      	beq.n	80007ce <FMSTR_StoreAppCmd+0x7e>
    {
        FMSTR_ADDR appCmdBuffAddr;
        FMSTR_ARR2ADDR(appCmdBuffAddr, pcm_pAppCmdBuff);
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <FMSTR_StoreAppCmd+0xa4>)
 80007c0:	613b      	str	r3, [r7, #16]
        
        /*lint -e{534} ignoring return value */
        FMSTR_CopyFromBuffer(appCmdBuffAddr, pMessageIO, (FMSTR_SIZE8) nArgsLen);
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	461a      	mov	r2, r3
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	6938      	ldr	r0, [r7, #16]
 80007ca:	f7ff fee1 	bl	8000590 <FMSTR_CopyFromBuffer>
    }

    /* mark command as "running" (without any response data) */
    pcm_nAppCmdResult = (FMSTR_APPCMD_RESULT) FMSTR_APPCMDRESULT_RUNNING;
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <FMSTR_StoreAppCmd+0xa8>)
 80007d0:	22fe      	movs	r2, #254	; 0xfe
 80007d2:	801a      	strh	r2, [r3, #0]
    pcm_nAppCmdResultDataLen = 0U;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <FMSTR_StoreAppCmd+0xac>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]

    return FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000002a 	.word	0x2000002a
 80007f0:	2000006c 	.word	0x2000006c
 80007f4:	2000002c 	.word	0x2000002c
 80007f8:	2000006e 	.word	0x2000006e
 80007fc:	20000070 	.word	0x20000070

08000800 <FMSTR_GetAppCmdStatus>:
*       sure the PC already got the command delivery packet acknowledged.
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetAppCmdStatus(FMSTR_BPTR pMessageIO)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
#if FMSTR_MAX_APPCMD_CALLS
    FMSTR_PAPPCMDFUNC pFunc = NULL;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
    FMSTR_INDEX nIndex;
    
    /* time to execute the command's callback */
    if((nIndex = FMSTR_FindAppCmdCallIndex(pcm_nAppCmd)) >= 0)
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <FMSTR_GetAppCmdStatus+0x74>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f889 	bl	8000928 <FMSTR_FindAppCmdCallIndex>
 8000816:	4603      	mov	r3, r0
 8000818:	817b      	strh	r3, [r7, #10]
 800081a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800081e:	2b00      	cmp	r3, #0
 8000820:	db05      	blt.n	800082e <FMSTR_GetAppCmdStatus+0x2e>
    {
        pFunc = pcm_pAppCmdCallFunc[nIndex];
 8000822:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000826:	4a14      	ldr	r2, [pc, #80]	; (8000878 <FMSTR_GetAppCmdStatus+0x78>)
 8000828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082c:	60fb      	str	r3, [r7, #12]
    }
    
    /* valid callback function found? */
    if(pFunc)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00d      	beq.n	8000850 <FMSTR_GetAppCmdStatus+0x50>
    {
        /* do execute callback, return value is app.cmd result code */
        pcm_nAppCmdResult = pFunc(pcm_nAppCmd, pcm_pAppCmdBuff, pcm_nAppCmdLen);
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <FMSTR_GetAppCmdStatus+0x74>)
 8000836:	8818      	ldrh	r0, [r3, #0]
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <FMSTR_GetAppCmdStatus+0x7c>)
 800083a:	881a      	ldrh	r2, [r3, #0]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	4910      	ldr	r1, [pc, #64]	; (8000880 <FMSTR_GetAppCmdStatus+0x80>)
 8000840:	4798      	blx	r3
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <FMSTR_GetAppCmdStatus+0x84>)
 8000848:	801a      	strh	r2, [r3, #0]

        /* nothing more to do with this command (i.e. command acknowledged) */
        pcm_nAppCmd = FMSTR_APPCMDRESULT_NOCMD;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <FMSTR_GetAppCmdStatus+0x74>)
 800084c:	22ff      	movs	r2, #255	; 0xff
 800084e:	801a      	strh	r2, [r3, #0]
    }
#endif

    pMessageIO = FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STS_OK);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3301      	adds	r3, #1
 800085a:	607b      	str	r3, [r7, #4]
    return FMSTR_ValueToBuffer8(pMessageIO, (FMSTR_U8) pcm_nAppCmdResult);
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <FMSTR_GetAppCmdStatus+0x84>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	701a      	strb	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3301      	adds	r3, #1
}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000002a 	.word	0x2000002a
 8000878:	2000007c 	.word	0x2000007c
 800087c:	2000006c 	.word	0x2000006c
 8000880:	2000002c 	.word	0x2000002c
 8000884:	2000006e 	.word	0x2000006e

08000888 <FMSTR_GetAppCmdRespData>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetAppCmdRespData(FMSTR_BPTR pMessageIO)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
    FMSTR_U8 nDataLen;
    FMSTR_U8 nDataOffset;

    /* the previous command not yet processed */
    if(pcm_nAppCmd != ((FMSTR_APPCMD_CODE)FMSTR_APPCMDRESULT_NOCMD))
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <FMSTR_GetAppCmdRespData+0x94>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	2bff      	cmp	r3, #255	; 0xff
 800089a:	d005      	beq.n	80008a8 <FMSTR_GetAppCmdRespData+0x20>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_SERVBUSY);
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	2287      	movs	r2, #135	; 0x87
 80008a0:	701a      	strb	r2, [r3, #0]
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	3301      	adds	r3, #1
 80008a6:	e035      	b.n	8000914 <FMSTR_GetAppCmdRespData+0x8c>
    }

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3301      	adds	r3, #1
 80008ac:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nDataLen, pMessageIO);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	73fb      	strb	r3, [r7, #15]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3301      	adds	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nDataOffset, pMessageIO);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	73bb      	strb	r3, [r7, #14]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	607b      	str	r3, [r7, #4]

    /* the response would not fit into comm buffer */
    if(nDataLen > (FMSTR_U16)FMSTR_COMM_BUFFER_SIZE)
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	2b3c      	cmp	r3, #60	; 0x3c
 80008ca:	d905      	bls.n	80008d8 <FMSTR_GetAppCmdRespData+0x50>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_RSPBUFFOVF);
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	2284      	movs	r2, #132	; 0x84
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	3301      	adds	r3, #1
 80008d6:	e01d      	b.n	8000914 <FMSTR_GetAppCmdRespData+0x8c>
    }
    
    /* the data would be fetched outside the app.cmd response data */
    if((((FMSTR_U16)nDataOffset) + nDataLen) > (FMSTR_SIZE8)pcm_nAppCmdResultDataLen)
 80008d8:	7bbb      	ldrb	r3, [r7, #14]
 80008da:	461a      	mov	r2, r3
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	4413      	add	r3, r2
 80008e0:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <FMSTR_GetAppCmdRespData+0x98>)
 80008e2:	7812      	ldrb	r2, [r2, #0]
 80008e4:	4293      	cmp	r3, r2
 80008e6:	dd05      	ble.n	80008f4 <FMSTR_GetAppCmdRespData+0x6c>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVSIZE);
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	2286      	movs	r2, #134	; 0x86
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3301      	adds	r3, #1
 80008f2:	e00f      	b.n	8000914 <FMSTR_GetAppCmdRespData+0x8c>
    }
    
    pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3301      	adds	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]

    /* copy to buffer */
    {    
        FMSTR_ADDR appCmdBuffAddr;
        FMSTR_ARR2ADDR(appCmdBuffAddr, pcm_pAppCmdBuff);
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <FMSTR_GetAppCmdRespData+0x9c>)
 8000902:	613b      	str	r3, [r7, #16]
        pResponse = FMSTR_CopyToBuffer(pResponse, appCmdBuffAddr, (FMSTR_SIZE8)nDataLen);
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	461a      	mov	r2, r3
 8000908:	6939      	ldr	r1, [r7, #16]
 800090a:	6978      	ldr	r0, [r7, #20]
 800090c:	f7ff fe20 	bl	8000550 <FMSTR_CopyToBuffer>
 8000910:	6178      	str	r0, [r7, #20]
    }
    
    return pResponse;
 8000912:	697b      	ldr	r3, [r7, #20]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000002a 	.word	0x2000002a
 8000920:	20000070 	.word	0x20000070
 8000924:	2000002c 	.word	0x2000002c

08000928 <FMSTR_FindAppCmdCallIndex>:
* @return   Index of function pointer in our local tables
*
******************************************************************************/

static FMSTR_INDEX FMSTR_FindAppCmdCallIndex(FMSTR_APPCMD_CODE nAppcmdCode)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
#if FMSTR_MAX_APPCMD_CALLS > 0
    FMSTR_INDEX i;
    
    for(i=0; i<FMSTR_MAX_APPCMD_CALLS; i++)
 8000932:	2300      	movs	r3, #0
 8000934:	81fb      	strh	r3, [r7, #14]
 8000936:	e010      	b.n	800095a <FMSTR_FindAppCmdCallIndex+0x32>
    {
        if(pcm_pAppCmdCallId[i] == nAppcmdCode)
 8000938:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <FMSTR_FindAppCmdCallIndex+0x4c>)
 800093e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000942:	88fa      	ldrh	r2, [r7, #6]
 8000944:	429a      	cmp	r2, r3
 8000946:	d102      	bne.n	800094e <FMSTR_FindAppCmdCallIndex+0x26>
        {
            return i;
 8000948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800094c:	e00b      	b.n	8000966 <FMSTR_FindAppCmdCallIndex+0x3e>
    for(i=0; i<FMSTR_MAX_APPCMD_CALLS; i++)
 800094e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000952:	b29b      	uxth	r3, r3
 8000954:	3301      	adds	r3, #1
 8000956:	b29b      	uxth	r3, r3
 8000958:	81fb      	strh	r3, [r7, #14]
 800095a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800095e:	2b03      	cmp	r3, #3
 8000960:	ddea      	ble.n	8000938 <FMSTR_FindAppCmdCallIndex+0x10>
    /*lint -esym(528, FMSTR_FindAppCmdCallIndex) this function is 
      not referenced when APPCMD_CALLS are not used */
    FMSTR_UNUSED(nAppcmdCode);
#endif
        
    return -1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000966:	4618      	mov	r0, r3
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000074 	.word	0x20000074

08000978 <FMSTR_Init>:
* @brief    FreeMASTER driver initialization
*
******************************************************************************/

FMSTR_BOOL FMSTR_Init(void)
{   
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    FMSTR_InitTsa();
#endif

#if FMSTR_USE_SCOPE
    /* initialize Scope */
    FMSTR_InitScope();
 800097c:	f000 fe32 	bl	80015e4 <FMSTR_InitScope>
#endif

#if FMSTR_USE_RECORDER
    /* initialize Recorder */
    FMSTR_InitRec();
 8000980:	f000 faae 	bl	8000ee0 <FMSTR_InitRec>
#endif

#if FMSTR_USE_APPCMD
    /* initialize application commands */
    FMSTR_InitAppCmds();
 8000984:	f7ff feb4 	bl	80006f0 <FMSTR_InitAppCmds>
    FMSTR_InitPDBdm();
#endif  
    
#if FMSTR_USE_SERIAL
    /* initialize communication and start listening for commands */
    if (!FMSTR_InitSerial())
 8000988:	f001 f92a 	bl	8001be0 <FMSTR_InitSerial>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d101      	bne.n	8000996 <FMSTR_Init+0x1e>
        return FMSTR_FALSE;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <FMSTR_Init+0x20>
#if FMSTR_DEBUG_TX
    /* start in the debugging mode, we will be sending test frames periodically */
    pcm_bDebugTx = FMSTR_TRUE;
#endif

    return FMSTR_TRUE;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	bd80      	pop	{r7, pc}

0800099c <FMSTR_ProtocolDecoder>:
* in this call as well.
*
******************************************************************************/

FMSTR_BOOL FMSTR_ProtocolDecoder(FMSTR_BPTR pMessageIO)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponseEnd;
    FMSTR_U8 nCmd;
    
    /* no EX access by default */
    FMSTR_SetExAddr(FMSTR_FALSE);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff fe51 	bl	800064c <FMSTR_SetExAddr>
    
    /* command code comes first in the message */
    /*lint -e{534} return value is not used */
    (void)FMSTR_ValueFromBuffer8(&nCmd, pMessageIO);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	72bb      	strb	r3, [r7, #10]
    
    /* process command   */
    switch (nCmd)
 80009b0:	7abb      	ldrb	r3, [r7, #10]
 80009b2:	2b10      	cmp	r3, #16
 80009b4:	f300 8096 	bgt.w	8000ae4 <FMSTR_ProtocolDecoder+0x148>
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dc6b      	bgt.n	8000a94 <FMSTR_ProtocolDecoder+0xf8>
 80009bc:	e12a      	b.n	8000c14 <FMSTR_ProtocolDecoder+0x278>
 80009be:	3bc0      	subs	r3, #192	; 0xc0
 80009c0:	2b31      	cmp	r3, #49	; 0x31
 80009c2:	f200 8127 	bhi.w	8000c14 <FMSTR_ProtocolDecoder+0x278>
 80009c6:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <FMSTR_ProtocolDecoder+0x30>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	08000c0b 	.word	0x08000c0b
 80009d0:	08000b5d 	.word	0x08000b5d
 80009d4:	08000b67 	.word	0x08000b67
 80009d8:	08000b53 	.word	0x08000b53
 80009dc:	08000c15 	.word	0x08000c15
 80009e0:	08000b49 	.word	0x08000b49
 80009e4:	08000b9b 	.word	0x08000b9b
 80009e8:	08000c15 	.word	0x08000c15
 80009ec:	08000c15 	.word	0x08000c15
 80009f0:	08000b81 	.word	0x08000b81
 80009f4:	08000c15 	.word	0x08000c15
 80009f8:	08000c15 	.word	0x08000c15
 80009fc:	08000c15 	.word	0x08000c15
 8000a00:	08000c15 	.word	0x08000c15
 8000a04:	08000c15 	.word	0x08000c15
 8000a08:	08000c15 	.word	0x08000c15
 8000a0c:	08000af9 	.word	0x08000af9
 8000a10:	08000b0b 	.word	0x08000b0b
 8000a14:	08000b1d 	.word	0x08000b1d
 8000a18:	08000ba5 	.word	0x08000ba5
 8000a1c:	08000c15 	.word	0x08000c15
 8000a20:	08000c15 	.word	0x08000c15
 8000a24:	08000c15 	.word	0x08000c15
 8000a28:	08000c15 	.word	0x08000c15
 8000a2c:	08000c15 	.word	0x08000c15
 8000a30:	08000c15 	.word	0x08000c15
 8000a34:	08000c15 	.word	0x08000c15
 8000a38:	08000c15 	.word	0x08000c15
 8000a3c:	08000c15 	.word	0x08000c15
 8000a40:	08000c15 	.word	0x08000c15
 8000a44:	08000c15 	.word	0x08000c15
 8000a48:	08000c15 	.word	0x08000c15
 8000a4c:	08000af3 	.word	0x08000af3
 8000a50:	08000b05 	.word	0x08000b05
 8000a54:	08000b17 	.word	0x08000b17
 8000a58:	08000bcf 	.word	0x08000bcf
 8000a5c:	08000bdb 	.word	0x08000bdb
 8000a60:	08000bf3 	.word	0x08000bf3
 8000a64:	08000c15 	.word	0x08000c15
 8000a68:	08000c15 	.word	0x08000c15
 8000a6c:	08000c15 	.word	0x08000c15
 8000a70:	08000c15 	.word	0x08000c15
 8000a74:	08000c15 	.word	0x08000c15
 8000a78:	08000c15 	.word	0x08000c15
 8000a7c:	08000c15 	.word	0x08000c15
 8000a80:	08000c15 	.word	0x08000c15
 8000a84:	08000c15 	.word	0x08000c15
 8000a88:	08000c15 	.word	0x08000c15
 8000a8c:	08000be7 	.word	0x08000be7
 8000a90:	08000bff 	.word	0x08000bff
 8000a94:	3b01      	subs	r3, #1
 8000a96:	2b0f      	cmp	r3, #15
 8000a98:	f200 80bc 	bhi.w	8000c14 <FMSTR_ProtocolDecoder+0x278>
 8000a9c:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <FMSTR_ProtocolDecoder+0x108>)
 8000a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa2:	bf00      	nop
 8000aa4:	08000b2f 	.word	0x08000b2f
 8000aa8:	08000bb5 	.word	0x08000bb5
 8000aac:	08000bc5 	.word	0x08000bc5
 8000ab0:	08000b29 	.word	0x08000b29
 8000ab4:	08000baf 	.word	0x08000baf
 8000ab8:	08000bbf 	.word	0x08000bbf
 8000abc:	08000c15 	.word	0x08000c15
 8000ac0:	08000b3f 	.word	0x08000b3f
 8000ac4:	08000b77 	.word	0x08000b77
 8000ac8:	08000b39 	.word	0x08000b39
 8000acc:	08000b71 	.word	0x08000b71
 8000ad0:	08000c15 	.word	0x08000c15
 8000ad4:	08000c15 	.word	0x08000c15
 8000ad8:	08000c15 	.word	0x08000c15
 8000adc:	08000c15 	.word	0x08000c15
 8000ae0:	08000b91 	.word	0x08000b91
 8000ae4:	2bf1      	cmp	r3, #241	; 0xf1
 8000ae6:	f300 8095 	bgt.w	8000c14 <FMSTR_ProtocolDecoder+0x278>
 8000aea:	2bc0      	cmp	r3, #192	; 0xc0
 8000aec:	f6bf af67 	bge.w	80009be <FMSTR_ProtocolDecoder+0x22>
 8000af0:	e090      	b.n	8000c14 <FMSTR_ProtocolDecoder+0x278>
#if FMSTR_USE_READVAR

        /* read byte */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_READVAR8_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fdaa 	bl	800064c <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_READVAR8:
#endif          
            pResponseEnd = FMSTR_ReadVar(pMessageIO, 1U);
 8000af8:	2101      	movs	r1, #1
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f000 f938 	bl	8000d70 <FMSTR_ReadVar>
 8000b00:	60f8      	str	r0, [r7, #12]
            break;
 8000b02:	e08e      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>
            
        /* read word */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_READVAR16_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff fda1 	bl	800064c <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_READVAR16:
#endif
            pResponseEnd = FMSTR_ReadVar(pMessageIO, 2U);
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 f92f 	bl	8000d70 <FMSTR_ReadVar>
 8000b12:	60f8      	str	r0, [r7, #12]
            break;
 8000b14:	e085      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>
            
        /* read dword */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_READVAR32_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fd98 	bl	800064c <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_READVAR32:
#endif
            pResponseEnd = FMSTR_ReadVar(pMessageIO, 4U);
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 f926 	bl	8000d70 <FMSTR_ReadVar>
 8000b24:	60f8      	str	r0, [r7, #12]
            break;
 8000b26:	e07c      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>
#if FMSTR_USE_READMEM

        /* read a block of memory */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_READMEM_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f7ff fd8f 	bl	800064c <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_READMEM:
#endif
            pResponseEnd = FMSTR_ReadMem(pMessageIO);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 f8ee 	bl	8000d10 <FMSTR_ReadMem>
 8000b34:	60f8      	str	r0, [r7, #12]
            break;
 8000b36:	e074      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>
#if FMSTR_USE_SCOPE

        /* prepare scope variables */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_SETUPSCOPE_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fd87 	bl	800064c <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_SETUPSCOPE:
#endif
            pResponseEnd = FMSTR_SetUpScope(pMessageIO);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 fd58 	bl	80015f4 <FMSTR_SetUpScope>
 8000b44:	60f8      	str	r0, [r7, #12]
            break;  
 8000b46:	e06c      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>
            
        case FMSTR_CMD_READSCOPE:
            pResponseEnd = FMSTR_ReadScope(pMessageIO);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 fdad 	bl	80016a8 <FMSTR_ReadScope>
 8000b4e:	60f8      	str	r0, [r7, #12]
            break;
 8000b50:	e067      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>

#if FMSTR_USE_RECORDER

        /* get recorder status */
        case FMSTR_CMD_GETRECSTS:
            pResponseEnd = FMSTR_GetRecStatus(pMessageIO);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f000 fb8c 	bl	8001270 <FMSTR_GetRecStatus>
 8000b58:	60f8      	str	r0, [r7, #12]
            break;
 8000b5a:	e062      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>

        /* start recorder */
        case FMSTR_CMD_STARTREC:
            pResponseEnd = FMSTR_StartRec(pMessageIO);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 fb11 	bl	8001184 <FMSTR_StartRec>
 8000b62:	60f8      	str	r0, [r7, #12]
            break;
 8000b64:	e05d      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>

        /* stop recorder */
        case FMSTR_CMD_STOPREC:
            pResponseEnd = FMSTR_StopRec(pMessageIO);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f000 fb5a 	bl	8001220 <FMSTR_StopRec>
 8000b6c:	60f8      	str	r0, [r7, #12]
            break;
 8000b6e:	e058      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>

        /* setup recorder */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_SETUPREC_EX:                 
            FMSTR_SetExAddr(FMSTR_TRUE);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f7ff fd6b 	bl	800064c <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_SETUPREC:                    
#endif
            pResponseEnd = FMSTR_SetUpRec(pMessageIO);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 f9d2 	bl	8000f20 <FMSTR_SetUpRec>
 8000b7c:	60f8      	str	r0, [r7, #12]
            break;
 8000b7e:	e050      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>
            
        /* get recorder buffer information (force EX instead of non-EX) */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_GETRECBUFF_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f7ff fd63 	bl	800064c <FMSTR_SetExAddr>
#elif FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_GETRECBUFF:                  
#endif
            pResponseEnd = FMSTR_GetRecBuff(pMessageIO);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fba2 	bl	80012d0 <FMSTR_GetRecBuff>
 8000b8c:	60f8      	str	r0, [r7, #12]
            break; 
 8000b8e:	e048      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>
 
#if FMSTR_USE_APPCMD

        /* accept the application command */
        case FMSTR_CMD_SENDAPPCMD:
            pResponseEnd = FMSTR_StoreAppCmd(pMessageIO);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fddd 	bl	8000750 <FMSTR_StoreAppCmd>
 8000b96:	60f8      	str	r0, [r7, #12]
            break;
 8000b98:	e043      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>

        /* get the application command status */
        case FMSTR_CMD_GETAPPCMDSTS:
            pResponseEnd = FMSTR_GetAppCmdStatus(pMessageIO);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fe30 	bl	8000800 <FMSTR_GetAppCmdStatus>
 8000ba0:	60f8      	str	r0, [r7, #12]
            break;
 8000ba2:	e03e      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>

        /* get the application command data */
        case FMSTR_CMD_GETAPPCMDDATA:
            pResponseEnd = FMSTR_GetAppCmdRespData(pMessageIO);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fe6f 	bl	8000888 <FMSTR_GetAppCmdRespData>
 8000baa:	60f8      	str	r0, [r7, #12]
            break;
 8000bac:	e039      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>
#if FMSTR_USE_WRITEMEM

        /* write a block of memory */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_WRITEMEM_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff fd4c 	bl	800064c <FMSTR_SetExAddr>
#endif          
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_WRITEMEM:
#endif
            pResponseEnd = FMSTR_WriteMem(pMessageIO);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 f8fe 	bl	8000db6 <FMSTR_WriteMem>
 8000bba:	60f8      	str	r0, [r7, #12]
            break;
 8000bbc:	e031      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>
#if FMSTR_USE_WRITEMEMMASK

        /* write block of memory with a bit mask */
#if FMSTR_USE_EX_CMDS       
        case FMSTR_CMD_WRITEMEMMASK_EX:
            FMSTR_SetExAddr(FMSTR_TRUE);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff fd44 	bl	800064c <FMSTR_SetExAddr>
#endif
#if FMSTR_USE_NOEX_CMDS
        /*lint -fallthrough */
        case FMSTR_CMD_WRITEMEMMASK:
#endif
            pResponseEnd = FMSTR_WriteMemMask(pMessageIO);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 f940 	bl	8000e4a <FMSTR_WriteMemMask>
 8000bca:	60f8      	str	r0, [r7, #12]
            break;
 8000bcc:	e029      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>
            
#if FMSTR_USE_WRITEVAR && FMSTR_USE_NOEX_CMDS

        /* write byte */
        case FMSTR_CMD_WRITEVAR8:
            pResponseEnd = FMSTR_WriteVar(pMessageIO, 1U);
 8000bce:	2101      	movs	r1, #1
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 f917 	bl	8000e04 <FMSTR_WriteVar>
 8000bd6:	60f8      	str	r0, [r7, #12]
            break;
 8000bd8:	e023      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>

        /* write word */
        case FMSTR_CMD_WRITEVAR16:
            pResponseEnd = FMSTR_WriteVar(pMessageIO, 2U);
 8000bda:	2102      	movs	r1, #2
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f911 	bl	8000e04 <FMSTR_WriteVar>
 8000be2:	60f8      	str	r0, [r7, #12]
            break;
 8000be4:	e01d      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>

        /* write dword */
        case FMSTR_CMD_WRITEVAR32:
            pResponseEnd = FMSTR_WriteVar(pMessageIO, 4U);
 8000be6:	2104      	movs	r1, #4
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 f90b 	bl	8000e04 <FMSTR_WriteVar>
 8000bee:	60f8      	str	r0, [r7, #12]
            break;
 8000bf0:	e017      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>

#if FMSTR_USE_WRITEVARMASK && FMSTR_USE_NOEX_CMDS

        /* write byte with mask */
        case FMSTR_CMD_WRITEVAR8MASK:
            pResponseEnd = FMSTR_WriteVarMask(pMessageIO, 1U);
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f94f 	bl	8000e98 <FMSTR_WriteVarMask>
 8000bfa:	60f8      	str	r0, [r7, #12]
            break;
 8000bfc:	e011      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>

        /* write word with mask */
        case FMSTR_CMD_WRITEVAR16MASK:
            pResponseEnd = FMSTR_WriteVarMask(pMessageIO, 2U);
 8000bfe:	2102      	movs	r1, #2
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f949 	bl	8000e98 <FMSTR_WriteVarMask>
 8000c06:	60f8      	str	r0, [r7, #12]
            break;
 8000c08:	e00b      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>
        case FMSTR_CMD_GETINFOBRIEF:
#else   
        /* retrieve board information structure */
        case FMSTR_CMD_GETINFO: 
#endif
            pResponseEnd = FMSTR_GetBoardInfo(pMessageIO);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 f81e 	bl	8000c4c <FMSTR_GetBoardInfo>
 8000c10:	60f8      	str	r0, [r7, #12]
            break;
 8000c12:	e006      	b.n	8000c22 <FMSTR_ProtocolDecoder+0x286>
            break;
#endif /* FMSTR_USE_PIPES */

        /* unknown command */
        default:
            pResponseEnd = FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STC_INVCMD);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2281      	movs	r2, #129	; 0x81
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
            break;          
 8000c20:	bf00      	nop
    }
    
    /* anything to send back? */
    if(pResponseEnd != pMessageIO)
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d00a      	beq.n	8000c40 <FMSTR_ProtocolDecoder+0x2a4>
    {
        /*lint -e{946,960} subtracting pointers is appropriate here */
        FMSTR_SIZE8 nSize = (FMSTR_SIZE8)(pResponseEnd - pMessageIO);
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	72fb      	strb	r3, [r7, #11]
#if FMSTR_DEBUG_TX    
        /* the first sane frame received from PC Host ends test frame sending */
        pcm_bDebugTx = 0;
#endif
        FMSTR_SendResponse(pMessageIO, nSize);
 8000c32:	7afb      	ldrb	r3, [r7, #11]
 8000c34:	4619      	mov	r1, r3
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 fe5e 	bl	80018f8 <FMSTR_SendResponse>
        return FMSTR_TRUE;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e000      	b.n	8000c42 <FMSTR_ProtocolDecoder+0x2a6>
    }
    else
    {
        /* nothing sent out */
        return FMSTR_FALSE;
 8000c40:	2300      	movs	r3, #0
    }
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop

08000c4c <FMSTR_GetBoardInfo>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetBoardInfo(FMSTR_BPTR pMessageIO)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	617b      	str	r3, [r7, #20]
    FMSTR_U16 wTmp;
    FMSTR_U8 *pStr;

    pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);              
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_PROT_VER));            /* protVer */
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2203      	movs	r2, #3
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_CFG_FLAGS));           /* cfgFlags */
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_CFG_BUS_WIDTH));       /* dataBusWdt */
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_GLOB_VERSION_MAJOR));  /* globVerMajor */
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	701a      	strb	r2, [r3, #0]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_GLOB_VERSION_MINOR));  /* globVerMinor */
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer8(pResponse, (FMSTR_U8)(FMSTR_COMM_BUFFER_SIZE));    /* cmdBuffSize  */
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	223c      	movs	r2, #60	; 0x3c
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]

    /* recorder buffer size is always measured in bytes */
#if FMSTR_REC_LARGE_MODE
    wTmp = FMSTR_GetRecBuffSize()/64;
#else
    wTmp = FMSTR_GetRecBuffSize();
 8000cac:	f000 fb06 	bl	80012bc <FMSTR_GetRecBuffSize>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	827b      	strh	r3, [r7, #18]
#endif
    wTmp *= FMSTR_CFG_BUS_WIDTH;

    /* send size and timebase    */
    pResponse = FMSTR_ValueToBuffer16(pResponse, wTmp);
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	8a7a      	ldrh	r2, [r7, #18]
 8000cb8:	801a      	strh	r2, [r3, #0]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	617b      	str	r3, [r7, #20]
    pResponse = FMSTR_ConstToBuffer16(pResponse, (FMSTR_U16) FMSTR_REC_TIMEBASE);
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f248 02c8 	movw	r2, #32968	; 0x80c8
 8000cc6:	801a      	strh	r2, [r3, #0]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	617b      	str	r3, [r7, #20]
#if FMSTR_LIGHT_VERSION
FMSTR_UNUSED(pStr);
    pResponse = FMSTR_SkipInBuffer(pResponse, (FMSTR_U8)FMSTR_DESCR_SIZE);
#else
    /* description string */
    pStr = (FMSTR_U8*)  FMSTR_IDT_STRING;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <FMSTR_GetBoardInfo+0xc0>)
 8000cd0:	60fb      	str	r3, [r7, #12]
    for(wTmp = 0U; wTmp < (FMSTR_U8)(FMSTR_DESCR_SIZE); wTmp++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	827b      	strh	r3, [r7, #18]
 8000cd6:	e010      	b.n	8000cfa <FMSTR_GetBoardInfo+0xae>
    {
        pResponse = FMSTR_ValueToBuffer8(pResponse, *pStr);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]

        /* terminating zero used to clear the remainder of the buffer */        
        if(*pStr)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <FMSTR_GetBoardInfo+0xa8>
        {
            pStr ++;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
    for(wTmp = 0U; wTmp < (FMSTR_U8)(FMSTR_DESCR_SIZE); wTmp++)
 8000cf4:	8a7b      	ldrh	r3, [r7, #18]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	827b      	strh	r3, [r7, #18]
 8000cfa:	8a7b      	ldrh	r3, [r7, #18]
 8000cfc:	2b18      	cmp	r3, #24
 8000cfe:	d9eb      	bls.n	8000cd8 <FMSTR_GetBoardInfo+0x8c>
    }
#endif /* SEND_IDT_STRING */
    
#endif /* FMSTR_USE_BRIEFINFO */

    return pResponse;   
 8000d00:	697b      	ldr	r3, [r7, #20]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	08005f50 	.word	0x08005f50

08000d10 <FMSTR_ReadMem>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_ReadMem(FMSTR_BPTR pMessageIO)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nSize;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3302      	adds	r3, #2
 8000d20:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nSize, pMessageIO);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fcb9 	bl	80006ac <FMSTR_AddressFromBuffer>
 8000d3a:	6078      	str	r0, [r7, #4]
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_EACCESS);
    }
#endif

    /* check the response will safely fit into comm buffer */
    if(nSize > (FMSTR_U8)FMSTR_COMM_BUFFER_SIZE)
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	2b3c      	cmp	r3, #60	; 0x3c
 8000d40:	d905      	bls.n	8000d4e <FMSTR_ReadMem+0x3e>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_RSPBUFFOVF);
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2284      	movs	r2, #132	; 0x84
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	e00c      	b.n	8000d68 <FMSTR_ReadMem+0x58>
    }
    
    /* success  */
    pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3301      	adds	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
    
    return FMSTR_CopyToBuffer(pResponse, nAddr, (FMSTR_SIZE8) nSize);
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	7bfa      	ldrb	r2, [r7, #15]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	6978      	ldr	r0, [r7, #20]
 8000d62:	f7ff fbf5 	bl	8000550 <FMSTR_CopyToBuffer>
 8000d66:	4603      	mov	r3, r0
}   
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <FMSTR_ReadVar>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_ReadVar(FMSTR_BPTR pMessageIO, FMSTR_SIZE8 nSize)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
    FMSTR_BPTR pResponse = pMessageIO;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	60fb      	str	r3, [r7, #12]
    FMSTR_ADDR nAddr;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3301      	adds	r3, #1
 8000d84:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fc8d 	bl	80006ac <FMSTR_AddressFromBuffer>
 8000d92:	6078      	str	r0, [r7, #4]
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_EACCESS);
    }
#endif

    /* success  */
    pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
    
    return FMSTR_CopyToBuffer(pResponse, nAddr, nSize);
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	78fa      	ldrb	r2, [r7, #3]
 8000da4:	4619      	mov	r1, r3
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f7ff fbd2 	bl	8000550 <FMSTR_CopyToBuffer>
 8000dac:	4603      	mov	r3, r0
}   
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <FMSTR_WriteMem>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_WriteMem(FMSTR_BPTR pMessageIO)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nSize,nResponseCode;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nSize, pMessageIO);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	72fb      	strb	r3, [r7, #11]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fc66 	bl	80006ac <FMSTR_AddressFromBuffer>
 8000de0:	6078      	str	r0, [r7, #4]
        goto FMSTR_WriteMem_exit;
    }
#endif

    /*lint -e{534} ignoring function return value */
    FMSTR_CopyFromBuffer(nAddr, pMessageIO, (FMSTR_SIZE8) nSize);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	7afa      	ldrb	r2, [r7, #11]
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fbd1 	bl	8000590 <FMSTR_CopyFromBuffer>
    nResponseCode = FMSTR_STS_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	74fb      	strb	r3, [r7, #19]

#if FMSTR_USE_TSA && FMSTR_USE_TSA_SAFETY
FMSTR_WriteMem_exit:
#endif      
      
    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	7cfa      	ldrb	r2, [r7, #19]
 8000df6:	701a      	strb	r2, [r3, #0]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3301      	adds	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <FMSTR_WriteVar>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_WriteVar(FMSTR_BPTR pMessageIO, FMSTR_SIZE8 nSize)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	70fb      	strb	r3, [r7, #3]
    FMSTR_BPTR pResponse = pMessageIO;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nResponseCode;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3301      	adds	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fc43 	bl	80006ac <FMSTR_AddressFromBuffer>
 8000e26:	6078      	str	r0, [r7, #4]
        goto FMSTR_WriteVar_exit;
    }
#endif

    /*lint -e{534} ignoring function return value */
    FMSTR_CopyFromBuffer(nAddr, pMessageIO, nSize);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	78fa      	ldrb	r2, [r7, #3]
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fbae 	bl	8000590 <FMSTR_CopyFromBuffer>
    nResponseCode = FMSTR_STS_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	74fb      	strb	r3, [r7, #19]

#if FMSTR_USE_TSA && FMSTR_USE_TSA_SAFETY
FMSTR_WriteVar_exit:
#endif
      
    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	7cfa      	ldrb	r2, [r7, #19]
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <FMSTR_WriteMemMask>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_WriteMemMask(FMSTR_BPTR pMessageIO)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nSize,nResponseCode;

    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3302      	adds	r3, #2
 8000e5a:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&nSize, pMessageIO);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	72fb      	strb	r3, [r7, #11]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3301      	adds	r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fc1c 	bl	80006ac <FMSTR_AddressFromBuffer>
 8000e74:	6078      	str	r0, [r7, #4]
        goto FMSTR_WriteMemMask_exit;
    }
#endif

    /* put the data */
    FMSTR_CopyFromBufferWithMask(nAddr, pMessageIO, (FMSTR_SIZE8)nSize);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	7afa      	ldrb	r2, [r7, #11]
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fba7 	bl	80005d0 <FMSTR_CopyFromBufferWithMask>
    nResponseCode = FMSTR_STS_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	74fb      	strb	r3, [r7, #19]

#if (FMSTR_USE_TSA && FMSTR_USE_TSA_SAFETY) || (FMSTR_CFG_BUS_WIDTH > 1U)
FMSTR_WriteMemMask_exit:
#endif  
      
    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	7cfa      	ldrb	r2, [r7, #19]
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	3301      	adds	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <FMSTR_WriteVarMask>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_WriteVarMask(FMSTR_BPTR pMessageIO, FMSTR_SIZE8 nSize)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
    FMSTR_BPTR pResponse = pMessageIO;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	617b      	str	r3, [r7, #20]
    FMSTR_ADDR nAddr;
    FMSTR_U8 nResponseCode;
    
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fbf9 	bl	80006ac <FMSTR_AddressFromBuffer>
 8000eba:	6078      	str	r0, [r7, #4]
        goto FMSTR_WriteVarMask_exit;
    }
#endif

    /* put the data */
    FMSTR_CopyFromBufferWithMask(nAddr, pMessageIO, nSize);         
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fb84 	bl	80005d0 <FMSTR_CopyFromBufferWithMask>
    nResponseCode = FMSTR_STS_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	74fb      	strb	r3, [r7, #19]

#if FMSTR_USE_TSA && FMSTR_USE_TSA_SAFETY
FMSTR_WriteVarMask_exit:
#endif      

    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	7cfa      	ldrb	r2, [r7, #19]
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <FMSTR_InitRec>:
* @brief    Recorder Initialization
*
******************************************************************************/

void FMSTR_InitRec(void)
{   
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
    /* initialize Recorder flags*/
    pcm_wRecFlags.all = 0U;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <FMSTR_InitRec+0x1c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
#elif FMSTR_USE_FASTREC
    /* Initialize Fast Recorder Buffer  */
    FMSTR_InitFastRec();
#else
    /* size in native sizeof units (=bytes on most platforms) */
    FMSTR_ARR2ADDR(pcm_nRecBuffAddr, pcm_pOwnRecBuffer);
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <FMSTR_InitRec+0x20>)
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <FMSTR_InitRec+0x24>)
 8000eee:	601a      	str	r2, [r3, #0]
    
    /*lint -esym(528, pcm_pOwnRecBuffer) this symbol is used outside of lint sight */
#endif

}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20003164 	.word	0x20003164
 8000f00:	200000a0 	.word	0x200000a0
 8000f04:	20000098 	.word	0x20000098

08000f08 <FMSTR_AbortRec>:
* @brief    Abort and de-initialize recorder
*
******************************************************************************/

static void FMSTR_AbortRec(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
    /* clear flags */
    pcm_wRecFlags.all = 0U;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <FMSTR_AbortRec+0x14>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	20003164 	.word	0x20003164

08000f20 <FMSTR_SetUpRec>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_SetUpRec(FMSTR_BPTR pMessageIO)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	613b      	str	r3, [r7, #16]
    FMSTR_SIZE_RECBUFF blen;
    FMSTR_U8 i, sz;
    FMSTR_U8 nResponseCode;
    
    /* de-initialize first   */
    FMSTR_AbortRec();
 8000f2c:	f7ff ffec 	bl	8000f08 <FMSTR_AbortRec>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVBUFF);
    }
#elif (FMSTR_USE_FASTREC) == 0
    /* size in native sizeof units (=bytes on most platforms) */
    FMSTR_ARR2ADDR(pcm_nRecBuffAddr, pcm_pOwnRecBuffer);
 8000f30:	4a6f      	ldr	r2, [pc, #444]	; (80010f0 <FMSTR_SetUpRec+0x1d0>)
 8000f32:	4b70      	ldr	r3, [pc, #448]	; (80010f4 <FMSTR_SetUpRec+0x1d4>)
 8000f34:	601a      	str	r2, [r3, #0]
#endif

    /* seek the setup data */
#if (FMSTR_USE_FASTREC) == 0
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3302      	adds	r3, #2
 8000f3a:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&pcm_nRecTriggerMode, pMessageIO);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	781a      	ldrb	r2, [r3, #0]
 8000f40:	4b6d      	ldr	r3, [pc, #436]	; (80010f8 <FMSTR_SetUpRec+0x1d8>)
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3301      	adds	r3, #1
 8000f48:	607b      	str	r3, [r7, #4]
#else /* (FMSTR_USE_FASTREC) == 0 */
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 3U);
#endif /* (FMSTR_USE_FASTREC) == 0 */

    pMessageIO = FMSTR_ValueFromBuffer16(&pcm_wRecTotalSmps, pMessageIO);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	881a      	ldrh	r2, [r3, #0]
 8000f4e:	4b6b      	ldr	r3, [pc, #428]	; (80010fc <FMSTR_SetUpRec+0x1dc>)
 8000f50:	801a      	strh	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3302      	adds	r3, #2
 8000f56:	607b      	str	r3, [r7, #4]

#if (FMSTR_REC_STATIC_POSTTRIG) == 0
    pMessageIO = FMSTR_ValueFromBuffer16(&pcm_wRecPostTrigger, pMessageIO);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	881a      	ldrh	r2, [r3, #0]
 8000f5c:	4b68      	ldr	r3, [pc, #416]	; (8001100 <FMSTR_SetUpRec+0x1e0>)
 8000f5e:	801a      	strh	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3302      	adds	r3, #2
 8000f64:	607b      	str	r3, [r7, #4]
#else /* (FMSTR_REC_STATIC_POSTTRIG) == 0 */
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
#endif /* (FMSTR_REC_STATIC_POSTTRIG) == 0 */

#if (FMSTR_REC_STATIC_DIVISOR) == 0
    pMessageIO = FMSTR_ValueFromBuffer16(&pcm_wRecTimeDiv, pMessageIO);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	881a      	ldrh	r2, [r3, #0]
 8000f6a:	4b66      	ldr	r3, [pc, #408]	; (8001104 <FMSTR_SetUpRec+0x1e4>)
 8000f6c:	801a      	strh	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3302      	adds	r3, #2
 8000f72:	607b      	str	r3, [r7, #4]
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
#endif /* (FMSTR_REC_STATIC_DIVISOR) == 0 */

#if (FMSTR_USE_FASTREC) == 0
    /* address & size of trigger variable */
    pMessageIO = FMSTR_AddressFromBuffer(&pcm_nTrgVarAddr, pMessageIO);
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4864      	ldr	r0, [pc, #400]	; (8001108 <FMSTR_SetUpRec+0x1e8>)
 8000f78:	f7ff fb98 	bl	80006ac <FMSTR_AddressFromBuffer>
 8000f7c:	6078      	str	r0, [r7, #4]
    pMessageIO = FMSTR_ValueFromBuffer8(&pcm_nTrgVarSize, pMessageIO);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	4b62      	ldr	r3, [pc, #392]	; (800110c <FMSTR_SetUpRec+0x1ec>)
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]

    /* trigger compare mode  */
    pMessageIO = FMSTR_ValueFromBuffer8(&pcm_bTrgVarSigned, pMessageIO);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	4b5f      	ldr	r3, [pc, #380]	; (8001110 <FMSTR_SetUpRec+0x1f0>)
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3301      	adds	r3, #1
 8000f98:	607b      	str	r3, [r7, #4]

    /* threshold value  */
    pMessageIO = FMSTR_ValueFromBuffer32(&pcm_uTrgThreshold.u32, pMessageIO);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a5d      	ldr	r2, [pc, #372]	; (8001114 <FMSTR_SetUpRec+0x1f4>)
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	607b      	str	r3, [r7, #4]
#else /* (FMSTR_USE_FASTREC) == 0 */
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 8U);
#endif /* (FMSTR_USE_FASTREC) == 0 */
    
    /* recorder variable count */
    pMessageIO = FMSTR_ValueFromBuffer8(&pcm_nRecVarCount, pMessageIO);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781a      	ldrb	r2, [r3, #0]
 8000fac:	4b5a      	ldr	r3, [pc, #360]	; (8001118 <FMSTR_SetUpRec+0x1f8>)
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]

    /* rec variable information must fit into our buffers */
    if((!pcm_nRecVarCount) || (pcm_nRecVarCount > (FMSTR_U8)FMSTR_MAX_REC_VARS))
 8000fb6:	4b58      	ldr	r3, [pc, #352]	; (8001118 <FMSTR_SetUpRec+0x1f8>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <FMSTR_SetUpRec+0xa6>
 8000fbe:	4b56      	ldr	r3, [pc, #344]	; (8001118 <FMSTR_SetUpRec+0x1f8>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d902      	bls.n	8000fcc <FMSTR_SetUpRec+0xac>
    {
#if FMSTR_REC_COMMON_ERR_CODES
        goto FMSTR_SetUpRec_exit_error;
#else
        nResponseCode = FMSTR_STC_INVBUFF;
 8000fc6:	2385      	movs	r3, #133	; 0x85
 8000fc8:	757b      	strb	r3, [r7, #21]
        goto FMSTR_SetUpRec_exit;
 8000fca:	e087      	b.n	80010dc <FMSTR_SetUpRec+0x1bc>
#endif
    }

    /* calculate sum of sizes of all variables */
    nRecVarsetSize = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	75fb      	strb	r3, [r7, #23]

    /* get all addresses and sizes */
    for(i=0U; i<pcm_nRecVarCount; i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	75bb      	strb	r3, [r7, #22]
 8000fd4:	e022      	b.n	800101c <FMSTR_SetUpRec+0xfc>
    {
        /* variable size */
        pMessageIO = FMSTR_ValueFromBuffer8(&sz, pMessageIO);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	737b      	strb	r3, [r7, #13]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	607b      	str	r3, [r7, #4]
        
        pcm_pRecVarSize[i] = sz;
 8000fe2:	7dbb      	ldrb	r3, [r7, #22]
 8000fe4:	7b79      	ldrb	r1, [r7, #13]
 8000fe6:	4a4d      	ldr	r2, [pc, #308]	; (800111c <FMSTR_SetUpRec+0x1fc>)
 8000fe8:	54d1      	strb	r1, [r2, r3]
        nRecVarsetSize += sz;
 8000fea:	7b7a      	ldrb	r2, [r7, #13]
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	4413      	add	r3, r2
 8000ff0:	75fb      	strb	r3, [r7, #23]
        
        /* variable address */
        pMessageIO = FMSTR_AddressFromBuffer(&pcm_pRecVarAddr[i], pMessageIO);
 8000ff2:	7dbb      	ldrb	r3, [r7, #22]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4a4a      	ldr	r2, [pc, #296]	; (8001120 <FMSTR_SetUpRec+0x200>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fb55 	bl	80006ac <FMSTR_AddressFromBuffer>
 8001002:	6078      	str	r0, [r7, #4]

        /* valid numeric variable sizes only */
        if((sz == 0U) || (sz > 8U))
 8001004:	7b7b      	ldrb	r3, [r7, #13]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <FMSTR_SetUpRec+0xf0>
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	2b08      	cmp	r3, #8
 800100e:	d902      	bls.n	8001016 <FMSTR_SetUpRec+0xf6>
        {
#if FMSTR_REC_COMMON_ERR_CODES
            goto FMSTR_SetUpRec_exit_error;
#else
            nResponseCode = FMSTR_STC_INVSIZE;
 8001010:	2386      	movs	r3, #134	; 0x86
 8001012:	757b      	strb	r3, [r7, #21]
            goto FMSTR_SetUpRec_exit;
 8001014:	e062      	b.n	80010dc <FMSTR_SetUpRec+0x1bc>
    for(i=0U; i<pcm_nRecVarCount; i++)
 8001016:	7dbb      	ldrb	r3, [r7, #22]
 8001018:	3301      	adds	r3, #1
 800101a:	75bb      	strb	r3, [r7, #22]
 800101c:	4b3e      	ldr	r3, [pc, #248]	; (8001118 <FMSTR_SetUpRec+0x1f8>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	7dba      	ldrb	r2, [r7, #22]
 8001022:	429a      	cmp	r2, r3
 8001024:	d3d7      	bcc.n	8000fd6 <FMSTR_SetUpRec+0xb6>
    }

    /* fast recorder handles trigger by itself */
#if (FMSTR_USE_FASTREC) == 0
    /* any trigger? */
    pcm_pCompareFunc = NULL;
 8001026:	4b3f      	ldr	r3, [pc, #252]	; (8001124 <FMSTR_SetUpRec+0x204>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
    if(pcm_nRecTriggerMode)
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <FMSTR_SetUpRec+0x1d8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d034      	beq.n	800109e <FMSTR_SetUpRec+0x17e>
        {
            pcm_pCompareFunc = FMSTR_Comparefloat;
        }
        else
#else
        if(pcm_bTrgVarSigned&FMSTR_REC_FLOAT_TRIG_MASK)
 8001034:	4b36      	ldr	r3, [pc, #216]	; (8001110 <FMSTR_SetUpRec+0x1f0>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <FMSTR_SetUpRec+0x126>
        {
#if FMSTR_REC_COMMON_ERR_CODES
            goto FMSTR_SetUpRec_exit_error;
#else
            nResponseCode = FMSTR_STC_FLOATDISABLED;
 8001040:	2390      	movs	r3, #144	; 0x90
 8001042:	757b      	strb	r3, [r7, #21]
            goto FMSTR_SetUpRec_exit;
 8001044:	e04a      	b.n	80010dc <FMSTR_SetUpRec+0x1bc>
#endif
        }
#endif
        {
        switch(pcm_nTrgVarSize)
 8001046:	4b31      	ldr	r3, [pc, #196]	; (800110c <FMSTR_SetUpRec+0x1ec>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b04      	cmp	r3, #4
 800104c:	d01a      	beq.n	8001084 <FMSTR_SetUpRec+0x164>
 800104e:	2b04      	cmp	r3, #4
 8001050:	dc22      	bgt.n	8001098 <FMSTR_SetUpRec+0x178>
 8001052:	2b01      	cmp	r3, #1
 8001054:	d002      	beq.n	800105c <FMSTR_SetUpRec+0x13c>
 8001056:	2b02      	cmp	r3, #2
 8001058:	d00a      	beq.n	8001070 <FMSTR_SetUpRec+0x150>
 800105a:	e01d      	b.n	8001098 <FMSTR_SetUpRec+0x178>
        {
#if FMSTR_CFG_BUS_WIDTH == 1U
        case 1: pcm_pCompareFunc = pcm_bTrgVarSigned ? FMSTR_Compare8S : FMSTR_Compare8U; break;
 800105c:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <FMSTR_SetUpRec+0x1f0>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <FMSTR_SetUpRec+0x148>
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <FMSTR_SetUpRec+0x208>)
 8001066:	e000      	b.n	800106a <FMSTR_SetUpRec+0x14a>
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <FMSTR_SetUpRec+0x20c>)
 800106a:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <FMSTR_SetUpRec+0x204>)
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e017      	b.n	80010a0 <FMSTR_SetUpRec+0x180>
#endif
        case 2: pcm_pCompareFunc = pcm_bTrgVarSigned ? FMSTR_Compare16S : FMSTR_Compare16U; break;
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <FMSTR_SetUpRec+0x1f0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <FMSTR_SetUpRec+0x15c>
 8001078:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <FMSTR_SetUpRec+0x210>)
 800107a:	e000      	b.n	800107e <FMSTR_SetUpRec+0x15e>
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <FMSTR_SetUpRec+0x214>)
 800107e:	4a29      	ldr	r2, [pc, #164]	; (8001124 <FMSTR_SetUpRec+0x204>)
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e00d      	b.n	80010a0 <FMSTR_SetUpRec+0x180>
        case 4: pcm_pCompareFunc = pcm_bTrgVarSigned ? FMSTR_Compare32S : FMSTR_Compare32U; break;
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <FMSTR_SetUpRec+0x1f0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <FMSTR_SetUpRec+0x170>
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <FMSTR_SetUpRec+0x218>)
 800108e:	e000      	b.n	8001092 <FMSTR_SetUpRec+0x172>
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <FMSTR_SetUpRec+0x21c>)
 8001092:	4a24      	ldr	r2, [pc, #144]	; (8001124 <FMSTR_SetUpRec+0x204>)
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e003      	b.n	80010a0 <FMSTR_SetUpRec+0x180>
        /* invalid trigger variable size  */
        default:
#if FMSTR_REC_COMMON_ERR_CODES
            goto FMSTR_SetUpRec_exit_error;
#else
            nResponseCode = FMSTR_STC_INVSIZE;
 8001098:	2386      	movs	r3, #134	; 0x86
 800109a:	757b      	strb	r3, [r7, #21]
            goto FMSTR_SetUpRec_exit;
 800109c:	e01e      	b.n	80010dc <FMSTR_SetUpRec+0x1bc>
#endif
            }
        }
 800109e:	bf00      	nop
    }
#endif /* (FMSTR_USE_FASTREC) == 0 */
    
    /* total recorder buffer length in native sizeof units (=bytes on most platforms) */
    blen = (FMSTR_SIZE_RECBUFF) (pcm_wRecTotalSmps * nRecVarsetSize / FMSTR_CFG_BUS_WIDTH);
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <FMSTR_SetUpRec+0x1dc>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	fb12 f303 	smulbb	r3, r2, r3
 80010ac:	81fb      	strh	r3, [r7, #14]

    /* recorder memory available? */
    if(blen > FMSTR_GetRecBuffSize())
 80010ae:	f000 f905 	bl	80012bc <FMSTR_GetRecBuffSize>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d902      	bls.n	80010c2 <FMSTR_SetUpRec+0x1a2>
    {
#if FMSTR_REC_COMMON_ERR_CODES
        goto FMSTR_SetUpRec_exit_error;
#else
        nResponseCode = FMSTR_STC_INVSIZE;
 80010bc:	2386      	movs	r3, #134	; 0x86
 80010be:	757b      	strb	r3, [r7, #21]
        goto FMSTR_SetUpRec_exit;
 80010c0:	e00c      	b.n	80010dc <FMSTR_SetUpRec+0x1bc>
#endif
    }

#if (FMSTR_USE_FASTREC) == 0
    /* remember the effective end of circular buffer */
    pcm_dwRecEndBuffPtr = pcm_nRecBuffAddr + blen;
 80010c2:	89fa      	ldrh	r2, [r7, #14]
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <FMSTR_SetUpRec+0x1d4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <FMSTR_SetUpRec+0x220>)
 80010cc:	6013      	str	r3, [r2, #0]
#endif /* FMSTR_REC_COMMON_ERR_CODES */
    }
#endif /* FMSTR_USE_FASTREC */

    /* everything is okay    */
    pcm_wRecFlags.flg.bIsConfigured = 1U;
 80010ce:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <FMSTR_SetUpRec+0x224>)
 80010d0:	7813      	ldrb	r3, [r2, #0]
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	7013      	strb	r3, [r2, #0]
    nResponseCode = FMSTR_STS_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	757b      	strb	r3, [r7, #21]
    goto FMSTR_SetUpRec_exit;
FMSTR_SetUpRec_exit_error:
    nResponseCode = FMSTR_STC_INVSIZE;
#endif
FMSTR_SetUpRec_exit:
    return FMSTR_ConstToBuffer8(pResponse, nResponseCode);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	7d7a      	ldrb	r2, [r7, #21]
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	3301      	adds	r3, #1
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000a0 	.word	0x200000a0
 80010f4:	20000098 	.word	0x20000098
 80010f8:	20003160 	.word	0x20003160
 80010fc:	20003158 	.word	0x20003158
 8001100:	2000316a 	.word	0x2000316a
 8001104:	20003168 	.word	0x20003168
 8001108:	2000008c 	.word	0x2000008c
 800110c:	20000090 	.word	0x20000090
 8001110:	20000091 	.word	0x20000091
 8001114:	20000094 	.word	0x20000094
 8001118:	2000315a 	.word	0x2000315a
 800111c:	20003150 	.word	0x20003150
 8001120:	20003128 	.word	0x20003128
 8001124:	2000009c 	.word	0x2000009c
 8001128:	0800134d 	.word	0x0800134d
 800112c:	0800137d 	.word	0x0800137d
 8001130:	080013a9 	.word	0x080013a9
 8001134:	080013d9 	.word	0x080013d9
 8001138:	08001405 	.word	0x08001405
 800113c:	08001431 	.word	0x08001431
 8001140:	2000314c 	.word	0x2000314c
 8001144:	20003164 	.word	0x20003164

08001148 <FMSTR_TriggerRec>:
* This function starts the post-trigger stop countdown
*
******************************************************************************/

void FMSTR_TriggerRec(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
    if(!pcm_wRecFlags.flg.bIsStopping)
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <FMSTR_TriggerRec+0x30>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d108      	bne.n	800116c <FMSTR_TriggerRec+0x24>
    {
        pcm_wRecFlags.flg.bIsStopping = 1U;
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <FMSTR_TriggerRec+0x30>)
 800115c:	7813      	ldrb	r3, [r2, #0]
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	7013      	strb	r3, [r2, #0]
#if (FMSTR_REC_STATIC_POSTTRIG) == 0
        pcm_wStoprecCountDown = pcm_wRecPostTrigger;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <FMSTR_TriggerRec+0x34>)
 8001166:	881a      	ldrh	r2, [r3, #0]
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <FMSTR_TriggerRec+0x38>)
 800116a:	801a      	strh	r2, [r3, #0]
#else
        pcm_wStoprecCountDown = FMSTR_REC_STATIC_POSTTRIG;
#endif
    }
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20003164 	.word	0x20003164
 800117c:	2000316a 	.word	0x2000316a
 8001180:	2000315e 	.word	0x2000315e

08001184 <FMSTR_StartRec>:
* and flags)
*
******************************************************************************/

FMSTR_BPTR FMSTR_StartRec(FMSTR_BPTR pMessageIO)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
     FMSTR_U8 nResponseCode;   
    /* must be configured */
    if(!pcm_wRecFlags.flg.bIsConfigured)
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <FMSTR_StartRec+0x88>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <FMSTR_StartRec+0x1c>
    {
#if FMSTR_REC_COMMON_ERR_CODES
        goto FMSTR_StartRec_exit_error;
#else
        nResponseCode = FMSTR_STC_NOTINIT;
 800119a:	2388      	movs	r3, #136	; 0x88
 800119c:	73fb      	strb	r3, [r7, #15]
        goto FMSTR_StartRec_exit;
 800119e:	e029      	b.n	80011f4 <FMSTR_StartRec+0x70>
#endif
    }
        
    /* already running ? */
    if(pcm_wRecFlags.flg.bIsRunning)
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <FMSTR_StartRec+0x88>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <FMSTR_StartRec+0x30>
    {
#if FMSTR_REC_COMMON_ERR_CODES
        goto FMSTR_StartRec_exit_error;
#else
        nResponseCode = FMSTR_STS_RECRUN;
 80011ae:	2301      	movs	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
        goto FMSTR_StartRec_exit;
 80011b2:	e01f      	b.n	80011f4 <FMSTR_StartRec+0x70>
#endif
    }

#if (FMSTR_USE_FASTREC) == 0
    /* initialize write pointer */
    pcm_dwRecWritePtr = pcm_nRecBuffAddr;
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <FMSTR_StartRec+0x8c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a16      	ldr	r2, [pc, #88]	; (8001214 <FMSTR_StartRec+0x90>)
 80011ba:	6013      	str	r3, [r2, #0]

    /* current (first) sample index */
    pcm_wRecBuffStartIx = 0U;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <FMSTR_StartRec+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
#endif /* (FMSTR_USE_FASTREC) == 0 */

    /* initialize time divisor */
#if (FMSTR_REC_STATIC_DIVISOR) != 1
    pcm_wRecTimeDivCtr = 0U;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <FMSTR_StartRec+0x98>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	801a      	strh	r2, [r3, #0]
#endif

    /* initiate virgin cycle */
    pcm_wRecFlags.flg.bIsStopping = 0U;          /* no trigger active */
 80011c8:	4a10      	ldr	r2, [pc, #64]	; (800120c <FMSTR_StartRec+0x88>)
 80011ca:	7813      	ldrb	r3, [r2, #0]
 80011cc:	f36f 0382 	bfc	r3, #2, #1
 80011d0:	7013      	strb	r3, [r2, #0]
    pcm_wRecFlags.flg.bTrgCrossActive = 0U;      /* waiting for threshold crossing */
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <FMSTR_StartRec+0x88>)
 80011d4:	7813      	ldrb	r3, [r2, #0]
 80011d6:	f36f 1304 	bfc	r3, #4, #1
 80011da:	7013      	strb	r3, [r2, #0]
    pcm_wRecFlags.flg.bInvirginCycle = 1U;       /* initial cycle */
 80011dc:	4a0b      	ldr	r2, [pc, #44]	; (800120c <FMSTR_StartRec+0x88>)
 80011de:	7813      	ldrb	r3, [r2, #0]
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	7013      	strb	r3, [r2, #0]
#if FMSTR_USE_FASTREC
    FMSTR_StartFastRec();
#endif /* (MSTR_USE_FASTREC */

    /* run now */
    pcm_wRecFlags.flg.bIsRunning = 1U;           /* is running now! */
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <FMSTR_StartRec+0x88>)
 80011e8:	7813      	ldrb	r3, [r2, #0]
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	7013      	strb	r3, [r2, #0]

    nResponseCode = FMSTR_STS_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
FMSTR_StartRec_exit_error:
    nResponseCode = FMSTR_STC_NOTINIT;
#endif

FMSTR_StartRec_exit:
    return FMSTR_ConstToBuffer8(pMessageIO, nResponseCode);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3301      	adds	r3, #1
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20003164 	.word	0x20003164
 8001210:	20000098 	.word	0x20000098
 8001214:	2000316c 	.word	0x2000316c
 8001218:	20003148 	.word	0x20003148
 800121c:	2000315c 	.word	0x2000315c

08001220 <FMSTR_StopRec>:
* This function stops recording (same as manual trigger)
*
******************************************************************************/

FMSTR_BPTR FMSTR_StopRec(FMSTR_BPTR pMessageIO)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    FMSTR_U8 nResponseCode;
    /* must be configured */
    if(!pcm_wRecFlags.flg.bIsConfigured)
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <FMSTR_StopRec+0x4c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <FMSTR_StopRec+0x1c>
    {
        nResponseCode = FMSTR_STC_NOTINIT;
 8001236:	2388      	movs	r3, #136	; 0x88
 8001238:	73fb      	strb	r3, [r7, #15]
        goto FMSTR_StopRec_exit;
 800123a:	e00d      	b.n	8001258 <FMSTR_StopRec+0x38>
    }
        
    /* already stopped ? */
    if(!pcm_wRecFlags.flg.bIsRunning)
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <FMSTR_StopRec+0x4c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <FMSTR_StopRec+0x30>
    {
        nResponseCode = FMSTR_STS_RECDONE;
 800124a:	2302      	movs	r3, #2
 800124c:	73fb      	strb	r3, [r7, #15]
        goto FMSTR_StopRec_exit;
 800124e:	e003      	b.n	8001258 <FMSTR_StopRec+0x38>
    }
    
    /* simulate trigger */
    FMSTR_TriggerRec();
 8001250:	f7ff ff7a 	bl	8001148 <FMSTR_TriggerRec>
    nResponseCode = FMSTR_STS_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
    
FMSTR_StopRec_exit:
    return FMSTR_ConstToBuffer8(pMessageIO, nResponseCode);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	701a      	strb	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3301      	adds	r3, #1
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20003164 	.word	0x20003164

08001270 <FMSTR_GetRecStatus>:
* This function returns current recorder status
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetRecStatus(FMSTR_BPTR pMessageIO)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    FMSTR_U16 nResponseCode = (FMSTR_U16) (pcm_wRecFlags.flg.bIsRunning ? 
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <FMSTR_GetRecStatus+0x48>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <FMSTR_GetRecStatus+0x1a>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <FMSTR_GetRecStatus+0x1c>
 800128a:	2302      	movs	r3, #2
 800128c:	81fb      	strh	r3, [r7, #14]
        FMSTR_STS_RECRUN : FMSTR_STS_RECDONE);
    
    /* must be configured */
    if(!pcm_wRecFlags.flg.bIsConfigured)
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <FMSTR_GetRecStatus+0x48>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <FMSTR_GetRecStatus+0x30>
    {
        nResponseCode = FMSTR_STC_NOTINIT;
 800129c:	2388      	movs	r3, #136	; 0x88
 800129e:	81fb      	strh	r3, [r7, #14]
    }
        
    /* get run/stop status */
    return FMSTR_ConstToBuffer8(pMessageIO, (FMSTR_U8) nResponseCode);
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3301      	adds	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	20003164 	.word	0x20003164

080012bc <FMSTR_GetRecBuffSize>:
* @return   Recorder memory size in native sizeof units (=bytes on most platforms)
*
******************************************************************************/

FMSTR_SIZE_RECBUFF FMSTR_GetRecBuffSize()
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
#if FMSTR_REC_OWNBUFF
    return pcm_wRecBuffSize;
#else
    return (FMSTR_SIZE_RECBUFF) FMSTR_REC_BUFF_SIZE;
 80012c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
#endif
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <FMSTR_GetRecBuff>:
* This function returns recorder buffer information
*
******************************************************************************/

FMSTR_BPTR FMSTR_GetRecBuff(FMSTR_BPTR pMessageIO)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    volatile FMSTR_BPTR pResponse;
    /* must be configured */
    if(!pcm_wRecFlags.flg.bIsConfigured)
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <FMSTR_GetRecBuff+0x70>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d105      	bne.n	80012f2 <FMSTR_GetRecBuff+0x22>
    {
        return FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STC_NOTINIT);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2288      	movs	r2, #136	; 0x88
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	e021      	b.n	8001336 <FMSTR_GetRecBuff+0x66>
    }
    
    /* must be stopped */
    if(pcm_wRecFlags.flg.bIsRunning)
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <FMSTR_GetRecBuff+0x70>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <FMSTR_GetRecBuff+0x3c>
    {
        return FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STC_SERVBUSY);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2287      	movs	r2, #135	; 0x87
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3301      	adds	r3, #1
 800130a:	e014      	b.n	8001336 <FMSTR_GetRecBuff+0x66>
    }
    
    /* fill the return info */
    pResponse = FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STS_OK);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3301      	adds	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
    pResponse = FMSTR_AddressToBuffer(pResponse, pcm_nRecBuffAddr);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <FMSTR_GetRecBuff+0x74>)
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f9a3 	bl	800066c <FMSTR_AddressToBuffer>
 8001326:	4603      	mov	r3, r0
 8001328:	60fb      	str	r3, [r7, #12]
    return FMSTR_ValueToBuffer16(pResponse, pcm_wRecBuffStartIx);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <FMSTR_GetRecBuff+0x78>)
 800132e:	8812      	ldrh	r2, [r2, #0]
 8001330:	801a      	strh	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3302      	adds	r3, #2
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20003164 	.word	0x20003164
 8001344:	20000098 	.word	0x20000098
 8001348:	20003148 	.word	0x20003148

0800134c <FMSTR_Compare8S>:
#define CMP(v,t) ((FMSTR_BOOL)(((v) < (t)) ? 0 : 1))

#if FMSTR_CFG_BUS_WIDTH == 1U

static FMSTR_BOOL FMSTR_Compare8S()
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetS8(pcm_nTrgVarAddr), pcm_uTrgThreshold.s8);
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <FMSTR_Compare8S+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f993 2000 	ldrsb.w	r2, [r3]
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <FMSTR_Compare8S+0x2c>)
 800135a:	f993 3000 	ldrsb.w	r3, [r3]
 800135e:	429a      	cmp	r2, r3
 8001360:	bfac      	ite	ge
 8001362:	2301      	movge	r3, #1
 8001364:	2300      	movlt	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	b29b      	uxth	r3, r3
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	2000008c 	.word	0x2000008c
 8001378:	20000094 	.word	0x20000094

0800137c <FMSTR_Compare8U>:

static FMSTR_BOOL FMSTR_Compare8U()
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetU8(pcm_nTrgVarAddr), pcm_uTrgThreshold.u8);
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <FMSTR_Compare8U+0x24>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <FMSTR_Compare8U+0x28>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	bf2c      	ite	cs
 800138e:	2301      	movcs	r3, #1
 8001390:	2300      	movcc	r3, #0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	b29b      	uxth	r3, r3
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	2000008c 	.word	0x2000008c
 80013a4:	20000094 	.word	0x20000094

080013a8 <FMSTR_Compare16S>:

#endif

static FMSTR_BOOL FMSTR_Compare16S()
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetS16(pcm_nTrgVarAddr), pcm_uTrgThreshold.s16);
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <FMSTR_Compare16S+0x28>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <FMSTR_Compare16S+0x2c>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	bfac      	ite	ge
 80013be:	2301      	movge	r3, #1
 80013c0:	2300      	movlt	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	b29b      	uxth	r3, r3
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	2000008c 	.word	0x2000008c
 80013d4:	20000094 	.word	0x20000094

080013d8 <FMSTR_Compare16U>:

static FMSTR_BOOL FMSTR_Compare16U()
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetU16(pcm_nTrgVarAddr), pcm_uTrgThreshold.u16);
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <FMSTR_Compare16U+0x24>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	881a      	ldrh	r2, [r3, #0]
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <FMSTR_Compare16U+0x28>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	bf2c      	ite	cs
 80013ea:	2301      	movcs	r3, #1
 80013ec:	2300      	movcc	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	b29b      	uxth	r3, r3
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	2000008c 	.word	0x2000008c
 8001400:	20000094 	.word	0x20000094

08001404 <FMSTR_Compare32S>:

static FMSTR_BOOL FMSTR_Compare32S()
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetS32(pcm_nTrgVarAddr), pcm_uTrgThreshold.s32);
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <FMSTR_Compare32S+0x24>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <FMSTR_Compare32S+0x28>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	bfac      	ite	ge
 8001416:	2301      	movge	r3, #1
 8001418:	2300      	movlt	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	b29b      	uxth	r3, r3
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	2000008c 	.word	0x2000008c
 800142c:	20000094 	.word	0x20000094

08001430 <FMSTR_Compare32U>:

static FMSTR_BOOL FMSTR_Compare32U()
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
    return CMP(FMSTR_GetU32(pcm_nTrgVarAddr), pcm_uTrgThreshold.u32);
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <FMSTR_Compare32U+0x24>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <FMSTR_Compare32U+0x28>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	bf2c      	ite	cs
 8001442:	2301      	movcs	r3, #1
 8001444:	2300      	movcc	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b29b      	uxth	r3, r3
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	2000008c 	.word	0x2000008c
 8001458:	20000094 	.word	0x20000094

0800145c <FMSTR_Recorder>:
#if defined(FMSTR_PLATFORM_STM32F4xx) || defined(FMSTR_PLATFORM_STM32F4xx)
//#warn interrupt called
#endif

void FMSTR_Recorder(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
    /* recorder not active */
    if(!pcm_wRecFlags.flg.bIsRunning)
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <FMSTR_Recorder+0x1c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <FMSTR_Recorder+0x18>
    {
        return ;
    }
    
    /* do the hard work      */
    FMSTR_Recorder2();
 800146e:	f000 f805 	bl	800147c <FMSTR_Recorder2>
 8001472:	e000      	b.n	8001476 <FMSTR_Recorder+0x1a>
        return ;
 8001474:	bf00      	nop
}
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20003164 	.word	0x20003164

0800147c <FMSTR_Recorder2>:
#if defined(FMSTR_PLATFORM_STM32F4xx) || defined(FMSTR_PLATFORM_STM32F4xx)
//#pragma interrupt called
#endif

static void FMSTR_Recorder2(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
    FMSTR_BOOL cmp;
    FMSTR_U8 i;

#if (FMSTR_REC_STATIC_DIVISOR) != 1
    /* skip this call ? */
    if(pcm_wRecTimeDivCtr)
 8001482:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <FMSTR_Recorder2+0x134>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <FMSTR_Recorder2+0x1c>
    {
        /* maybe next time... */
        pcm_wRecTimeDivCtr--;
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <FMSTR_Recorder2+0x134>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	3b01      	subs	r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <FMSTR_Recorder2+0x134>)
 8001494:	801a      	strh	r2, [r3, #0]
        return;
 8001496:	e087      	b.n	80015a8 <FMSTR_Recorder2+0x12c>
    }
    
    /* re-initialize divider */
#if (FMSTR_REC_STATIC_DIVISOR) == 0
    pcm_wRecTimeDivCtr = pcm_wRecTimeDiv;
 8001498:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <FMSTR_Recorder2+0x138>)
 800149a:	881a      	ldrh	r2, [r3, #0]
 800149c:	4b44      	ldr	r3, [pc, #272]	; (80015b0 <FMSTR_Recorder2+0x134>)
 800149e:	801a      	strh	r2, [r3, #0]
    pcm_wRecTimeDivCtr = FMSTR_REC_STATIC_DIVISOR;
#endif /* (FMSTR_REC_STATIC_DIVISOR) == 0 */
#endif /* (FMSTR_REC_STATIC_DIVISOR) != 1 */

    /* take snapshot of variable values */
    for (i=0U; i<pcm_nRecVarCount; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	717b      	strb	r3, [r7, #5]
 80014a4:	e016      	b.n	80014d4 <FMSTR_Recorder2+0x58>
    {
        sz = pcm_pRecVarSize[i];
 80014a6:	797b      	ldrb	r3, [r7, #5]
 80014a8:	4a43      	ldr	r2, [pc, #268]	; (80015b8 <FMSTR_Recorder2+0x13c>)
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	713b      	strb	r3, [r7, #4]
        FMSTR_CopyMemory(pcm_dwRecWritePtr, pcm_pRecVarAddr[i], sz);
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <FMSTR_Recorder2+0x140>)
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	797b      	ldrb	r3, [r7, #5]
 80014b4:	4a42      	ldr	r2, [pc, #264]	; (80015c0 <FMSTR_Recorder2+0x144>)
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	793a      	ldrb	r2, [r7, #4]
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff f827 	bl	8000510 <FMSTR_CopyMemory>
        sz /= FMSTR_CFG_BUS_WIDTH;
        pcm_dwRecWritePtr += sz;
 80014c2:	793a      	ldrb	r2, [r7, #4]
 80014c4:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <FMSTR_Recorder2+0x140>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a3c      	ldr	r2, [pc, #240]	; (80015bc <FMSTR_Recorder2+0x140>)
 80014cc:	6013      	str	r3, [r2, #0]
    for (i=0U; i<pcm_nRecVarCount; i++)
 80014ce:	797b      	ldrb	r3, [r7, #5]
 80014d0:	3301      	adds	r3, #1
 80014d2:	717b      	strb	r3, [r7, #5]
 80014d4:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <FMSTR_Recorder2+0x148>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	797a      	ldrb	r2, [r7, #5]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3e3      	bcc.n	80014a6 <FMSTR_Recorder2+0x2a>
    }
    
    /* another sample taken (startIx "points" after sample just taken) */
    /* i.e. it points to the oldest sample */
    pcm_wRecBuffStartIx++;
 80014de:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <FMSTR_Recorder2+0x14c>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <FMSTR_Recorder2+0x14c>)
 80014e8:	801a      	strh	r2, [r3, #0]
    
    /* wrap around (circular buffer) ? */
    if(pcm_dwRecWritePtr >= pcm_dwRecEndBuffPtr)
 80014ea:	4b34      	ldr	r3, [pc, #208]	; (80015bc <FMSTR_Recorder2+0x140>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b37      	ldr	r3, [pc, #220]	; (80015cc <FMSTR_Recorder2+0x150>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d30b      	bcc.n	800150e <FMSTR_Recorder2+0x92>
    {   
        pcm_dwRecWritePtr = pcm_nRecBuffAddr;
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <FMSTR_Recorder2+0x154>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a30      	ldr	r2, [pc, #192]	; (80015bc <FMSTR_Recorder2+0x140>)
 80014fc:	6013      	str	r3, [r2, #0]
        pcm_wRecFlags.flg.bInvirginCycle = 0U;
 80014fe:	4a35      	ldr	r2, [pc, #212]	; (80015d4 <FMSTR_Recorder2+0x158>)
 8001500:	7813      	ldrb	r3, [r2, #0]
 8001502:	f36f 03c3 	bfc	r3, #3, #1
 8001506:	7013      	strb	r3, [r2, #0]
        pcm_wRecBuffStartIx = 0U;
 8001508:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <FMSTR_Recorder2+0x14c>)
 800150a:	2200      	movs	r2, #0
 800150c:	801a      	strh	r2, [r3, #0]
    }

    /* no trigger testing in virgin cycle */
    if(pcm_wRecFlags.flg.bInvirginCycle)
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <FMSTR_Recorder2+0x158>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d144      	bne.n	80015a6 <FMSTR_Recorder2+0x12a>
    {
        return;
    }
    
    /* test trigger condition if still running */
    if(!pcm_wRecFlags.flg.bIsStopping && pcm_pCompareFunc != NULL)
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <FMSTR_Recorder2+0x158>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d125      	bne.n	8001576 <FMSTR_Recorder2+0xfa>
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <FMSTR_Recorder2+0x15c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d021      	beq.n	8001576 <FMSTR_Recorder2+0xfa>
    {
        /* compare trigger threshold */
        cmp = pcm_pCompareFunc();
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <FMSTR_Recorder2+0x15c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4798      	blx	r3
 8001538:	4603      	mov	r3, r0
 800153a:	80fb      	strh	r3, [r7, #6]
        
        /* negated logic (falling-edge) ? */
        if(pcm_nRecTriggerMode == 2U)
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <FMSTR_Recorder2+0x160>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d106      	bne.n	8001552 <FMSTR_Recorder2+0xd6>
        {
            cmp = (FMSTR_BOOL) !cmp;
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf0c      	ite	eq
 800154a:	2301      	moveq	r3, #1
 800154c:	2300      	movne	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	80fb      	strh	r3, [r7, #6]
        }
        
        /* above threshold ? */
        if(cmp)
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d009      	beq.n	800156c <FMSTR_Recorder2+0xf0>
        {
            /* were we at least once below threshold ? */
            if(pcm_wRecFlags.flg.bTrgCrossActive)
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <FMSTR_Recorder2+0x158>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <FMSTR_Recorder2+0xfa>
            {
                /* EDGE TRIGGER ! */
                FMSTR_TriggerRec();
 8001566:	f7ff fdef 	bl	8001148 <FMSTR_TriggerRec>
 800156a:	e004      	b.n	8001576 <FMSTR_Recorder2+0xfa>
            }
        }
        else
        {
            /* we got bellow threshold, now wait for being above threshold */
            pcm_wRecFlags.flg.bTrgCrossActive = 1U;
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <FMSTR_Recorder2+0x158>)
 800156e:	7813      	ldrb	r3, [r2, #0]
 8001570:	f043 0310 	orr.w	r3, r3, #16
 8001574:	7013      	strb	r3, [r2, #0]
        }
    }
    
    /* in stopping mode ? (note that this bit might have been set just above!) */
    if(pcm_wRecFlags.flg.bIsStopping)
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <FMSTR_Recorder2+0x158>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d011      	beq.n	80015a8 <FMSTR_Recorder2+0x12c>
    {
        /* count down post-trigger samples expired ? */
        if(!pcm_wStoprecCountDown)
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <FMSTR_Recorder2+0x164>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <FMSTR_Recorder2+0x11c>
        {
            /* STOP RECORDER */
            pcm_wRecFlags.flg.bIsRunning = 0U;
 800158c:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <FMSTR_Recorder2+0x158>)
 800158e:	7813      	ldrb	r3, [r2, #0]
 8001590:	f36f 0341 	bfc	r3, #1, #1
 8001594:	7013      	strb	r3, [r2, #0]
            return;
 8001596:	e007      	b.n	80015a8 <FMSTR_Recorder2+0x12c>
        }
        
        /* perhaps next time */
        pcm_wStoprecCountDown--;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <FMSTR_Recorder2+0x164>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	3b01      	subs	r3, #1
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <FMSTR_Recorder2+0x164>)
 80015a2:	801a      	strh	r2, [r3, #0]
 80015a4:	e000      	b.n	80015a8 <FMSTR_Recorder2+0x12c>
        return;
 80015a6:	bf00      	nop
    }
}
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000315c 	.word	0x2000315c
 80015b4:	20003168 	.word	0x20003168
 80015b8:	20003150 	.word	0x20003150
 80015bc:	2000316c 	.word	0x2000316c
 80015c0:	20003128 	.word	0x20003128
 80015c4:	2000315a 	.word	0x2000315a
 80015c8:	20003148 	.word	0x20003148
 80015cc:	2000314c 	.word	0x2000314c
 80015d0:	20000098 	.word	0x20000098
 80015d4:	20003164 	.word	0x20003164
 80015d8:	2000009c 	.word	0x2000009c
 80015dc:	20003160 	.word	0x20003160
 80015e0:	2000315e 	.word	0x2000315e

080015e4 <FMSTR_InitScope>:
* @brief    Scope Initialization
*
******************************************************************************/

void FMSTR_InitScope(void)
{   
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <FMSTR_SetUpScope>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_SetUpScope(FMSTR_BPTR pMessageIO)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    FMSTR_BPTR pResponse = pMessageIO;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	613b      	str	r3, [r7, #16]
    FMSTR_U8 i, sz, nVarCnt;

    /* uninitialize scope */
    pcm_nScopeVarCount = 0U;
 8001600:	4b26      	ldr	r3, [pc, #152]	; (800169c <FMSTR_SetUpScope+0xa8>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]

    /* seek the setup data */
    pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3302      	adds	r3, #2
 800160a:	607b      	str	r3, [r7, #4]
    
    /* scope variable count  */
    pMessageIO = FMSTR_ValueFromBuffer8(&nVarCnt, pMessageIO);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	73bb      	strb	r3, [r7, #14]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3301      	adds	r3, #1
 8001616:	607b      	str	r3, [r7, #4]

    /* scope variable information must fit into our buffers */
    if(!nVarCnt || nVarCnt > (FMSTR_U8)FMSTR_MAX_SCOPE_VARS)
 8001618:	7bbb      	ldrb	r3, [r7, #14]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <FMSTR_SetUpScope+0x30>
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	2b08      	cmp	r3, #8
 8001622:	d905      	bls.n	8001630 <FMSTR_SetUpScope+0x3c>
    {
        return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVBUFF);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	2285      	movs	r2, #133	; 0x85
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	3301      	adds	r3, #1
 800162e:	e030      	b.n	8001692 <FMSTR_SetUpScope+0x9e>
    }
    
    /* get all addresses and sizes */
    for(i=0U; i<nVarCnt; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	75fb      	strb	r3, [r7, #23]
 8001634:	e021      	b.n	800167a <FMSTR_SetUpScope+0x86>
    {
        /* variable size */
        pMessageIO = FMSTR_ValueFromBuffer8(&sz, pMessageIO);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3301      	adds	r3, #1
 8001640:	607b      	str	r3, [r7, #4]
        pcm_pScopeVarSize[i] = sz;
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	7bf9      	ldrb	r1, [r7, #15]
 8001646:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <FMSTR_SetUpScope+0xac>)
 8001648:	54d1      	strb	r1, [r2, r3]
        
        /* variable address */
        pMessageIO = FMSTR_AddressFromBuffer(&pcm_pScopeVarAddr[i], pMessageIO);
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4a15      	ldr	r2, [pc, #84]	; (80016a4 <FMSTR_SetUpScope+0xb0>)
 8001650:	4413      	add	r3, r2
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff f829 	bl	80006ac <FMSTR_AddressFromBuffer>
 800165a:	6078      	str	r0, [r7, #4]

        /* valid numeric variable sizes only */
        if(sz == 0U || sz > 8U)
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <FMSTR_SetUpScope+0x74>
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	2b08      	cmp	r3, #8
 8001666:	d905      	bls.n	8001674 <FMSTR_SetUpScope+0x80>
        {
            return FMSTR_ConstToBuffer8(pResponse, FMSTR_STC_INVSIZE);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	2286      	movs	r2, #134	; 0x86
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	3301      	adds	r3, #1
 8001672:	e00e      	b.n	8001692 <FMSTR_SetUpScope+0x9e>
    for(i=0U; i<nVarCnt; i++)
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	3301      	adds	r3, #1
 8001678:	75fb      	strb	r3, [r7, #23]
 800167a:	7bbb      	ldrb	r3, [r7, #14]
 800167c:	7dfa      	ldrb	r2, [r7, #23]
 800167e:	429a      	cmp	r2, r3
 8001680:	d3d9      	bcc.n	8001636 <FMSTR_SetUpScope+0x42>
#endif
        
    }

    /* activate scope */
    pcm_nScopeVarCount = nVarCnt;
 8001682:	7bba      	ldrb	r2, [r7, #14]
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <FMSTR_SetUpScope+0xa8>)
 8001686:	701a      	strb	r2, [r3, #0]

    /* return just a status */
    return FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	3301      	adds	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200028a0 	.word	0x200028a0
 80016a0:	200028c4 	.word	0x200028c4
 80016a4:	200028a4 	.word	0x200028a4

080016a8 <FMSTR_ReadScope>:
*           pointer where the response output finished (except checksum)
*
******************************************************************************/

FMSTR_BPTR FMSTR_ReadScope(FMSTR_BPTR pMessageIO)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    FMSTR_U8 i;
    
    if(!pcm_nScopeVarCount)
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <FMSTR_ReadScope+0x60>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <FMSTR_ReadScope+0x1c>
    {
        return FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STC_NOTINIT);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2288      	movs	r2, #136	; 0x88
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3301      	adds	r3, #1
 80016c2:	e01d      	b.n	8001700 <FMSTR_ReadScope+0x58>
    }
    
    /* success */
    pMessageIO = FMSTR_ConstToBuffer8(pMessageIO, FMSTR_STS_OK);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3301      	adds	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
    
    for (i=0U; i<pcm_nScopeVarCount; i++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e00e      	b.n	80016f4 <FMSTR_ReadScope+0x4c>
    {
        pMessageIO = FMSTR_CopyToBuffer(pMessageIO, pcm_pScopeVarAddr[i], pcm_pScopeVarSize[i]);
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	4a0c      	ldr	r2, [pc, #48]	; (800170c <FMSTR_ReadScope+0x64>)
 80016da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <FMSTR_ReadScope+0x68>)
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	461a      	mov	r2, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7fe ff32 	bl	8000550 <FMSTR_CopyToBuffer>
 80016ec:	6078      	str	r0, [r7, #4]
    for (i=0U; i<pcm_nScopeVarCount; i++)
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	3301      	adds	r3, #1
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <FMSTR_ReadScope+0x60>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d3eb      	bcc.n	80016d6 <FMSTR_ReadScope+0x2e>
    } 
        
    /* return end position */
    return pMessageIO;  
 80016fe:	687b      	ldr	r3, [r7, #4]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200028a0 	.word	0x200028a0
 800170c:	200028a4 	.word	0x200028a4
 8001710:	200028c4 	.word	0x200028c4

08001714 <FMSTR_RxQueue>:
*******************************************************************************/

#if FMSTR_SHORT_INTR

static void FMSTR_RxQueue(FMSTR_BCHR nRxChar)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
    /* future value of write pointer */
    FMSTR_BPTR wpnext = pcm_pRQueueWP + 1;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <FMSTR_RxQueue+0x44>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]

    
    /*lint -e{946} pointer arithmetic is okay here (same array) */
    if(wpnext >= (pcm_pRQueueBuffer + FMSTR_COMM_RQUEUE_SIZE))
 8001726:	4a0d      	ldr	r2, [pc, #52]	; (800175c <FMSTR_RxQueue+0x48>)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4293      	cmp	r3, r2
 800172c:	d301      	bcc.n	8001732 <FMSTR_RxQueue+0x1e>
    {
        wpnext = pcm_pRQueueBuffer;
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <FMSTR_RxQueue+0x4c>)
 8001730:	60fb      	str	r3, [r7, #12]
    }
    
    /* any space in queue? */
    if(wpnext != pcm_pRQueueRP)
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <FMSTR_RxQueue+0x50>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d006      	beq.n	800174a <FMSTR_RxQueue+0x36>
    {
        *pcm_pRQueueWP = (FMSTR_U8) nRxChar;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <FMSTR_RxQueue+0x44>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	79fa      	ldrb	r2, [r7, #7]
 8001742:	701a      	strb	r2, [r3, #0]
        pcm_pRQueueWP = wpnext;
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <FMSTR_RxQueue+0x44>)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6013      	str	r3, [r2, #0]
    }
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20003124 	.word	0x20003124
 800175c:	20003120 	.word	0x20003120
 8001760:	20002920 	.word	0x20002920
 8001764:	20003120 	.word	0x20003120

08001768 <FMSTR_RxDequeue>:
*******************************************************************************/

#if FMSTR_SHORT_INTR

static void FMSTR_RxDequeue(void)
{ 
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
    FMSTR_BCHR nChar = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	71fb      	strb	r3, [r7, #7]
    
    /* get all queued characters */
    while(pcm_pRQueueRP != pcm_pRQueueWP)
 8001772:	e019      	b.n	80017a8 <FMSTR_RxDequeue+0x40>
    {
        nChar = *pcm_pRQueueRP++;
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <FMSTR_RxDequeue+0x58>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	4911      	ldr	r1, [pc, #68]	; (80017c0 <FMSTR_RxDequeue+0x58>)
 800177c:	600a      	str	r2, [r1, #0]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	71fb      	strb	r3, [r7, #7]

        /*lint -e{946} pointer arithmetic is okay here (same array) */
        if(pcm_pRQueueRP >= (pcm_pRQueueBuffer + FMSTR_COMM_RQUEUE_SIZE))
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <FMSTR_RxDequeue+0x58>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <FMSTR_RxDequeue+0x5c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d302      	bcc.n	8001792 <FMSTR_RxDequeue+0x2a>
        {
            pcm_pRQueueRP = pcm_pRQueueBuffer;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <FMSTR_RxDequeue+0x58>)
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <FMSTR_RxDequeue+0x60>)
 8001790:	601a      	str	r2, [r3, #0]
        }
        
        /* emulate the SCI receive event */
        if(!pcm_wFlags.flg.bTxActive)
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <FMSTR_RxDequeue+0x64>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <FMSTR_RxDequeue+0x40>
        {
            (void)FMSTR_Rx(nChar);
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f964 	bl	8001a70 <FMSTR_Rx>
    while(pcm_pRQueueRP != pcm_pRQueueWP)
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <FMSTR_RxDequeue+0x58>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <FMSTR_RxDequeue+0x68>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d1df      	bne.n	8001774 <FMSTR_RxDequeue+0xc>
        }
    }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20003120 	.word	0x20003120
 80017c4:	20003120 	.word	0x20003120
 80017c8:	20002920 	.word	0x20002920
 80017cc:	2000290c 	.word	0x2000290c
 80017d0:	20003124 	.word	0x20003124

080017d4 <FMSTR_ProcessSCI>:
* @note This function can be called either from SCI ISR or from the polling routine
*
******************************************************************************/

void FMSTR_ProcessSCI(void)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
    /* read & clear status     */
  FMSTR_SCISR wSciSR = FMSTR_SCI_GETSR();
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <FMSTR_ProcessSCI+0x8c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	71fb      	strb	r3, [r7, #7]

   /* transmitter active and empty? */
   if (pcm_wFlags.flg.bTxActive )
 80017e0:	4b20      	ldr	r3, [pc, #128]	; (8001864 <FMSTR_ProcessSCI+0x90>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d028      	beq.n	8001840 <FMSTR_ProcessSCI+0x6c>
   {
       /* able to accept another character? */
       if(FMSTR_SCI_TXEMPTY(wSciSR))
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <FMSTR_ProcessSCI+0x38>
       {
           FMSTR_U8 ch;
           /* just put the byte into the SCI transmit buffer */
           if(!FMSTR_Tx(&ch))
 80017f8:	1dbb      	adds	r3, r7, #6
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f8ea 	bl	80019d4 <FMSTR_Tx>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <FMSTR_ProcessSCI+0x38>
               FMSTR_SCI_PUTCHAR((FMSTR_U8) ch);
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <FMSTR_ProcessSCI+0x94>)
 8001808:	79ba      	ldrb	r2, [r7, #6]
 800180a:	701a      	strb	r2, [r3, #0]
       }
       
#if FMSTR_SCI_HAS_TXQUEUE
       /* waiting for transmission complete flag? */
       if(pcm_wFlags.flg.bTxWaitTC && FMSTR_SCI_TXEMPTY(wSciSR))
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <FMSTR_ProcessSCI+0x90>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <FMSTR_ProcessSCI+0x54>
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <FMSTR_ProcessSCI+0x54>
       {
           /* after TC, we can switch to listen mode safely */
           FMSTR_Listen();
 8001824:	f000 f824 	bl	8001870 <FMSTR_Listen>
#endif


#if !FMSTR_SCI_TWOWIRE_ONLY
       /* read-out and ignore any received character (loopback) */
       if(FMSTR_SCI_RXREADY(wSciSR))
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800182e:	2b00      	cmp	r3, #0
 8001830:	d012      	beq.n	8001858 <FMSTR_ProcessSCI+0x84>
       {
           /*lint -esym(550, nRxChar) */
           volatile FMSTR_U16 nRxChar;
           nRxChar = FMSTR_SCI_GETCHAR(); 
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <FMSTR_ProcessSCI+0x98>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	b29b      	uxth	r3, r3
 800183a:	80bb      	strh	r3, [r7, #4]
           FMSTR_UNUSED(nRxChar);
 800183c:	88bb      	ldrh	r3, [r7, #4]
               pcm_nDebugTxPollCount = -1;
           }
       }
#endif
   }
}
 800183e:	e00b      	b.n	8001858 <FMSTR_ProcessSCI+0x84>
       if (FMSTR_SCI_RXREADY(wSciSR))
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <FMSTR_ProcessSCI+0x84>
          register   FMSTR_BCHR nRxChar = 0U;
 800184a:	2400      	movs	r4, #0
          nRxChar = (FMSTR_BCHR) FMSTR_SCI_GETCHAR();
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <FMSTR_ProcessSCI+0x98>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b2dc      	uxtb	r4, r3
            FMSTR_RxQueue(nRxChar);
 8001852:	4620      	mov	r0, r4
 8001854:	f7ff ff5e 	bl	8001714 <FMSTR_RxQueue>
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	4000481c 	.word	0x4000481c
 8001864:	2000290c 	.word	0x2000290c
 8001868:	40004828 	.word	0x40004828
 800186c:	40004824 	.word	0x40004824

08001870 <FMSTR_Listen>:
* Reset the receiver machine and start listening on a serial line
*
******************************************************************************/

static void FMSTR_Listen(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
    pcm_nRxTodo = 0U;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <FMSTR_Listen+0x58>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]

    /* disable transmitter state machine */
    pcm_wFlags.flg.bTxActive = 0U;
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <FMSTR_Listen+0x5c>)
 800187c:	7813      	ldrb	r3, [r2, #0]
 800187e:	f36f 0300 	bfc	r3, #0, #1
 8001882:	7013      	strb	r3, [r2, #0]

#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
    pcm_wFlags.flg.bTxWaitTC = 0U;
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <FMSTR_Listen+0x5c>)
 8001886:	7813      	ldrb	r3, [r2, #0]
 8001888:	f36f 0341 	bfc	r3, #1, #1
 800188c:	7013      	strb	r3, [r2, #0]
    /* disable transmitter, enable receiver (enables single-wire connection) */
#if !FMSTR_SCI_TWOWIRE_ONLY
    FMSTR_SCI_TD();
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <FMSTR_Listen+0x60>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <FMSTR_Listen+0x60>)
 8001894:	f023 0308 	bic.w	r3, r3, #8
 8001898:	6013      	str	r3, [r2, #0]
    FMSTR_SCI_RE();
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <FMSTR_Listen+0x60>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <FMSTR_Listen+0x60>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6013      	str	r3, [r2, #0]
#endif /* (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART) */

    /* disable transmit, enable receive interrupts */
#if FMSTR_SHORT_INTR || FMSTR_LONG_INTR
#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
    FMSTR_SCI_DTXI();   /* disable SCI transmit interrupt */
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <FMSTR_Listen+0x60>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <FMSTR_Listen+0x60>)
 80018ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018b0:	6013      	str	r3, [r2, #0]
    FMSTR_SCI_ERXI();   /* enable SCI receive interrupt */
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <FMSTR_Listen+0x60>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <FMSTR_Listen+0x60>)
 80018b8:	f043 0320 	orr.w	r3, r3, #32
 80018bc:	6013      	str	r3, [r2, #0]
    /* we have just finished the transmission of the test frame, now wait the 32x times the sendtime 
       to receive any command from PC (count<0 is measurement, count>0 is waiting, count=0 is send trigger) */
    if(pcm_nDebugTxPollCount < 0)
        pcm_nDebugTxPollCount *= -(FMSTR_DEBUG_TX_POLLCNT_XFACTOR);
#endif
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	20002911 	.word	0x20002911
 80018cc:	2000290c 	.word	0x2000290c
 80018d0:	40004800 	.word	0x40004800

080018d4 <FMSTR_SendError>:
* @param    nErrCode - error code to be sent
*
******************************************************************************/

static void FMSTR_SendError(FMSTR_BCHR nErrCode)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
    /* fill & send single-byte response */
    *pcm_pCommBuffer = nErrCode;
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <FMSTR_SendError+0x20>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	7013      	strb	r3, [r2, #0]
    FMSTR_SendResponse(pcm_pCommBuffer, 1U);
 80018e4:	2101      	movs	r1, #1
 80018e6:	4803      	ldr	r0, [pc, #12]	; (80018f4 <FMSTR_SendError+0x20>)
 80018e8:	f000 f806 	bl	80018f8 <FMSTR_SendResponse>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200028cc 	.word	0x200028cc

080018f8 <FMSTR_SendResponse>:
* (inlcuding the status byte). It computes the check sum and kicks on tx.
*
******************************************************************************/

void FMSTR_SendResponse(FMSTR_BPTR pResponse, FMSTR_SIZE8 nLength)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	70fb      	strb	r3, [r7, #3]
    FMSTR_U16 chSum = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	81fb      	strh	r3, [r7, #14]
    FMSTR_SIZE8 i;
    FMSTR_U8 c;

    /* remember the buffer to be sent */
    pcm_pTxBuff = pResponse;
 8001908:	4a2d      	ldr	r2, [pc, #180]	; (80019c0 <FMSTR_SendResponse+0xc8>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
    
    /* status byte and data are already there, compute checksum only     */
    for (i=0U; i<nLength; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	737b      	strb	r3, [r7, #13]
 8001912:	e012      	b.n	800193a <FMSTR_SendResponse+0x42>
    {
        c = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	733b      	strb	r3, [r7, #12]
        pResponse = FMSTR_ValueFromBuffer8(&c, pResponse);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	733b      	strb	r3, [r7, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3301      	adds	r3, #1
 8001922:	607b      	str	r3, [r7, #4]
        /* add character to checksum */
        chSum += c;
 8001924:	7b3b      	ldrb	r3, [r7, #12]
 8001926:	b29a      	uxth	r2, r3
 8001928:	89fb      	ldrh	r3, [r7, #14]
 800192a:	4413      	add	r3, r2
 800192c:	81fb      	strh	r3, [r7, #14]
        /* prevent saturation to happen on DSP platforms */
        chSum &= 0xffU;
 800192e:	89fb      	ldrh	r3, [r7, #14]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	81fb      	strh	r3, [r7, #14]
    for (i=0U; i<nLength; i++)
 8001934:	7b7b      	ldrb	r3, [r7, #13]
 8001936:	3301      	adds	r3, #1
 8001938:	737b      	strb	r3, [r7, #13]
 800193a:	7b7a      	ldrb	r2, [r7, #13]
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	429a      	cmp	r2, r3
 8001940:	d3e8      	bcc.n	8001914 <FMSTR_SendResponse+0x1c>
    }
    
    /* store checksum after the message */
    pResponse = FMSTR_ValueToBuffer8(pResponse, (FMSTR_U8) (((FMSTR_U8)(~chSum)) + 1U));
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	425b      	negs	r3, r3
 8001948:	b2da      	uxtb	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3301      	adds	r3, #1
 8001952:	607b      	str	r3, [r7, #4]

    /* send the message and the checksum and the SOB */
    pcm_nTxTodo = (FMSTR_SIZE8) (nLength + 1U); 
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	3301      	adds	r3, #1
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <FMSTR_SendResponse+0xcc>)
 800195c:	701a      	strb	r2, [r3, #0]
    
    /* now transmitting the response */
    pcm_wFlags.flg.bTxActive = 1U;
 800195e:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <FMSTR_SendResponse+0xd0>)
 8001960:	7813      	ldrb	r3, [r2, #0]
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	7013      	strb	r3, [r2, #0]
#if (FMSTR_USE_USB_CDC) || (FMSTR_USE_MQX_IO) || (FMSTR_USE_JTAG)
    pcm_wFlags.flg.bTxFirstSobSend = 1U;
#endif

#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
    pcm_wFlags.flg.bTxWaitTC = 0U;
 8001968:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <FMSTR_SendResponse+0xd0>)
 800196a:	7813      	ldrb	r3, [r2, #0]
 800196c:	f36f 0341 	bfc	r3, #1, #1
 8001970:	7013      	strb	r3, [r2, #0]
#endif

    /* do not replicate the initial SOB  */
    pcm_wFlags.flg.bTxLastCharSOB = 0U;
 8001972:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <FMSTR_SendResponse+0xd0>)
 8001974:	7813      	ldrb	r3, [r2, #0]
 8001976:	f36f 0382 	bfc	r3, #2, #1
 800197a:	7013      	strb	r3, [r2, #0]
#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
    {

        /* disable receiver, enable transmitter (single-wire communication) */
#if !FMSTR_SCI_TWOWIRE_ONLY
        FMSTR_SCI_RD();
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <FMSTR_SendResponse+0xd4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <FMSTR_SendResponse+0xd4>)
 8001982:	f023 0304 	bic.w	r3, r3, #4
 8001986:	6013      	str	r3, [r2, #0]
        FMSTR_SCI_TE();
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <FMSTR_SendResponse+0xd4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <FMSTR_SendResponse+0xd4>)
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	6013      	str	r3, [r2, #0]
#endif        
        /* kick on the SCI transmission (also clears TX Empty flag on some platforms) */
        FMSTR_SCI_PUTCHAR(FMSTR_SOB);
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <FMSTR_SendResponse+0xd8>)
 8001996:	222b      	movs	r2, #43	; 0x2b
 8001998:	701a      	strb	r2, [r3, #0]
#endif

    /* TX interrupt enable, RX interrupt disable */
#if (FMSTR_LONG_INTR) || (FMSTR_SHORT_INTR)
#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
    FMSTR_SCI_DRXI();
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <FMSTR_SendResponse+0xd4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <FMSTR_SendResponse+0xd4>)
 80019a0:	f023 0320 	bic.w	r3, r3, #32
 80019a4:	6013      	str	r3, [r2, #0]
    FMSTR_SCI_ETXI();
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <FMSTR_SendResponse+0xd4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a08      	ldr	r2, [pc, #32]	; (80019cc <FMSTR_SendResponse+0xd4>)
 80019ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b0:	6013      	str	r3, [r2, #0]
    serial_putc(pSerialObj, (FMSTR_U8) FMSTR_SOB);
        /* enabled TX interrupt */
    serial_irq_set(pSerialObj, TxIrq, 1);
#endif
#endif /* FMSTR_LONG_INTR || FMSTR_SHORT_INTR */    
}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20002914 	.word	0x20002914
 80019c4:	20002910 	.word	0x20002910
 80019c8:	2000290c 	.word	0x2000290c
 80019cc:	40004800 	.word	0x40004800
 80019d0:	40004828 	.word	0x40004828

080019d4 <FMSTR_Tx>:
* get ready buffer(prepare data to send)
*
******************************************************************************/

FMSTR_BOOL FMSTR_Tx(FMSTR_U8* pTxChar)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
        *pTxChar = FMSTR_SOB;
        pcm_wFlags.flg.bTxFirstSobSend = 0U;
        return FMSTR_FALSE;
    }
#endif      
    if (pcm_nTxTodo)
 80019dc:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <FMSTR_Tx+0x8c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d02b      	beq.n	8001a3c <FMSTR_Tx+0x68>
    {
        /* fetch & send character ready to transmit */
        /*lint -e{534} ignoring return value */
        (void)FMSTR_ValueFromBuffer8(pTxChar, pcm_pTxBuff);
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <FMSTR_Tx+0x90>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	701a      	strb	r2, [r3, #0]
        
        /* first, handle the replicated SOB characters */
        if (*pTxChar == FMSTR_SOB)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b2b      	cmp	r3, #43	; 0x2b
 80019f4:	d115      	bne.n	8001a22 <FMSTR_Tx+0x4e>
        {
            pcm_wFlags.flg.bTxLastCharSOB ^= 1U;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <FMSTR_Tx+0x94>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f083 0301 	eor.w	r3, r3, #1
 8001a04:	b2d9      	uxtb	r1, r3
 8001a06:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <FMSTR_Tx+0x94>)
 8001a08:	7813      	ldrb	r3, [r2, #0]
 8001a0a:	f361 0382 	bfi	r3, r1, #2, #1
 8001a0e:	7013      	strb	r3, [r2, #0]
            if ((pcm_wFlags.flg.bTxLastCharSOB))
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <FMSTR_Tx+0x94>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <FMSTR_Tx+0x4e>
            {
                /* yes, repeat the SOB next time */
                return FMSTR_FALSE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e018      	b.n	8001a54 <FMSTR_Tx+0x80>
            }
        }
        /* no, advance tx buffer pointer */
        pcm_nTxTodo--;
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <FMSTR_Tx+0x8c>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <FMSTR_Tx+0x8c>)
 8001a2c:	701a      	strb	r2, [r3, #0]
        pcm_pTxBuff = FMSTR_SkipInBuffer(pcm_pTxBuff, 1U);
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <FMSTR_Tx+0x90>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <FMSTR_Tx+0x90>)
 8001a36:	6013      	str	r3, [r2, #0]
        return FMSTR_FALSE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e00b      	b.n	8001a54 <FMSTR_Tx+0x80>
    
    /* when SCI TX buffering is enabled, we must first wait until all 
       characters are physically transmitted (before disabling transmitter) */
#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART)
  #if FMSTR_SCI_HAS_TXQUEUE
    pcm_wFlags.flg.bTxWaitTC = 1;
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <FMSTR_Tx+0x94>)
 8001a3e:	7813      	ldrb	r3, [r2, #0]
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	7013      	strb	r3, [r2, #0]

    /* wait for SCI TC interrupt */
    #if FMSTR_SHORT_INTR || FMSTR_LONG_INTR
    FMSTR_SCI_ETCI();
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <FMSTR_Tx+0x98>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <FMSTR_Tx+0x98>)
 8001a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a50:	6013      	str	r3, [r2, #0]
#else
    /* start listening immediately */
    FMSTR_Listen();
#endif

    return FMSTR_TRUE;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	20002910 	.word	0x20002910
 8001a64:	20002914 	.word	0x20002914
 8001a68:	2000290c 	.word	0x2000290c
 8001a6c:	40004800 	.word	0x40004800

08001a70 <FMSTR_Rx>:
* protocol decode routine. 
*
******************************************************************************/

FMSTR_BOOL FMSTR_Rx(FMSTR_BCHR nRxChar)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
    FMSTR_SERIAL_FLAGS * pflg = &pcm_wFlags;
 8001a7a:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <FMSTR_Rx+0x158>)
 8001a7c:	60fb      	str	r3, [r7, #12]
    /* first, handle the replicated SOB characters */
    if(nRxChar == FMSTR_SOB)
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2b2b      	cmp	r3, #43	; 0x2b
 8001a82:	d115      	bne.n	8001ab0 <FMSTR_Rx+0x40>
    {
        pflg->flg.bRxLastCharSOB ^= 1;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f083 0301 	eor.w	r3, r3, #1
 8001a92:	b2d9      	uxtb	r1, r3
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	7813      	ldrb	r3, [r2, #0]
 8001a98:	f361 03c3 	bfi	r3, r1, #3, #1
 8001a9c:	7013      	strb	r3, [r2, #0]
        if(pflg->flg.bRxLastCharSOB)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <FMSTR_Rx+0x40>
        {
            /* this is either the first byte of replicated SOB or a  */
            /* real Start-of-Block mark - we will decide next time in FMSTR_Rx */
            return FMSTR_FALSE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e087      	b.n	8001bc0 <FMSTR_Rx+0x150>
        }
    }

    /* we have got a common character preceded by the SOB -  */
    /* this is the command code! */
    if(pflg->flg.bRxLastCharSOB)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d030      	beq.n	8001b20 <FMSTR_Rx+0xb0>
    {

        /* reset receiving process */
        pcm_pRxBuff = pcm_pCommBuffer;
 8001abe:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <FMSTR_Rx+0x15c>)
 8001ac0:	4a43      	ldr	r2, [pc, #268]	; (8001bd0 <FMSTR_Rx+0x160>)
 8001ac2:	601a      	str	r2, [r3, #0]
        *pcm_pRxBuff++ = nRxChar;
 8001ac4:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <FMSTR_Rx+0x15c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	4940      	ldr	r1, [pc, #256]	; (8001bcc <FMSTR_Rx+0x15c>)
 8001acc:	600a      	str	r2, [r1, #0]
 8001ace:	79fa      	ldrb	r2, [r7, #7]
 8001ad0:	701a      	strb	r2, [r3, #0]

        /* start computing the checksum */
        pcm_nRxCheckSum = nRxChar;
 8001ad2:	4a40      	ldr	r2, [pc, #256]	; (8001bd4 <FMSTR_Rx+0x164>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	7013      	strb	r3, [r2, #0]
        pcm_nRxTodo = 0U;
 8001ad8:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <FMSTR_Rx+0x168>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
    
        /* if the standard command was received, the message length will come in next byte */
        pflg->flg.bRxMsgLengthNext = 1U;
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	7813      	ldrb	r3, [r2, #0]
 8001ae2:	f043 0310 	orr.w	r3, r3, #16
 8001ae6:	7013      	strb	r3, [r2, #0]

        /* fast command? */
        if(!((~nRxChar) & FMSTR_FASTCMD))
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10e      	bne.n	8001b12 <FMSTR_Rx+0xa2>
        {
            /* fast command received, there will be no length information */
            pflg->flg.bRxMsgLengthNext = 0U;
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	7813      	ldrb	r3, [r2, #0]
 8001af8:	f36f 1304 	bfc	r3, #4, #1
 8001afc:	7013      	strb	r3, [r2, #0]
            /* as it is encoded in the command byte directly */
            pcm_nRxTodo = (FMSTR_SIZE8) 
                (((((FMSTR_SIZE8)nRxChar) & FMSTR_FASTCMD_DATALEN_MASK) >> FMSTR_FASTCMD_DATALEN_SHIFT) + 1U);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	08db      	lsrs	r3, r3, #3
            pcm_nRxTodo = (FMSTR_SIZE8) 
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	f003 0306 	and.w	r3, r3, #6
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <FMSTR_Rx+0x168>)
 8001b10:	701a      	strb	r2, [r3, #0]
        }

        /* command code stored & processed */
        pflg->flg.bRxLastCharSOB = 0U;
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	7813      	ldrb	r3, [r2, #0]
 8001b16:	f36f 03c3 	bfc	r3, #3, #1
 8001b1a:	7013      	strb	r3, [r2, #0]
        return FMSTR_FALSE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e04f      	b.n	8001bc0 <FMSTR_Rx+0x150>
    }

    /* we are waiting for the length byte */
    if(pflg->flg.bRxMsgLengthNext)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <FMSTR_Rx+0xd2>
    {
        /* this byte, total data length and the checksum */
        pcm_nRxTodo = (FMSTR_SIZE8) (1U + ((FMSTR_SIZE8)nRxChar) + 1U);
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	3302      	adds	r3, #2
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <FMSTR_Rx+0x168>)
 8001b36:	701a      	strb	r2, [r3, #0]
        /* now read the data bytes */
        pflg->flg.bRxMsgLengthNext = 0U;
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	7813      	ldrb	r3, [r2, #0]
 8001b3c:	f36f 1304 	bfc	r3, #4, #1
 8001b40:	7013      	strb	r3, [r2, #0]

    }

    /* waiting for a data byte? */
    if(pcm_nRxTodo)
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <FMSTR_Rx+0x168>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d039      	beq.n	8001bbe <FMSTR_Rx+0x14e>
    {
        /* add this byte to checksum */
        pcm_nRxCheckSum += nRxChar;
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <FMSTR_Rx+0x164>)
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	4413      	add	r3, r2
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <FMSTR_Rx+0x164>)
 8001b56:	701a      	strb	r2, [r3, #0]

        /* decrease number of expected bytes */
        pcm_nRxTodo--;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <FMSTR_Rx+0x168>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <FMSTR_Rx+0x168>)
 8001b62:	701a      	strb	r2, [r3, #0]
        /* was it the last byte of the message (checksum)? */
        if(!pcm_nRxTodo)
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <FMSTR_Rx+0x168>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d114      	bne.n	8001b96 <FMSTR_Rx+0x126>
        {
            /* receive buffer overflow? */
            if(pcm_pRxBuff == NULL)
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <FMSTR_Rx+0x15c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d103      	bne.n	8001b7c <FMSTR_Rx+0x10c>
            {
                FMSTR_SendError(FMSTR_STC_CMDTOOLONG);
 8001b74:	2083      	movs	r0, #131	; 0x83
 8001b76:	f7ff fead 	bl	80018d4 <FMSTR_SendError>
 8001b7a:	e00a      	b.n	8001b92 <FMSTR_Rx+0x122>
            }
            /* checksum error? */
            else if((pcm_nRxCheckSum & 0xffU) != 0U)
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <FMSTR_Rx+0x164>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <FMSTR_Rx+0x11c>
            {
                FMSTR_SendError(FMSTR_STC_CMDCSERR);
 8001b84:	2082      	movs	r0, #130	; 0x82
 8001b86:	f7ff fea5 	bl	80018d4 <FMSTR_SendError>
 8001b8a:	e002      	b.n	8001b92 <FMSTR_Rx+0x122>
#if (FMSTR_USE_USB_CDC) && (FMSTR_SHORT_INTR)
                /* Decode protocol and send response in Poll function */
                pflg->flg.bUsbReadyToDecode = 1U;
#else
                /* do decode now! */
                FMSTR_ProtocolDecoder(pcm_pCommBuffer);
 8001b8c:	4810      	ldr	r0, [pc, #64]	; (8001bd0 <FMSTR_Rx+0x160>)
 8001b8e:	f7fe ff05 	bl	800099c <FMSTR_ProtocolDecoder>
#endif
            }

            return FMSTR_TRUE;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e014      	b.n	8001bc0 <FMSTR_Rx+0x150>
        }
        /* not the last character yet */
        else 
        {   
            /* is there still a space in the buffer? */
            if(pcm_pRxBuff)
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <FMSTR_Rx+0x15c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00f      	beq.n	8001bbe <FMSTR_Rx+0x14e>
            {
                /*lint -e{946} pointer arithmetic is okay here (same array) */
                if(pcm_pRxBuff < (pcm_pCommBuffer + FMSTR_COMM_BUFFER_SIZE))
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <FMSTR_Rx+0x15c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FMSTR_Rx+0x16c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d207      	bcs.n	8001bb8 <FMSTR_Rx+0x148>
                {
                    /* store byte  */
                    *pcm_pRxBuff++ = nRxChar;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <FMSTR_Rx+0x15c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	4907      	ldr	r1, [pc, #28]	; (8001bcc <FMSTR_Rx+0x15c>)
 8001bb0:	600a      	str	r2, [r1, #0]
 8001bb2:	79fa      	ldrb	r2, [r7, #7]
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e002      	b.n	8001bbe <FMSTR_Rx+0x14e>
                else
                {
                    /* NULL rx pointer means buffer overflow - but we still need */
                    /* to receive all message characters (for the single-wire mode) */
                    /* so keep "receiving" - but throw away all characters from now */
                    pcm_pRxBuff = NULL;
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <FMSTR_Rx+0x15c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return FMSTR_FALSE;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2000290c 	.word	0x2000290c
 8001bcc:	20002918 	.word	0x20002918
 8001bd0:	200028cc 	.word	0x200028cc
 8001bd4:	2000291c 	.word	0x2000291c
 8001bd8:	20002911 	.word	0x20002911
 8001bdc:	20002908 	.word	0x20002908

08001be0 <FMSTR_InitSerial>:
* @brief    Serial communication initialization
*
******************************************************************************/

FMSTR_BOOL FMSTR_InitSerial(void)
{   
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
    /* initialize all state variables */
    pcm_wFlags.all = 0U;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <FMSTR_InitSerial+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
    pcm_nTxTodo = 0U;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <FMSTR_InitSerial+0x50>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
            
    /* Initialize SCI and JTAG interface */
#if (FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART) && (FMSTR_SCI_TWOWIRE_ONLY)
    /* to enable TX and RX together in FreeMASTER initialization */
      
    FMSTR_SCI_TE_RE();	
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <FMSTR_InitSerial+0x54>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <FMSTR_InitSerial+0x54>)
 8001bf6:	f043 030c 	orr.w	r3, r3, #12
 8001bfa:	6013      	str	r3, [r2, #0]
    FMSTR_SCI_DTXI();	// disable SCI transmit interrupt
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <FMSTR_InitSerial+0x54>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <FMSTR_InitSerial+0x54>)
 8001c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c06:	6013      	str	r3, [r2, #0]
    FMSTR_SCI_ERXI();	// enable SCI recieve interrupt
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <FMSTR_InitSerial+0x54>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <FMSTR_InitSerial+0x54>)
 8001c0e:	f043 0320 	orr.w	r3, r3, #32
 8001c12:	6013      	str	r3, [r2, #0]
#endif
    
#if (FMSTR_SHORT_INTR) & ((FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART) || (FMSTR_USE_JTAG))
    pcm_pRQueueRP = pcm_pRQueueBuffer;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <FMSTR_InitSerial+0x58>)
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <FMSTR_InitSerial+0x5c>)
 8001c18:	601a      	str	r2, [r3, #0]
    pcm_pRQueueWP = pcm_pRQueueBuffer;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <FMSTR_InitSerial+0x60>)
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <FMSTR_InitSerial+0x5c>)
 8001c1e:	601a      	str	r2, [r3, #0]
     * as soon as possible during Listen */
    pcm_nDebugTxPollCount = 0;
#endif

    /* start listening for commands */
    FMSTR_Listen();
 8001c20:	f7ff fe26 	bl	8001870 <FMSTR_Listen>
    return FMSTR_TRUE;
 8001c24:	2301      	movs	r3, #1
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000290c 	.word	0x2000290c
 8001c30:	20002910 	.word	0x20002910
 8001c34:	40004800 	.word	0x40004800
 8001c38:	20003120 	.word	0x20003120
 8001c3c:	20002920 	.word	0x20002920
 8001c40:	20003124 	.word	0x20003124

08001c44 <FMSTR_Poll>:
* and it is tried to be fixed periodically here in FMSTR_Poll.
*
*******************************************************************************/

void FMSTR_Poll(void)
{ 
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
    /*  */
    FMSTR_ProcessUSB();
#elif ((FMSTR_USE_SCI) || (FMSTR_USE_ESCI) || (FMSTR_USE_LPUART) || FMSTR_USE_JTAG)

    /* process queued SCI characters */
    FMSTR_RxDequeue(); 
 8001c48:	f7ff fd8e 	bl	8001768 <FMSTR_RxDequeue>
#if FMSTR_DEBUG_TX
    /* down-counting the polls for heuristic time measurement */
    if(pcm_nDebugTxPollCount != 0 && pcm_nDebugTxPollCount > FMSTR_DEBUG_TX_POLLCNT_MIN)
        pcm_nDebugTxPollCount--;
#endif
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c54:	f000 fb0f 	bl	8002276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c58:	f000 f81a 	bl	8001c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c5c:	f000 f97c 	bl	8001f58 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001c60:	f000 f92e 	bl	8001ec0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001c64:	f000 f87c 	bl	8001d60 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
#if !FMSTR_DISABLE
    FMSTR_Init();
 8001c68:	f7fe fe86 	bl	8000978 <FMSTR_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
   MAIN_CLOCK++;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <main+0x38>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <main+0x38>)
 8001c74:	6013      	str	r3, [r2, #0]
   //HAL_GPIO_WritePin(PIN_TEST_GPIO_Port,PIN_TEST_Pin, GPIO_PIN_SET);
   TIM1->CCR1 = 10625;
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <main+0x3c>)
 8001c78:	f642 1281 	movw	r2, #10625	; 0x2981
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
   //HAL_GPIO_WritePin(PIN_TEST_GPIO_Port,PIN_TEST_Pin, GPIO_PIN_RESET);
#if(!FMSTR_DISABLE)
    {
      FMSTR_Poll();
 8001c7e:	f7ff ffe1 	bl	8001c44 <FMSTR_Poll>
      FMSTR_Recorder();
 8001c82:	f7ff fbeb 	bl	800145c <FMSTR_Recorder>
   MAIN_CLOCK++;
 8001c86:	e7f1      	b.n	8001c6c <main+0x1c>
 8001c88:	20003200 	.word	0x20003200
 8001c8c:	40012c00 	.word	0x40012c00

08001c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0a8      	sub	sp, #160	; 0xa0
 8001c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c96:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c9a:	2238      	movs	r2, #56	; 0x38
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 f942 	bl	8005f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	2254      	movs	r2, #84	; 0x54
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f004 f934 	bl	8005f28 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f000 feb3 	bl	8002a2c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cd0:	2340      	movs	r3, #64	; 0x40
 8001cd2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ce6:	2355      	movs	r3, #85	; 0x55
 8001ce8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001cec:	2308      	movs	r3, #8
 8001cee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 ff46 	bl	8002b94 <HAL_RCC_OscConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d0e:	f000 f96f 	bl	8001ff0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d12:	230f      	movs	r3, #15
 8001d14:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d16:	2303      	movs	r3, #3
 8001d18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 fa49 	bl	80031c4 <HAL_RCC_ClockConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001d38:	f000 f95a 	bl	8001ff0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d44:	463b      	mov	r3, r7
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 fc58 	bl	80035fc <HAL_RCCEx_PeriphCLKConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001d52:	f000 f94d 	bl	8001ff0 <Error_Handler>
  }
}
 8001d56:	bf00      	nop
 8001d58:	37a0      	adds	r7, #160	; 0xa0
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b09c      	sub	sp, #112	; 0x70
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d66:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
 8001d90:	615a      	str	r2, [r3, #20]
 8001d92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2234      	movs	r2, #52	; 0x34
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 f8c4 	bl	8005f28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001da0:	4b45      	ldr	r3, [pc, #276]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001da2:	4a46      	ldr	r2, [pc, #280]	; (8001ebc <MX_TIM1_Init+0x15c>)
 8001da4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001da6:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001dac:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001dae:	2240      	movs	r2, #64	; 0x40
 8001db0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 21249;
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001db4:	f245 3201 	movw	r2, #21249	; 0x5301
 8001db8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dba:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dc0:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dcc:	483a      	ldr	r0, [pc, #232]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001dce:	f001 fe61 	bl	8003a94 <HAL_TIM_Base_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001dd8:	f000 f90a 	bl	8001ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001de2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001de6:	4619      	mov	r1, r3
 8001de8:	4833      	ldr	r0, [pc, #204]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001dea:	f002 f92d 	bl	8004048 <HAL_TIM_ConfigClockSource>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001df4:	f000 f8fc 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001df8:	482f      	ldr	r0, [pc, #188]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001dfa:	f001 fea2 	bl	8003b42 <HAL_TIM_PWM_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e04:	f000 f8f4 	bl	8001ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4827      	ldr	r0, [pc, #156]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001e1c:	f002 feba 	bl	8004b94 <HAL_TIMEx_MasterConfigSynchronization>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e26:	f000 f8e3 	bl	8001ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e2a:	2360      	movs	r3, #96	; 0x60
 8001e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e32:	2300      	movs	r3, #0
 8001e34:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e36:	2300      	movs	r3, #0
 8001e38:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	481a      	ldr	r0, [pc, #104]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001e50:	f001 ffea 	bl	8003e28 <HAL_TIM_PWM_ConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001e5a:	f000 f8c9 	bl	8001ff0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001e9c:	f002 ff10 	bl	8004cc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001ea6:	f000 f8a3 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001eaa:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <MX_TIM1_Init+0x158>)
 8001eac:	f000 f8ea 	bl	8002084 <HAL_TIM_MspPostInit>

}
 8001eb0:	bf00      	nop
 8001eb2:	3770      	adds	r7, #112	; 0x70
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20003204 	.word	0x20003204
 8001ebc:	40012c00 	.word	0x40012c00

08001ec0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ec6:	4a23      	ldr	r2, [pc, #140]	; (8001f54 <MX_USART3_UART_Init+0x94>)
 8001ec8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eca:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ed0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001efe:	2202      	movs	r2, #2
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f08:	4811      	ldr	r0, [pc, #68]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001f0a:	f002 ff8b 	bl	8004e24 <HAL_UART_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f14:	f000 f86c 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f18:	2100      	movs	r1, #0
 8001f1a:	480d      	ldr	r0, [pc, #52]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001f1c:	f003 ff16 	bl	8005d4c <HAL_UARTEx_SetTxFifoThreshold>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f26:	f000 f863 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4808      	ldr	r0, [pc, #32]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001f2e:	f003 ff4b 	bl	8005dc8 <HAL_UARTEx_SetRxFifoThreshold>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f38:	f000 f85a 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f3c:	4804      	ldr	r0, [pc, #16]	; (8001f50 <MX_USART3_UART_Init+0x90>)
 8001f3e:	f003 fecc 	bl	8005cda <HAL_UARTEx_DisableFifoMode>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f48:	f000 f852 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20003170 	.word	0x20003170
 8001f54:	40004800 	.word	0x40004800

08001f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <MX_GPIO_Init+0x94>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	4a1e      	ldr	r2, [pc, #120]	; (8001fec <MX_GPIO_Init+0x94>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <MX_GPIO_Init+0x94>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <MX_GPIO_Init+0x94>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	4a18      	ldr	r2, [pc, #96]	; (8001fec <MX_GPIO_Init+0x94>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <MX_GPIO_Init+0x94>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <MX_GPIO_Init+0x94>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <MX_GPIO_Init+0x94>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <MX_GPIO_Init+0x94>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_TEST_GPIO_Port, PIN_TEST_Pin, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc0:	f000 fd1c 	bl	80029fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PIN_TEST_Pin */
  GPIO_InitStruct.Pin = PIN_TEST_Pin;
 8001fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PIN_TEST_GPIO_Port, &GPIO_InitStruct);
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe0:	f000 fb8a 	bl	80026f8 <HAL_GPIO_Init>

}
 8001fe4:	bf00      	nop
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000

08001ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff4:	b672      	cpsid	i
}
 8001ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <Error_Handler+0x8>
	...

08001ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_MspInit+0x44>)
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <HAL_MspInit+0x44>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6613      	str	r3, [r2, #96]	; 0x60
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_MspInit+0x44>)
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_MspInit+0x44>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_MspInit+0x44>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_MspInit+0x44>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002032:	f000 fd9f 	bl	8002b74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_TIM_Base_MspInit+0x38>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10b      	bne.n	800206e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_TIM_Base_MspInit+0x3c>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <HAL_TIM_Base_MspInit+0x3c>)
 800205c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002060:	6613      	str	r3, [r2, #96]	; 0x60
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <HAL_TIM_Base_MspInit+0x3c>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40021000 	.word	0x40021000

08002084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <HAL_TIM_MspPostInit+0x6c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d11f      	bne.n	80020e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_TIM_MspPostInit+0x70>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_TIM_MspPostInit+0x70>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_TIM_MspPostInit+0x70>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020be:	2301      	movs	r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	4619      	mov	r1, r3
 80020d8:	4807      	ldr	r0, [pc, #28]	; (80020f8 <HAL_TIM_MspPostInit+0x74>)
 80020da:	f000 fb0d 	bl	80026f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */
  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 80020de:	2100      	movs	r1, #0
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f001 fd8f 	bl	8003c04 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020e6:	bf00      	nop
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40012c00 	.word	0x40012c00
 80020f4:	40021000 	.word	0x40021000
 80020f8:	48000800 	.word	0x48000800

080020fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <HAL_UART_MspInit+0x8c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d130      	bne.n	8002180 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_UART_MspInit+0x90>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	4a1a      	ldr	r2, [pc, #104]	; (800218c <HAL_UART_MspInit+0x90>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6593      	str	r3, [r2, #88]	; 0x58
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <HAL_UART_MspInit+0x90>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_UART_MspInit+0x90>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <HAL_UART_MspInit+0x90>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_UART_MspInit+0x90>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 800214e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800215c:	2301      	movs	r3, #1
 800215e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002160:	2307      	movs	r3, #7
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	4809      	ldr	r0, [pc, #36]	; (8002190 <HAL_UART_MspInit+0x94>)
 800216c:	f000 fac4 	bl	80026f8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	2027      	movs	r0, #39	; 0x27
 8002176:	f000 f9ca 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800217a:	2027      	movs	r0, #39	; 0x27
 800217c:	f000 f9e1 	bl	8002542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002180:	bf00      	nop
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40004800 	.word	0x40004800
 800218c:	40021000 	.word	0x40021000
 8002190:	48000800 	.word	0x48000800

08002194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002198:	e7fe      	b.n	8002198 <NMI_Handler+0x4>

0800219a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219e:	e7fe      	b.n	800219e <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <MemManage_Handler+0x4>

080021a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021aa:	e7fe      	b.n	80021aa <BusFault_Handler+0x4>

080021ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <UsageFault_Handler+0x4>

080021b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e0:	f000 f89c 	bl	800231c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
#if !FMSTR_DISABLE
  FMSTR_ProcessSCI();
 80021ec:	f7ff faf2 	bl	80017d4 <FMSTR_ProcessSCI>
#endif
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <USART3_IRQHandler+0x14>)
 80021f2:	f002 fe67 	bl	8004ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20003170 	.word	0x20003170

08002200 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <SystemInit+0x20>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <SystemInit+0x20>)
 800220c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002226:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002228:	480d      	ldr	r0, [pc, #52]	; (8002260 <LoopForever+0x6>)
  ldr r1, =_edata
 800222a:	490e      	ldr	r1, [pc, #56]	; (8002264 <LoopForever+0xa>)
  ldr r2, =_sidata
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <LoopForever+0xe>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002240:	4c0b      	ldr	r4, [pc, #44]	; (8002270 <LoopForever+0x16>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800224e:	f7ff ffd7 	bl	8002200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002252:	f003 fe45 	bl	8005ee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002256:	f7ff fcfb 	bl	8001c50 <main>

0800225a <LoopForever>:

LoopForever:
    b LoopForever
 800225a:	e7fe      	b.n	800225a <LoopForever>
  ldr   r0, =_estack
 800225c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002268:	08005fbc 	.word	0x08005fbc
  ldr r2, =_sbss
 800226c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002270:	20003254 	.word	0x20003254

08002274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC1_2_IRQHandler>

08002276 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002280:	2003      	movs	r0, #3
 8002282:	f000 f939 	bl	80024f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002286:	2000      	movs	r0, #0
 8002288:	f000 f80e 	bl	80022a8 <HAL_InitTick>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	71fb      	strb	r3, [r7, #7]
 8002296:	e001      	b.n	800229c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002298:	f7ff feb0 	bl	8001ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800229c:	79fb      	ldrb	r3, [r7, #7]

}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_InitTick+0x68>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d022      	beq.n	8002302 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_InitTick+0x6c>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_InitTick+0x68>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 f944 	bl	800255e <HAL_SYSTICK_Config>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10f      	bne.n	80022fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b0f      	cmp	r3, #15
 80022e0:	d809      	bhi.n	80022f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e2:	2200      	movs	r2, #0
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	f04f 30ff 	mov.w	r0, #4294967295
 80022ea:	f000 f910 	bl	800250e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <HAL_InitTick+0x70>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	e007      	b.n	8002306 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e004      	b.n	8002306 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	e001      	b.n	8002306 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000008 	.word	0x20000008
 8002314:	20000000 	.word	0x20000000
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_IncTick+0x1c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_IncTick+0x20>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4413      	add	r3, r2
 800232a:	4a03      	ldr	r2, [pc, #12]	; (8002338 <HAL_IncTick+0x1c>)
 800232c:	6013      	str	r3, [r2, #0]
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	20003250 	.word	0x20003250
 800233c:	20000008 	.word	0x20000008

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20003250 	.word	0x20003250

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238a:	4a04      	ldr	r2, [pc, #16]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	60d3      	str	r3, [r2, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db0b      	blt.n	80023e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <__NVIC_EnableIRQ+0x38>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2001      	movs	r0, #1
 80023de:	fa00 f202 	lsl.w	r2, r0, r2
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	; (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	; (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f1c3 0307 	rsb	r3, r3, #7
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf28      	it	cs
 800246a:	2304      	movcs	r3, #4
 800246c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3304      	adds	r3, #4
 8002472:	2b06      	cmp	r3, #6
 8002474:	d902      	bls.n	800247c <NVIC_EncodePriority+0x30>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3b03      	subs	r3, #3
 800247a:	e000      	b.n	800247e <NVIC_EncodePriority+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	f04f 32ff 	mov.w	r2, #4294967295
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002494:	f04f 31ff 	mov.w	r1, #4294967295
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43d9      	mvns	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	4313      	orrs	r3, r2
         );
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	; 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c4:	d301      	bcc.n	80024ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00f      	b.n	80024ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <SysTick_Config+0x40>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d2:	210f      	movs	r1, #15
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f7ff ff8e 	bl	80023f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <SysTick_Config+0x40>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e2:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <SysTick_Config+0x40>)
 80024e4:	2207      	movs	r2, #7
 80024e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	e000e010 	.word	0xe000e010

080024f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff29 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800251c:	f7ff ff40 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 8002520:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	6978      	ldr	r0, [r7, #20]
 8002528:	f7ff ff90 	bl	800244c <NVIC_EncodePriority>
 800252c:	4602      	mov	r2, r0
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff5f 	bl	80023f8 <__NVIC_SetPriority>
}
 800253a:	bf00      	nop
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff33 	bl	80023bc <__NVIC_EnableIRQ>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ffa4 	bl	80024b4 <SysTick_Config>
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d005      	beq.n	800259a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2204      	movs	r2, #4
 8002592:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	e037      	b.n	800260a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 020e 	bic.w	r2, r2, #14
 80025a8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f003 021f 	and.w	r2, r3, #31
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2101      	movs	r1, #1
 80025d8:	fa01 f202 	lsl.w	r2, r1, r2
 80025dc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025e6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00c      	beq.n	800260a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025fe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002608:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d00d      	beq.n	800265c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2204      	movs	r2, #4
 8002644:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e047      	b.n	80026ec <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 020e 	bic.w	r2, r2, #14
 800266a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800268a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f202 	lsl.w	r2, r1, r2
 800269e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00c      	beq.n	80026cc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
    }
  }
  return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002706:	e15a      	b.n	80029be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	4013      	ands	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 814c 	beq.w	80029b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d00b      	beq.n	8002740 <HAL_GPIO_Init+0x48>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d007      	beq.n	8002740 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002734:	2b11      	cmp	r3, #17
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b12      	cmp	r3, #18
 800273e:	d130      	bne.n	80027a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002776:	2201      	movs	r2, #1
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 0201 	and.w	r2, r3, #1
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	2203      	movs	r2, #3
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0xea>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b12      	cmp	r3, #18
 80027e0:	d123      	bne.n	800282a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	220f      	movs	r2, #15
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	6939      	ldr	r1, [r7, #16]
 8002826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0203 	and.w	r2, r3, #3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80a6 	beq.w	80029b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286c:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <HAL_GPIO_Init+0x2e4>)
 800286e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002870:	4a5a      	ldr	r2, [pc, #360]	; (80029dc <HAL_GPIO_Init+0x2e4>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6613      	str	r3, [r2, #96]	; 0x60
 8002878:	4b58      	ldr	r3, [pc, #352]	; (80029dc <HAL_GPIO_Init+0x2e4>)
 800287a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002884:	4a56      	ldr	r2, [pc, #344]	; (80029e0 <HAL_GPIO_Init+0x2e8>)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	3302      	adds	r3, #2
 800288c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	220f      	movs	r2, #15
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028ae:	d01f      	beq.n	80028f0 <HAL_GPIO_Init+0x1f8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a4c      	ldr	r2, [pc, #304]	; (80029e4 <HAL_GPIO_Init+0x2ec>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d019      	beq.n	80028ec <HAL_GPIO_Init+0x1f4>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a4b      	ldr	r2, [pc, #300]	; (80029e8 <HAL_GPIO_Init+0x2f0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d013      	beq.n	80028e8 <HAL_GPIO_Init+0x1f0>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a4a      	ldr	r2, [pc, #296]	; (80029ec <HAL_GPIO_Init+0x2f4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00d      	beq.n	80028e4 <HAL_GPIO_Init+0x1ec>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a49      	ldr	r2, [pc, #292]	; (80029f0 <HAL_GPIO_Init+0x2f8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d007      	beq.n	80028e0 <HAL_GPIO_Init+0x1e8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a48      	ldr	r2, [pc, #288]	; (80029f4 <HAL_GPIO_Init+0x2fc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_GPIO_Init+0x1e4>
 80028d8:	2305      	movs	r3, #5
 80028da:	e00a      	b.n	80028f2 <HAL_GPIO_Init+0x1fa>
 80028dc:	2306      	movs	r3, #6
 80028de:	e008      	b.n	80028f2 <HAL_GPIO_Init+0x1fa>
 80028e0:	2304      	movs	r3, #4
 80028e2:	e006      	b.n	80028f2 <HAL_GPIO_Init+0x1fa>
 80028e4:	2303      	movs	r3, #3
 80028e6:	e004      	b.n	80028f2 <HAL_GPIO_Init+0x1fa>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e002      	b.n	80028f2 <HAL_GPIO_Init+0x1fa>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_GPIO_Init+0x1fa>
 80028f0:	2300      	movs	r3, #0
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	f002 0203 	and.w	r2, r2, #3
 80028f8:	0092      	lsls	r2, r2, #2
 80028fa:	4093      	lsls	r3, r2
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002902:	4937      	ldr	r1, [pc, #220]	; (80029e0 <HAL_GPIO_Init+0x2e8>)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002910:	4b39      	ldr	r3, [pc, #228]	; (80029f8 <HAL_GPIO_Init+0x300>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	43db      	mvns	r3, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002934:	4a30      	ldr	r2, [pc, #192]	; (80029f8 <HAL_GPIO_Init+0x300>)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800293a:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_GPIO_Init+0x300>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800295e:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <HAL_GPIO_Init+0x300>)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002964:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_GPIO_Init+0x300>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002988:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <HAL_GPIO_Init+0x300>)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <HAL_GPIO_Init+0x300>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029b2:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <HAL_GPIO_Init+0x300>)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	3301      	adds	r3, #1
 80029bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f47f ae9d 	bne.w	8002708 <HAL_GPIO_Init+0x10>
  }
}
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
 80029d2:	371c      	adds	r7, #28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40010000 	.word	0x40010000
 80029e4:	48000400 	.word	0x48000400
 80029e8:	48000800 	.word	0x48000800
 80029ec:	48000c00 	.word	0x48000c00
 80029f0:	48001000 	.word	0x48001000
 80029f4:	48001400 	.word	0x48001400
 80029f8:	40010400 	.word	0x40010400

080029fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a0c:	787b      	ldrb	r3, [r7, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a18:	e002      	b.n	8002a20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a1a:	887a      	ldrh	r2, [r7, #2]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d141      	bne.n	8002abe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a3a:	4b4b      	ldr	r3, [pc, #300]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a46:	d131      	bne.n	8002aac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a48:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a4e:	4a46      	ldr	r2, [pc, #280]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a58:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a60:	4a41      	ldr	r2, [pc, #260]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a68:	4b40      	ldr	r3, [pc, #256]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2232      	movs	r2, #50	; 0x32
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	4a3f      	ldr	r2, [pc, #252]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	0c9b      	lsrs	r3, r3, #18
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a7e:	e002      	b.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a86:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a92:	d102      	bne.n	8002a9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f2      	bne.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a9a:	4b33      	ldr	r3, [pc, #204]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa6:	d158      	bne.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e057      	b.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aac:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab2:	4a2d      	ldr	r2, [pc, #180]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ab8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002abc:	e04d      	b.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac4:	d141      	bne.n	8002b4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ac6:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad2:	d131      	bne.n	8002b38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ad4:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ada:	4a23      	ldr	r2, [pc, #140]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae4:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aec:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2232      	movs	r2, #50	; 0x32
 8002afa:	fb02 f303 	mul.w	r3, r2, r3
 8002afe:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	0c9b      	lsrs	r3, r3, #18
 8002b06:	3301      	adds	r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0a:	e002      	b.n	8002b12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1e:	d102      	bne.n	8002b26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f2      	bne.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b32:	d112      	bne.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e011      	b.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b48:	e007      	b.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b52:	4a05      	ldr	r2, [pc, #20]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	431bde83 	.word	0x431bde83

08002b74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b82:	6093      	str	r3, [r2, #8]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40007000 	.word	0x40007000

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e308      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d075      	beq.n	8002c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb2:	4ba3      	ldr	r3, [pc, #652]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bbc:	4ba0      	ldr	r3, [pc, #640]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	d102      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x3e>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d002      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x44>
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	4b99      	ldr	r3, [pc, #612]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05b      	beq.n	8002c9c <HAL_RCC_OscConfig+0x108>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d157      	bne.n	8002c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e2e3      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x74>
 8002bfa:	4b91      	ldr	r3, [pc, #580]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a90      	ldr	r2, [pc, #576]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e01d      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x98>
 8002c12:	4b8b      	ldr	r3, [pc, #556]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a8a      	ldr	r2, [pc, #552]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b88      	ldr	r3, [pc, #544]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a87      	ldr	r2, [pc, #540]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c2c:	4b84      	ldr	r3, [pc, #528]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a83      	ldr	r2, [pc, #524]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b81      	ldr	r3, [pc, #516]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a80      	ldr	r2, [pc, #512]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7ff fb78 	bl	8002340 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c54:	f7ff fb74 	bl	8002340 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e2a8      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c66:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0xc0>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7ff fb64 	bl	8002340 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7ff fb60 	bl	8002340 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e294      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8e:	4b6c      	ldr	r3, [pc, #432]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0xe8>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d075      	beq.n	8002d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002caa:	4b65      	ldr	r3, [pc, #404]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb4:	4b62      	ldr	r3, [pc, #392]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b0c      	cmp	r3, #12
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_OscConfig+0x136>
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x13c>
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d11f      	bne.n	8002d10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x154>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e267      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce8:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	4952      	ldr	r1, [pc, #328]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cfc:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <HAL_RCC_OscConfig+0x2b0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fad1 	bl	80022a8 <HAL_InitTick>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d043      	beq.n	8002d94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e253      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d023      	beq.n	8002d60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d18:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a48      	ldr	r2, [pc, #288]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7ff fb0c 	bl	8002340 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7ff fb08 	bl	8002340 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e23c      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d3e:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b3d      	ldr	r3, [pc, #244]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	061b      	lsls	r3, r3, #24
 8002d58:	4939      	ldr	r1, [pc, #228]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
 8002d5e:	e01a      	b.n	8002d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d60:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a36      	ldr	r2, [pc, #216]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002d66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7ff fae8 	bl	8002340 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d74:	f7ff fae4 	bl	8002340 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e218      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d86:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x1e0>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03c      	beq.n	8002e1c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01c      	beq.n	8002de4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002daa:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db0:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7ff fac1 	bl	8002340 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc2:	f7ff fabd 	bl	8002340 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1f1      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0ef      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x22e>
 8002de2:	e01b      	b.n	8002e1c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dea:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7ff faa4 	bl	8002340 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7ff faa0 	bl	8002340 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e1d4      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ef      	bne.n	8002dfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80ab 	beq.w	8002f80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_RCC_OscConfig+0x2b4>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e005      	b.n	8002e4a <HAL_RCC_OscConfig+0x2b6>
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	20000004 	.word	0x20000004
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4baf      	ldr	r3, [pc, #700]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	4aae      	ldr	r2, [pc, #696]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6593      	str	r3, [r2, #88]	; 0x58
 8002e5a:	4bac      	ldr	r3, [pc, #688]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e66:	2301      	movs	r3, #1
 8002e68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6a:	4ba9      	ldr	r3, [pc, #676]	; (8003110 <HAL_RCC_OscConfig+0x57c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e76:	4ba6      	ldr	r3, [pc, #664]	; (8003110 <HAL_RCC_OscConfig+0x57c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4aa5      	ldr	r2, [pc, #660]	; (8003110 <HAL_RCC_OscConfig+0x57c>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7ff fa5d 	bl	8002340 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7ff fa59 	bl	8002340 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e18d      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9c:	4b9c      	ldr	r3, [pc, #624]	; (8003110 <HAL_RCC_OscConfig+0x57c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d108      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x32e>
 8002eb0:	4b96      	ldr	r3, [pc, #600]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a95      	ldr	r2, [pc, #596]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec0:	e024      	b.n	8002f0c <HAL_RCC_OscConfig+0x378>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b05      	cmp	r3, #5
 8002ec8:	d110      	bne.n	8002eec <HAL_RCC_OscConfig+0x358>
 8002eca:	4b90      	ldr	r3, [pc, #576]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed0:	4a8e      	ldr	r2, [pc, #568]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eda:	4b8c      	ldr	r3, [pc, #560]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	4a8a      	ldr	r2, [pc, #552]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eea:	e00f      	b.n	8002f0c <HAL_RCC_OscConfig+0x378>
 8002eec:	4b87      	ldr	r3, [pc, #540]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	4a86      	ldr	r2, [pc, #536]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002efc:	4b83      	ldr	r3, [pc, #524]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	4a82      	ldr	r2, [pc, #520]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d016      	beq.n	8002f42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7ff fa14 	bl	8002340 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7ff fa10 	bl	8002340 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e142      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f32:	4b76      	ldr	r3, [pc, #472]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ed      	beq.n	8002f1c <HAL_RCC_OscConfig+0x388>
 8002f40:	e015      	b.n	8002f6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7ff f9fd 	bl	8002340 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7ff f9f9 	bl	8002340 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e12b      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f60:	4b6a      	ldr	r3, [pc, #424]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ed      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b65      	ldr	r3, [pc, #404]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	4a64      	ldr	r2, [pc, #400]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d03c      	beq.n	8003006 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01c      	beq.n	8002fce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f94:	4b5d      	ldr	r3, [pc, #372]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f9a:	4a5c      	ldr	r2, [pc, #368]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7ff f9cc 	bl	8002340 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fac:	f7ff f9c8 	bl	8002340 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e0fc      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fbe:	4b53      	ldr	r3, [pc, #332]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ef      	beq.n	8002fac <HAL_RCC_OscConfig+0x418>
 8002fcc:	e01b      	b.n	8003006 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fce:	4b4f      	ldr	r3, [pc, #316]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fd4:	4a4d      	ldr	r2, [pc, #308]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7ff f9af 	bl	8002340 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fe6:	f7ff f9ab 	bl	8002340 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e0df      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ff8:	4b44      	ldr	r3, [pc, #272]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8002ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ef      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80d3 	beq.w	80031b6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003010:	4b3e      	ldr	r3, [pc, #248]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b0c      	cmp	r3, #12
 800301a:	f000 808d 	beq.w	8003138 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d15a      	bne.n	80030dc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b39      	ldr	r3, [pc, #228]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a38      	ldr	r2, [pc, #224]	; (800310c <HAL_RCC_OscConfig+0x578>)
 800302c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7ff f985 	bl	8002340 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303a:	f7ff f981 	bl	8002340 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e0b5      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304c:	4b2f      	ldr	r3, [pc, #188]	; (800310c <HAL_RCC_OscConfig+0x578>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003058:	4b2c      	ldr	r3, [pc, #176]	; (800310c <HAL_RCC_OscConfig+0x578>)
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCC_OscConfig+0x580>)
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6a11      	ldr	r1, [r2, #32]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003068:	3a01      	subs	r2, #1
 800306a:	0112      	lsls	r2, r2, #4
 800306c:	4311      	orrs	r1, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003072:	0212      	lsls	r2, r2, #8
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800307a:	0852      	lsrs	r2, r2, #1
 800307c:	3a01      	subs	r2, #1
 800307e:	0552      	lsls	r2, r2, #21
 8003080:	4311      	orrs	r1, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003086:	0852      	lsrs	r2, r2, #1
 8003088:	3a01      	subs	r2, #1
 800308a:	0652      	lsls	r2, r2, #25
 800308c:	4311      	orrs	r1, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003092:	06d2      	lsls	r2, r2, #27
 8003094:	430a      	orrs	r2, r1
 8003096:	491d      	ldr	r1, [pc, #116]	; (800310c <HAL_RCC_OscConfig+0x578>)
 8003098:	4313      	orrs	r3, r2
 800309a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <HAL_RCC_OscConfig+0x578>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1a      	ldr	r2, [pc, #104]	; (800310c <HAL_RCC_OscConfig+0x578>)
 80030a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a8:	4b18      	ldr	r3, [pc, #96]	; (800310c <HAL_RCC_OscConfig+0x578>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_RCC_OscConfig+0x578>)
 80030ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7ff f944 	bl	8002340 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7ff f940 	bl	8002340 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e074      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <HAL_RCC_OscConfig+0x578>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x528>
 80030da:	e06c      	b.n	80031b6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_OscConfig+0x578>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0a      	ldr	r2, [pc, #40]	; (800310c <HAL_RCC_OscConfig+0x578>)
 80030e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <HAL_RCC_OscConfig+0x578>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a07      	ldr	r2, [pc, #28]	; (800310c <HAL_RCC_OscConfig+0x578>)
 80030ee:	f023 0303 	bic.w	r3, r3, #3
 80030f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_RCC_OscConfig+0x578>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_RCC_OscConfig+0x578>)
 80030fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003102:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7ff f91c 	bl	8002340 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310a:	e00e      	b.n	800312a <HAL_RCC_OscConfig+0x596>
 800310c:	40021000 	.word	0x40021000
 8003110:	40007000 	.word	0x40007000
 8003114:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7ff f912 	bl	8002340 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e046      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312a:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_RCC_OscConfig+0x62c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x584>
 8003136:	e03e      	b.n	80031b6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e039      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003144:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <HAL_RCC_OscConfig+0x62c>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 0203 	and.w	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	429a      	cmp	r2, r3
 8003156:	d12c      	bne.n	80031b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	3b01      	subs	r3, #1
 8003164:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d123      	bne.n	80031b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d11b      	bne.n	80031b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d113      	bne.n	80031b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	3b01      	subs	r3, #1
 8003198:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	3b01      	subs	r3, #1
 80031ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000

080031c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e11e      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b91      	ldr	r3, [pc, #580]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d910      	bls.n	800320c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b8e      	ldr	r3, [pc, #568]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 020f 	bic.w	r2, r3, #15
 80031f2:	498c      	ldr	r1, [pc, #560]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b8a      	ldr	r3, [pc, #552]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e106      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d073      	beq.n	8003300 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d129      	bne.n	8003274 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003220:	4b81      	ldr	r3, [pc, #516]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0f4      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003230:	f000 f99e 	bl	8003570 <RCC_GetSysClockFreqFromPLLSource>
 8003234:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4a7c      	ldr	r2, [pc, #496]	; (800342c <HAL_RCC_ClockConfig+0x268>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d93f      	bls.n	80032be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800323e:	4b7a      	ldr	r3, [pc, #488]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003252:	2b00      	cmp	r3, #0
 8003254:	d033      	beq.n	80032be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800325a:	2b00      	cmp	r3, #0
 800325c:	d12f      	bne.n	80032be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800325e:	4b72      	ldr	r3, [pc, #456]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003266:	4a70      	ldr	r2, [pc, #448]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e024      	b.n	80032be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d107      	bne.n	800328c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800327c:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0c6      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328c:	4b66      	ldr	r3, [pc, #408]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0be      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800329c:	f000 f8ce 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4a61      	ldr	r2, [pc, #388]	; (800342c <HAL_RCC_ClockConfig+0x268>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d909      	bls.n	80032be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032aa:	4b5f      	ldr	r3, [pc, #380]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032b2:	4a5d      	ldr	r2, [pc, #372]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b5a      	ldr	r3, [pc, #360]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4957      	ldr	r1, [pc, #348]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d0:	f7ff f836 	bl	8002340 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7ff f832 	bl	8002340 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e095      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b4e      	ldr	r3, [pc, #312]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d023      	beq.n	8003354 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003318:	4b43      	ldr	r3, [pc, #268]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a42      	ldr	r2, [pc, #264]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800331e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003322:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003330:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003338:	4a3b      	ldr	r2, [pc, #236]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800333a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800333e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003340:	4b39      	ldr	r3, [pc, #228]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4936      	ldr	r1, [pc, #216]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
 8003352:	e008      	b.n	8003366 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b80      	cmp	r3, #128	; 0x80
 8003358:	d105      	bne.n	8003366 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800335a:	4b33      	ldr	r3, [pc, #204]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4a32      	ldr	r2, [pc, #200]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003360:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003364:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003366:	4b2f      	ldr	r3, [pc, #188]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d21d      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003374:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 020f 	bic.w	r2, r3, #15
 800337c:	4929      	ldr	r1, [pc, #164]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003384:	f7fe ffdc 	bl	8002340 <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338c:	f7fe ffd8 	bl	8002340 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e03b      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1ed      	bne.n	800338c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033bc:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4917      	ldr	r1, [pc, #92]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	490f      	ldr	r1, [pc, #60]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033ee:	f000 f825 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	490c      	ldr	r1, [pc, #48]	; (8003430 <HAL_RCC_ClockConfig+0x26c>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	fa22 f303 	lsr.w	r3, r2, r3
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HAL_RCC_ClockConfig+0x270>)
 800340c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_RCC_ClockConfig+0x274>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe ff48 	bl	80022a8 <HAL_InitTick>
 8003418:	4603      	mov	r3, r0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40022000 	.word	0x40022000
 8003428:	40021000 	.word	0x40021000
 800342c:	04c4b400 	.word	0x04c4b400
 8003430:	08005f6c 	.word	0x08005f6c
 8003434:	20000000 	.word	0x20000000
 8003438:	20000004 	.word	0x20000004

0800343c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003442:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b04      	cmp	r3, #4
 800344c:	d102      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800344e:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e047      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d102      	bne.n	8003466 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003460:	4b26      	ldr	r3, [pc, #152]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	e03e      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003466:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d136      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800347c:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3301      	adds	r3, #1
 8003488:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d10c      	bne.n	80034aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003490:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	4a16      	ldr	r2, [pc, #88]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800349a:	68d2      	ldr	r2, [r2, #12]
 800349c:	0a12      	lsrs	r2, r2, #8
 800349e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
      break;
 80034a8:	e00c      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034aa:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	4a10      	ldr	r2, [pc, #64]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	0a12      	lsrs	r2, r2, #8
 80034b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
      break;
 80034c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0e5b      	lsrs	r3, r3, #25
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	3301      	adds	r3, #1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	e001      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034e4:	693b      	ldr	r3, [r7, #16]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	00f42400 	.word	0x00f42400
 80034fc:	007a1200 	.word	0x007a1200

08003500 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <HAL_RCC_GetHCLKFreq+0x14>)
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20000000 	.word	0x20000000

08003518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800351c:	f7ff fff0 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8003520:	4602      	mov	r2, r0
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	4904      	ldr	r1, [pc, #16]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x28>)
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	08005f7c 	.word	0x08005f7c

08003544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003548:	f7ff ffda 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0adb      	lsrs	r3, r3, #11
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4904      	ldr	r1, [pc, #16]	; (800356c <HAL_RCC_GetPCLK2Freq+0x28>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	08005f7c 	.word	0x08005f7c

08003570 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	3301      	adds	r3, #1
 800358c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d10c      	bne.n	80035ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800359e:	68d2      	ldr	r2, [r2, #12]
 80035a0:	0a12      	lsrs	r2, r2, #8
 80035a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035a6:	fb02 f303 	mul.w	r3, r2, r3
 80035aa:	617b      	str	r3, [r7, #20]
    break;
 80035ac:	e00c      	b.n	80035c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035b8:	68d2      	ldr	r2, [r2, #12]
 80035ba:	0a12      	lsrs	r2, r2, #8
 80035bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]
    break;
 80035c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	0e5b      	lsrs	r3, r3, #25
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	3301      	adds	r3, #1
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035e2:	687b      	ldr	r3, [r7, #4]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40021000 	.word	0x40021000
 80035f4:	007a1200 	.word	0x007a1200
 80035f8:	00f42400 	.word	0x00f42400

080035fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003604:	2300      	movs	r3, #0
 8003606:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003608:	2300      	movs	r3, #0
 800360a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8098 	beq.w	800374a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361e:	4b43      	ldr	r3, [pc, #268]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10d      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	4b40      	ldr	r3, [pc, #256]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	4a3f      	ldr	r2, [pc, #252]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003634:	6593      	str	r3, [r2, #88]	; 0x58
 8003636:	4b3d      	ldr	r3, [pc, #244]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003642:	2301      	movs	r3, #1
 8003644:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003646:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a39      	ldr	r2, [pc, #228]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003652:	f7fe fe75 	bl	8002340 <HAL_GetTick>
 8003656:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003658:	e009      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365a:	f7fe fe71 	bl	8002340 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d902      	bls.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	74fb      	strb	r3, [r7, #19]
        break;
 800366c:	e005      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800366e:	4b30      	ldr	r3, [pc, #192]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ef      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d159      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003680:	4b2a      	ldr	r3, [pc, #168]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01e      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	429a      	cmp	r2, r3
 800369a:	d019      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800369c:	4b23      	ldr	r3, [pc, #140]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036a8:	4b20      	ldr	r3, [pc, #128]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	4a1f      	ldr	r2, [pc, #124]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036b8:	4b1c      	ldr	r3, [pc, #112]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	4a1b      	ldr	r2, [pc, #108]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d016      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fe fe31 	bl	8002340 <HAL_GetTick>
 80036de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e0:	e00b      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fe fe2d 	bl	8002340 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d902      	bls.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	74fb      	strb	r3, [r7, #19]
            break;
 80036f8:	e006      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fa:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ec      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371c:	4903      	ldr	r1, [pc, #12]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003724:	e008      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	74bb      	strb	r3, [r7, #18]
 800372a:	e005      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800372c:	40021000 	.word	0x40021000
 8003730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003738:	7c7b      	ldrb	r3, [r7, #17]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373e:	4baf      	ldr	r3, [pc, #700]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	4aae      	ldr	r2, [pc, #696]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003748:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003756:	4ba9      	ldr	r3, [pc, #676]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f023 0203 	bic.w	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	49a5      	ldr	r1, [pc, #660]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003778:	4ba0      	ldr	r3, [pc, #640]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f023 020c 	bic.w	r2, r3, #12
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	499d      	ldr	r1, [pc, #628]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800379a:	4b98      	ldr	r3, [pc, #608]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4994      	ldr	r1, [pc, #592]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037bc:	4b8f      	ldr	r3, [pc, #572]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	498c      	ldr	r1, [pc, #560]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037de:	4b87      	ldr	r3, [pc, #540]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	4983      	ldr	r1, [pc, #524]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003800:	4b7e      	ldr	r3, [pc, #504]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	497b      	ldr	r1, [pc, #492]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003822:	4b76      	ldr	r3, [pc, #472]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	4972      	ldr	r1, [pc, #456]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003844:	4b6d      	ldr	r3, [pc, #436]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	496a      	ldr	r1, [pc, #424]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003866:	4b65      	ldr	r3, [pc, #404]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	4961      	ldr	r1, [pc, #388]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003888:	4b5c      	ldr	r3, [pc, #368]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800388a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	4959      	ldr	r1, [pc, #356]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038aa:	4b54      	ldr	r3, [pc, #336]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	4950      	ldr	r1, [pc, #320]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038cc:	4b4b      	ldr	r3, [pc, #300]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	4948      	ldr	r1, [pc, #288]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ea:	d105      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ec:	4b43      	ldr	r3, [pc, #268]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4a42      	ldr	r2, [pc, #264]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003900:	2b00      	cmp	r3, #0
 8003902:	d015      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003904:	4b3d      	ldr	r3, [pc, #244]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003912:	493a      	ldr	r1, [pc, #232]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003922:	d105      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003924:	4b35      	ldr	r3, [pc, #212]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4a34      	ldr	r2, [pc, #208]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800392a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800392e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d015      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800393c:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	492c      	ldr	r1, [pc, #176]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800395a:	d105      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800395c:	4b27      	ldr	r3, [pc, #156]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003966:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d015      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003974:	4b21      	ldr	r3, [pc, #132]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	491e      	ldr	r1, [pc, #120]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003992:	d105      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a18      	ldr	r2, [pc, #96]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800399a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800399e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d015      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039ac:	4b13      	ldr	r3, [pc, #76]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4910      	ldr	r1, [pc, #64]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ca:	d105      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d018      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	4902      	ldr	r1, [pc, #8]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039fa:	e001      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80039fc:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a08:	d105      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a0a:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d015      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003a22:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a30:	4917      	ldr	r1, [pc, #92]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d105      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a42:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d015      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a68:	4909      	ldr	r1, [pc, #36]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a78:	d105      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a84:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a86:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e049      	b.n	8003b3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fe fac2 	bl	8002044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f000 fbca 	bl	800426c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e049      	b.n	8003be8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f841 	bl	8003bf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4610      	mov	r0, r2
 8003b82:	f000 fb73 	bl	800426c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <HAL_TIM_PWM_Start+0x24>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e03c      	b.n	8003ca2 <HAL_TIM_PWM_Start+0x9e>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d109      	bne.n	8003c42 <HAL_TIM_PWM_Start+0x3e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	bf14      	ite	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	2300      	moveq	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	e02f      	b.n	8003ca2 <HAL_TIM_PWM_Start+0x9e>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d109      	bne.n	8003c5c <HAL_TIM_PWM_Start+0x58>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e022      	b.n	8003ca2 <HAL_TIM_PWM_Start+0x9e>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d109      	bne.n	8003c76 <HAL_TIM_PWM_Start+0x72>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	bf14      	ite	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	2300      	moveq	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	e015      	b.n	8003ca2 <HAL_TIM_PWM_Start+0x9e>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d109      	bne.n	8003c90 <HAL_TIM_PWM_Start+0x8c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e008      	b.n	8003ca2 <HAL_TIM_PWM_Start+0x9e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0a6      	b.n	8003df8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <HAL_TIM_PWM_Start+0xb6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb8:	e023      	b.n	8003d02 <HAL_TIM_PWM_Start+0xfe>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_PWM_Start+0xc6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cc8:	e01b      	b.n	8003d02 <HAL_TIM_PWM_Start+0xfe>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d104      	bne.n	8003cda <HAL_TIM_PWM_Start+0xd6>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd8:	e013      	b.n	8003d02 <HAL_TIM_PWM_Start+0xfe>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	d104      	bne.n	8003cea <HAL_TIM_PWM_Start+0xe6>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ce8:	e00b      	b.n	8003d02 <HAL_TIM_PWM_Start+0xfe>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d104      	bne.n	8003cfa <HAL_TIM_PWM_Start+0xf6>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf8:	e003      	b.n	8003d02 <HAL_TIM_PWM_Start+0xfe>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2201      	movs	r2, #1
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 ff1c 	bl	8004b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a3a      	ldr	r2, [pc, #232]	; (8003e00 <HAL_TIM_PWM_Start+0x1fc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d018      	beq.n	8003d4c <HAL_TIM_PWM_Start+0x148>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a39      	ldr	r2, [pc, #228]	; (8003e04 <HAL_TIM_PWM_Start+0x200>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d013      	beq.n	8003d4c <HAL_TIM_PWM_Start+0x148>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a37      	ldr	r2, [pc, #220]	; (8003e08 <HAL_TIM_PWM_Start+0x204>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00e      	beq.n	8003d4c <HAL_TIM_PWM_Start+0x148>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a36      	ldr	r2, [pc, #216]	; (8003e0c <HAL_TIM_PWM_Start+0x208>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d009      	beq.n	8003d4c <HAL_TIM_PWM_Start+0x148>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a34      	ldr	r2, [pc, #208]	; (8003e10 <HAL_TIM_PWM_Start+0x20c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_TIM_PWM_Start+0x148>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a33      	ldr	r2, [pc, #204]	; (8003e14 <HAL_TIM_PWM_Start+0x210>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIM_PWM_Start+0x14c>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <HAL_TIM_PWM_Start+0x14e>
 8003d50:	2300      	movs	r3, #0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <HAL_TIM_PWM_Start+0x1fc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d022      	beq.n	8003db6 <HAL_TIM_PWM_Start+0x1b2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d78:	d01d      	beq.n	8003db6 <HAL_TIM_PWM_Start+0x1b2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a26      	ldr	r2, [pc, #152]	; (8003e18 <HAL_TIM_PWM_Start+0x214>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d018      	beq.n	8003db6 <HAL_TIM_PWM_Start+0x1b2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a24      	ldr	r2, [pc, #144]	; (8003e1c <HAL_TIM_PWM_Start+0x218>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <HAL_TIM_PWM_Start+0x1b2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a23      	ldr	r2, [pc, #140]	; (8003e20 <HAL_TIM_PWM_Start+0x21c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00e      	beq.n	8003db6 <HAL_TIM_PWM_Start+0x1b2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <HAL_TIM_PWM_Start+0x200>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d009      	beq.n	8003db6 <HAL_TIM_PWM_Start+0x1b2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <HAL_TIM_PWM_Start+0x204>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d004      	beq.n	8003db6 <HAL_TIM_PWM_Start+0x1b2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <HAL_TIM_PWM_Start+0x210>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d115      	bne.n	8003de2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <HAL_TIM_PWM_Start+0x220>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b06      	cmp	r3, #6
 8003dc6:	d015      	beq.n	8003df4 <HAL_TIM_PWM_Start+0x1f0>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dce:	d011      	beq.n	8003df4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de0:	e008      	b.n	8003df4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e000      	b.n	8003df6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40013400 	.word	0x40013400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800
 8003e14:	40015000 	.word	0x40015000
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40000800 	.word	0x40000800
 8003e20:	40000c00 	.word	0x40000c00
 8003e24:	00010007 	.word	0x00010007

08003e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e0fd      	b.n	800403e <HAL_TIM_PWM_ConfigChannel+0x216>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b14      	cmp	r3, #20
 8003e4e:	f200 80f0 	bhi.w	8004032 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003e52:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003ead 	.word	0x08003ead
 8003e5c:	08004033 	.word	0x08004033
 8003e60:	08004033 	.word	0x08004033
 8003e64:	08004033 	.word	0x08004033
 8003e68:	08003eed 	.word	0x08003eed
 8003e6c:	08004033 	.word	0x08004033
 8003e70:	08004033 	.word	0x08004033
 8003e74:	08004033 	.word	0x08004033
 8003e78:	08003f2f 	.word	0x08003f2f
 8003e7c:	08004033 	.word	0x08004033
 8003e80:	08004033 	.word	0x08004033
 8003e84:	08004033 	.word	0x08004033
 8003e88:	08003f6f 	.word	0x08003f6f
 8003e8c:	08004033 	.word	0x08004033
 8003e90:	08004033 	.word	0x08004033
 8003e94:	08004033 	.word	0x08004033
 8003e98:	08003fb1 	.word	0x08003fb1
 8003e9c:	08004033 	.word	0x08004033
 8003ea0:	08004033 	.word	0x08004033
 8003ea4:	08004033 	.word	0x08004033
 8003ea8:	08003ff1 	.word	0x08003ff1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fa82 	bl	80043bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0208 	orr.w	r2, r2, #8
 8003ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0204 	bic.w	r2, r2, #4
 8003ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6999      	ldr	r1, [r3, #24]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	619a      	str	r2, [r3, #24]
      break;
 8003eea:	e0a3      	b.n	8004034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fafc 	bl	80044f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6999      	ldr	r1, [r3, #24]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	021a      	lsls	r2, r3, #8
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	619a      	str	r2, [r3, #24]
      break;
 8003f2c:	e082      	b.n	8004034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fb6f 	bl	8004618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69da      	ldr	r2, [r3, #28]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0208 	orr.w	r2, r2, #8
 8003f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0204 	bic.w	r2, r2, #4
 8003f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69d9      	ldr	r1, [r3, #28]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	61da      	str	r2, [r3, #28]
      break;
 8003f6c:	e062      	b.n	8004034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fbe1 	bl	800473c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69d9      	ldr	r1, [r3, #28]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	021a      	lsls	r2, r3, #8
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	61da      	str	r2, [r3, #28]
      break;
 8003fae:	e041      	b.n	8004034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fc54 	bl	8004864 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0208 	orr.w	r2, r2, #8
 8003fca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0204 	bic.w	r2, r2, #4
 8003fda:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003fee:	e021      	b.n	8004034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fc9e 	bl	8004938 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800400a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	021a      	lsls	r2, r3, #8
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004030:	e000      	b.n	8004034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004032:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop

08004048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIM_ConfigClockSource+0x18>
 800405c:	2302      	movs	r3, #2
 800405e:	e0f5      	b.n	800424c <HAL_TIM_ConfigClockSource+0x204>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800407e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004082:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a6e      	ldr	r2, [pc, #440]	; (8004254 <HAL_TIM_ConfigClockSource+0x20c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	f000 80c1 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1da>
 80040a0:	4a6c      	ldr	r2, [pc, #432]	; (8004254 <HAL_TIM_ConfigClockSource+0x20c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	f200 80c6 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 80040a8:	4a6b      	ldr	r2, [pc, #428]	; (8004258 <HAL_TIM_ConfigClockSource+0x210>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	f000 80b9 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1da>
 80040b0:	4a69      	ldr	r2, [pc, #420]	; (8004258 <HAL_TIM_ConfigClockSource+0x210>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	f200 80be 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 80040b8:	4a68      	ldr	r2, [pc, #416]	; (800425c <HAL_TIM_ConfigClockSource+0x214>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	f000 80b1 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1da>
 80040c0:	4a66      	ldr	r2, [pc, #408]	; (800425c <HAL_TIM_ConfigClockSource+0x214>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	f200 80b6 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 80040c8:	4a65      	ldr	r2, [pc, #404]	; (8004260 <HAL_TIM_ConfigClockSource+0x218>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	f000 80a9 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1da>
 80040d0:	4a63      	ldr	r2, [pc, #396]	; (8004260 <HAL_TIM_ConfigClockSource+0x218>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	f200 80ae 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 80040d8:	4a62      	ldr	r2, [pc, #392]	; (8004264 <HAL_TIM_ConfigClockSource+0x21c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	f000 80a1 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1da>
 80040e0:	4a60      	ldr	r2, [pc, #384]	; (8004264 <HAL_TIM_ConfigClockSource+0x21c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	f200 80a6 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 80040e8:	4a5f      	ldr	r2, [pc, #380]	; (8004268 <HAL_TIM_ConfigClockSource+0x220>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	f000 8099 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1da>
 80040f0:	4a5d      	ldr	r2, [pc, #372]	; (8004268 <HAL_TIM_ConfigClockSource+0x220>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	f200 809e 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 80040f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80040fc:	f000 8091 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1da>
 8004100:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004104:	f200 8096 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 8004108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800410c:	f000 8089 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1da>
 8004110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004114:	f200 808e 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 8004118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411c:	d03e      	beq.n	800419c <HAL_TIM_ConfigClockSource+0x154>
 800411e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004122:	f200 8087 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412a:	f000 8085 	beq.w	8004238 <HAL_TIM_ConfigClockSource+0x1f0>
 800412e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004132:	d87f      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 8004134:	2b70      	cmp	r3, #112	; 0x70
 8004136:	d01a      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x126>
 8004138:	2b70      	cmp	r3, #112	; 0x70
 800413a:	d87b      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 800413c:	2b60      	cmp	r3, #96	; 0x60
 800413e:	d050      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x19a>
 8004140:	2b60      	cmp	r3, #96	; 0x60
 8004142:	d877      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 8004144:	2b50      	cmp	r3, #80	; 0x50
 8004146:	d03c      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x17a>
 8004148:	2b50      	cmp	r3, #80	; 0x50
 800414a:	d873      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d058      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x1ba>
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d86f      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 8004154:	2b30      	cmp	r3, #48	; 0x30
 8004156:	d064      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x1da>
 8004158:	2b30      	cmp	r3, #48	; 0x30
 800415a:	d86b      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 800415c:	2b20      	cmp	r3, #32
 800415e:	d060      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x1da>
 8004160:	2b20      	cmp	r3, #32
 8004162:	d867      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d05c      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x1da>
 8004168:	2b10      	cmp	r3, #16
 800416a:	d05a      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800416c:	e062      	b.n	8004234 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6899      	ldr	r1, [r3, #8]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f000 fcc3 	bl	8004b08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004190:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	609a      	str	r2, [r3, #8]
      break;
 800419a:	e04e      	b.n	800423a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6899      	ldr	r1, [r3, #8]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f000 fcac 	bl	8004b08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041be:	609a      	str	r2, [r3, #8]
      break;
 80041c0:	e03b      	b.n	800423a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6859      	ldr	r1, [r3, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f000 fc1e 	bl	8004a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2150      	movs	r1, #80	; 0x50
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fc77 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 80041e0:	e02b      	b.n	800423a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f000 fc3d 	bl	8004a6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2160      	movs	r1, #96	; 0x60
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fc67 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 8004200:	e01b      	b.n	800423a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	461a      	mov	r2, r3
 8004210:	f000 fbfe 	bl	8004a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2140      	movs	r1, #64	; 0x40
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fc57 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 8004220:	e00b      	b.n	800423a <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f000 fc4e 	bl	8004ace <TIM_ITRx_SetConfig>
        break;
 8004232:	e002      	b.n	800423a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8004234:	bf00      	nop
 8004236:	e000      	b.n	800423a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8004238:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	00100070 	.word	0x00100070
 8004258:	00100060 	.word	0x00100060
 800425c:	00100050 	.word	0x00100050
 8004260:	00100040 	.word	0x00100040
 8004264:	00100030 	.word	0x00100030
 8004268:	00100020 	.word	0x00100020

0800426c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a46      	ldr	r2, [pc, #280]	; (8004398 <TIM_Base_SetConfig+0x12c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d017      	beq.n	80042b4 <TIM_Base_SetConfig+0x48>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428a:	d013      	beq.n	80042b4 <TIM_Base_SetConfig+0x48>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a43      	ldr	r2, [pc, #268]	; (800439c <TIM_Base_SetConfig+0x130>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00f      	beq.n	80042b4 <TIM_Base_SetConfig+0x48>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a42      	ldr	r2, [pc, #264]	; (80043a0 <TIM_Base_SetConfig+0x134>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00b      	beq.n	80042b4 <TIM_Base_SetConfig+0x48>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a41      	ldr	r2, [pc, #260]	; (80043a4 <TIM_Base_SetConfig+0x138>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_Base_SetConfig+0x48>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a40      	ldr	r2, [pc, #256]	; (80043a8 <TIM_Base_SetConfig+0x13c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_Base_SetConfig+0x48>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3f      	ldr	r2, [pc, #252]	; (80043ac <TIM_Base_SetConfig+0x140>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d108      	bne.n	80042c6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a33      	ldr	r2, [pc, #204]	; (8004398 <TIM_Base_SetConfig+0x12c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d023      	beq.n	8004316 <TIM_Base_SetConfig+0xaa>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d4:	d01f      	beq.n	8004316 <TIM_Base_SetConfig+0xaa>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a30      	ldr	r2, [pc, #192]	; (800439c <TIM_Base_SetConfig+0x130>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01b      	beq.n	8004316 <TIM_Base_SetConfig+0xaa>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <TIM_Base_SetConfig+0x134>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d017      	beq.n	8004316 <TIM_Base_SetConfig+0xaa>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a2e      	ldr	r2, [pc, #184]	; (80043a4 <TIM_Base_SetConfig+0x138>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <TIM_Base_SetConfig+0xaa>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2d      	ldr	r2, [pc, #180]	; (80043a8 <TIM_Base_SetConfig+0x13c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00f      	beq.n	8004316 <TIM_Base_SetConfig+0xaa>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a2d      	ldr	r2, [pc, #180]	; (80043b0 <TIM_Base_SetConfig+0x144>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00b      	beq.n	8004316 <TIM_Base_SetConfig+0xaa>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a2c      	ldr	r2, [pc, #176]	; (80043b4 <TIM_Base_SetConfig+0x148>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <TIM_Base_SetConfig+0xaa>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a2b      	ldr	r2, [pc, #172]	; (80043b8 <TIM_Base_SetConfig+0x14c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <TIM_Base_SetConfig+0xaa>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a26      	ldr	r2, [pc, #152]	; (80043ac <TIM_Base_SetConfig+0x140>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d108      	bne.n	8004328 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a12      	ldr	r2, [pc, #72]	; (8004398 <TIM_Base_SetConfig+0x12c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <TIM_Base_SetConfig+0x110>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a14      	ldr	r2, [pc, #80]	; (80043a8 <TIM_Base_SetConfig+0x13c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00f      	beq.n	800437c <TIM_Base_SetConfig+0x110>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a14      	ldr	r2, [pc, #80]	; (80043b0 <TIM_Base_SetConfig+0x144>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00b      	beq.n	800437c <TIM_Base_SetConfig+0x110>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <TIM_Base_SetConfig+0x148>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d007      	beq.n	800437c <TIM_Base_SetConfig+0x110>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <TIM_Base_SetConfig+0x14c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d003      	beq.n	800437c <TIM_Base_SetConfig+0x110>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <TIM_Base_SetConfig+0x140>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d103      	bne.n	8004384 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	615a      	str	r2, [r3, #20]
}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000800 	.word	0x40000800
 80043a4:	40000c00 	.word	0x40000c00
 80043a8:	40013400 	.word	0x40013400
 80043ac:	40015000 	.word	0x40015000
 80043b0:	40014000 	.word	0x40014000
 80043b4:	40014400 	.word	0x40014400
 80043b8:	40014800 	.word	0x40014800

080043bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f023 0201 	bic.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f023 0302 	bic.w	r3, r3, #2
 8004408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a30      	ldr	r2, [pc, #192]	; (80044d8 <TIM_OC1_SetConfig+0x11c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d013      	beq.n	8004444 <TIM_OC1_SetConfig+0x88>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a2f      	ldr	r2, [pc, #188]	; (80044dc <TIM_OC1_SetConfig+0x120>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00f      	beq.n	8004444 <TIM_OC1_SetConfig+0x88>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a2e      	ldr	r2, [pc, #184]	; (80044e0 <TIM_OC1_SetConfig+0x124>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00b      	beq.n	8004444 <TIM_OC1_SetConfig+0x88>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a2d      	ldr	r2, [pc, #180]	; (80044e4 <TIM_OC1_SetConfig+0x128>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d007      	beq.n	8004444 <TIM_OC1_SetConfig+0x88>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <TIM_OC1_SetConfig+0x12c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d003      	beq.n	8004444 <TIM_OC1_SetConfig+0x88>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <TIM_OC1_SetConfig+0x130>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d10c      	bne.n	800445e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f023 0308 	bic.w	r3, r3, #8
 800444a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f023 0304 	bic.w	r3, r3, #4
 800445c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <TIM_OC1_SetConfig+0x11c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <TIM_OC1_SetConfig+0xd2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <TIM_OC1_SetConfig+0x120>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00f      	beq.n	800448e <TIM_OC1_SetConfig+0xd2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <TIM_OC1_SetConfig+0x124>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00b      	beq.n	800448e <TIM_OC1_SetConfig+0xd2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a1a      	ldr	r2, [pc, #104]	; (80044e4 <TIM_OC1_SetConfig+0x128>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d007      	beq.n	800448e <TIM_OC1_SetConfig+0xd2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a19      	ldr	r2, [pc, #100]	; (80044e8 <TIM_OC1_SetConfig+0x12c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d003      	beq.n	800448e <TIM_OC1_SetConfig+0xd2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a18      	ldr	r2, [pc, #96]	; (80044ec <TIM_OC1_SetConfig+0x130>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d111      	bne.n	80044b2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800449c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	621a      	str	r2, [r3, #32]
}
 80044cc:	bf00      	nop
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40013400 	.word	0x40013400
 80044e0:	40014000 	.word	0x40014000
 80044e4:	40014400 	.word	0x40014400
 80044e8:	40014800 	.word	0x40014800
 80044ec:	40015000 	.word	0x40015000

080044f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f023 0210 	bic.w	r2, r3, #16
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800451e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4313      	orrs	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f023 0320 	bic.w	r3, r3, #32
 800453e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2c      	ldr	r2, [pc, #176]	; (8004600 <TIM_OC2_SetConfig+0x110>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d007      	beq.n	8004564 <TIM_OC2_SetConfig+0x74>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a2b      	ldr	r2, [pc, #172]	; (8004604 <TIM_OC2_SetConfig+0x114>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_OC2_SetConfig+0x74>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a2a      	ldr	r2, [pc, #168]	; (8004608 <TIM_OC2_SetConfig+0x118>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d10d      	bne.n	8004580 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <TIM_OC2_SetConfig+0x110>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d013      	beq.n	80045b0 <TIM_OC2_SetConfig+0xc0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <TIM_OC2_SetConfig+0x114>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00f      	beq.n	80045b0 <TIM_OC2_SetConfig+0xc0>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a1e      	ldr	r2, [pc, #120]	; (800460c <TIM_OC2_SetConfig+0x11c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00b      	beq.n	80045b0 <TIM_OC2_SetConfig+0xc0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a1d      	ldr	r2, [pc, #116]	; (8004610 <TIM_OC2_SetConfig+0x120>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d007      	beq.n	80045b0 <TIM_OC2_SetConfig+0xc0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a1c      	ldr	r2, [pc, #112]	; (8004614 <TIM_OC2_SetConfig+0x124>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <TIM_OC2_SetConfig+0xc0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a17      	ldr	r2, [pc, #92]	; (8004608 <TIM_OC2_SetConfig+0x118>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d113      	bne.n	80045d8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	621a      	str	r2, [r3, #32]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40013400 	.word	0x40013400
 8004608:	40015000 	.word	0x40015000
 800460c:	40014000 	.word	0x40014000
 8004610:	40014400 	.word	0x40014400
 8004614:	40014800 	.word	0x40014800

08004618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0303 	bic.w	r3, r3, #3
 8004652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2b      	ldr	r2, [pc, #172]	; (8004724 <TIM_OC3_SetConfig+0x10c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d007      	beq.n	800468a <TIM_OC3_SetConfig+0x72>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a2a      	ldr	r2, [pc, #168]	; (8004728 <TIM_OC3_SetConfig+0x110>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d003      	beq.n	800468a <TIM_OC3_SetConfig+0x72>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a29      	ldr	r2, [pc, #164]	; (800472c <TIM_OC3_SetConfig+0x114>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d10d      	bne.n	80046a6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1e      	ldr	r2, [pc, #120]	; (8004724 <TIM_OC3_SetConfig+0x10c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <TIM_OC3_SetConfig+0xbe>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <TIM_OC3_SetConfig+0x110>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00f      	beq.n	80046d6 <TIM_OC3_SetConfig+0xbe>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <TIM_OC3_SetConfig+0x118>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00b      	beq.n	80046d6 <TIM_OC3_SetConfig+0xbe>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <TIM_OC3_SetConfig+0x11c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d007      	beq.n	80046d6 <TIM_OC3_SetConfig+0xbe>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <TIM_OC3_SetConfig+0x120>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d003      	beq.n	80046d6 <TIM_OC3_SetConfig+0xbe>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a16      	ldr	r2, [pc, #88]	; (800472c <TIM_OC3_SetConfig+0x114>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d113      	bne.n	80046fe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	621a      	str	r2, [r3, #32]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40013400 	.word	0x40013400
 800472c:	40015000 	.word	0x40015000
 8004730:	40014000 	.word	0x40014000
 8004734:	40014400 	.word	0x40014400
 8004738:	40014800 	.word	0x40014800

0800473c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800478a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	031b      	lsls	r3, r3, #12
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a2c      	ldr	r2, [pc, #176]	; (800484c <TIM_OC4_SetConfig+0x110>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d007      	beq.n	80047b0 <TIM_OC4_SetConfig+0x74>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a2b      	ldr	r2, [pc, #172]	; (8004850 <TIM_OC4_SetConfig+0x114>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d003      	beq.n	80047b0 <TIM_OC4_SetConfig+0x74>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a2a      	ldr	r2, [pc, #168]	; (8004854 <TIM_OC4_SetConfig+0x118>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d10d      	bne.n	80047cc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	031b      	lsls	r3, r3, #12
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a1f      	ldr	r2, [pc, #124]	; (800484c <TIM_OC4_SetConfig+0x110>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d013      	beq.n	80047fc <TIM_OC4_SetConfig+0xc0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <TIM_OC4_SetConfig+0x114>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00f      	beq.n	80047fc <TIM_OC4_SetConfig+0xc0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <TIM_OC4_SetConfig+0x11c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00b      	beq.n	80047fc <TIM_OC4_SetConfig+0xc0>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a1d      	ldr	r2, [pc, #116]	; (800485c <TIM_OC4_SetConfig+0x120>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d007      	beq.n	80047fc <TIM_OC4_SetConfig+0xc0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a1c      	ldr	r2, [pc, #112]	; (8004860 <TIM_OC4_SetConfig+0x124>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <TIM_OC4_SetConfig+0xc0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a17      	ldr	r2, [pc, #92]	; (8004854 <TIM_OC4_SetConfig+0x118>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d113      	bne.n	8004824 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004802:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800480a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	019b      	lsls	r3, r3, #6
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	019b      	lsls	r3, r3, #6
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40012c00 	.word	0x40012c00
 8004850:	40013400 	.word	0x40013400
 8004854:	40015000 	.word	0x40015000
 8004858:	40014000 	.word	0x40014000
 800485c:	40014400 	.word	0x40014400
 8004860:	40014800 	.word	0x40014800

08004864 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a19      	ldr	r2, [pc, #100]	; (8004920 <TIM_OC5_SetConfig+0xbc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <TIM_OC5_SetConfig+0x82>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a18      	ldr	r2, [pc, #96]	; (8004924 <TIM_OC5_SetConfig+0xc0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00f      	beq.n	80048e6 <TIM_OC5_SetConfig+0x82>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a17      	ldr	r2, [pc, #92]	; (8004928 <TIM_OC5_SetConfig+0xc4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00b      	beq.n	80048e6 <TIM_OC5_SetConfig+0x82>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a16      	ldr	r2, [pc, #88]	; (800492c <TIM_OC5_SetConfig+0xc8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <TIM_OC5_SetConfig+0x82>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a15      	ldr	r2, [pc, #84]	; (8004930 <TIM_OC5_SetConfig+0xcc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <TIM_OC5_SetConfig+0x82>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a14      	ldr	r2, [pc, #80]	; (8004934 <TIM_OC5_SetConfig+0xd0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d109      	bne.n	80048fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	621a      	str	r2, [r3, #32]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40013400 	.word	0x40013400
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800
 8004934:	40015000 	.word	0x40015000

08004938 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800497e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	051b      	lsls	r3, r3, #20
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a1a      	ldr	r2, [pc, #104]	; (80049f8 <TIM_OC6_SetConfig+0xc0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <TIM_OC6_SetConfig+0x84>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a19      	ldr	r2, [pc, #100]	; (80049fc <TIM_OC6_SetConfig+0xc4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00f      	beq.n	80049bc <TIM_OC6_SetConfig+0x84>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <TIM_OC6_SetConfig+0xc8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00b      	beq.n	80049bc <TIM_OC6_SetConfig+0x84>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a17      	ldr	r2, [pc, #92]	; (8004a04 <TIM_OC6_SetConfig+0xcc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <TIM_OC6_SetConfig+0x84>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a16      	ldr	r2, [pc, #88]	; (8004a08 <TIM_OC6_SetConfig+0xd0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_OC6_SetConfig+0x84>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <TIM_OC6_SetConfig+0xd4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d109      	bne.n	80049d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	029b      	lsls	r3, r3, #10
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40013400 	.word	0x40013400
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800
 8004a0c:	40015000 	.word	0x40015000

08004a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0201 	bic.w	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f023 030a 	bic.w	r3, r3, #10
 8004a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b087      	sub	sp, #28
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f023 0210 	bic.w	r2, r3, #16
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	031b      	lsls	r3, r3, #12
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f043 0307 	orr.w	r3, r3, #7
 8004af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	609a      	str	r2, [r3, #8]
}
 8004afc:	bf00      	nop
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	021a      	lsls	r2, r3, #8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1a      	ldr	r2, [r3, #32]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1a      	ldr	r2, [r3, #32]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	431a      	orrs	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	621a      	str	r2, [r3, #32]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e074      	b.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d009      	beq.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a33      	ldr	r2, [pc, #204]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a31      	ldr	r2, [pc, #196]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d108      	bne.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bf0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d022      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d01d      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d018      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d013      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00e      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a15      	ldr	r2, [pc, #84]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d009      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d004      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10c      	bne.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40012c00 	.word	0x40012c00
 8004ca8:	40013400 	.word	0x40013400
 8004cac:	40015000 	.word	0x40015000
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40000800 	.word	0x40000800
 8004cb8:	40000c00 	.word	0x40000c00
 8004cbc:	40014000 	.word	0x40014000

08004cc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e096      	b.n	8004e0a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2f      	ldr	r2, [pc, #188]	; (8004e18 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2d      	ldr	r2, [pc, #180]	; (8004e1c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2c      	ldr	r2, [pc, #176]	; (8004e20 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d106      	bne.n	8004d82 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a24      	ldr	r2, [pc, #144]	; (8004e18 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d009      	beq.n	8004da0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a22      	ldr	r2, [pc, #136]	; (8004e1c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d004      	beq.n	8004da0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a21      	ldr	r2, [pc, #132]	; (8004e20 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d12b      	bne.n	8004df8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	051b      	lsls	r3, r3, #20
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a11      	ldr	r2, [pc, #68]	; (8004e18 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d009      	beq.n	8004dea <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a10      	ldr	r2, [pc, #64]	; (8004e1c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d004      	beq.n	8004dea <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a0e      	ldr	r2, [pc, #56]	; (8004e20 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d106      	bne.n	8004df8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	40013400 	.word	0x40013400
 8004e20:	40015000 	.word	0x40015000

08004e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e042      	b.n	8004ebc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fd f957 	bl	80020fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2224      	movs	r2, #36	; 0x24
 8004e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa80 	bl	800536c <UART_SetConfig>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e022      	b.n	8004ebc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fd3e 	bl	8005900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ea2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fdc5 	bl	8005a44 <UART_CheckIdleState>
 8004eba:	4603      	mov	r3, r0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004eea:	4013      	ands	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d118      	bne.n	8004f26 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d013      	beq.n	8004f26 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d104      	bne.n	8004f12 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 81fb 	beq.w	8005312 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
      }
      return;
 8004f24:	e1f5      	b.n	8005312 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80ef 	beq.w	800510c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4b73      	ldr	r3, [pc, #460]	; (8005100 <HAL_UART_IRQHandler+0x23c>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4b72      	ldr	r3, [pc, #456]	; (8005104 <HAL_UART_IRQHandler+0x240>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 80e4 	beq.w	800510c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d010      	beq.n	8004f70 <HAL_UART_IRQHandler+0xac>
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00b      	beq.n	8004f70 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f66:	f043 0201 	orr.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d010      	beq.n	8004f9c <HAL_UART_IRQHandler+0xd8>
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00b      	beq.n	8004f9c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f92:	f043 0204 	orr.w	r2, r3, #4
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d010      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x104>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fbe:	f043 0202 	orr.w	r2, r3, #2
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d015      	beq.n	8004ffe <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d104      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4b48      	ldr	r3, [pc, #288]	; (8005100 <HAL_UART_IRQHandler+0x23c>)
 8004fe0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2208      	movs	r2, #8
 8004fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff4:	f043 0208 	orr.w	r2, r3, #8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005004:	2b00      	cmp	r3, #0
 8005006:	d011      	beq.n	800502c <HAL_UART_IRQHandler+0x168>
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800501a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005022:	f043 0220 	orr.w	r2, r3, #32
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 816f 	beq.w	8005316 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d011      	beq.n	8005066 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d007      	beq.n	8005066 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d004      	beq.n	8005086 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005082:	2b00      	cmp	r3, #0
 8005084:	d031      	beq.n	80050ea <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fda7 	bl	8005bda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d123      	bne.n	80050e2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d013      	beq.n	80050da <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050b6:	4a14      	ldr	r2, [pc, #80]	; (8005108 <HAL_UART_IRQHandler+0x244>)
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fd fab2 	bl	8002628 <HAL_DMA_Abort_IT>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d017      	beq.n	80050fa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80050d4:	4610      	mov	r0, r2
 80050d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	e00f      	b.n	80050fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f930 	bl	8005340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	e00b      	b.n	80050fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f92c 	bl	8005340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	e007      	b.n	80050fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f928 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80050f8:	e10d      	b.n	8005316 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fa:	bf00      	nop
    return;
 80050fc:	e10b      	b.n	8005316 <HAL_UART_IRQHandler+0x452>
 80050fe:	bf00      	nop
 8005100:	10000001 	.word	0x10000001
 8005104:	04000120 	.word	0x04000120
 8005108:	08005c3f 	.word	0x08005c3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005110:	2b01      	cmp	r3, #1
 8005112:	f040 80ab 	bne.w	800526c <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80a5 	beq.w	800526c <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 809f 	beq.w	800526c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2210      	movs	r2, #16
 8005134:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d155      	bne.n	80051f0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800514e:	893b      	ldrh	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 80e2 	beq.w	800531a <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800515c:	893a      	ldrh	r2, [r7, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	f080 80db 	bcs.w	800531a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	893a      	ldrh	r2, [r7, #8]
 8005168:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d12b      	bne.n	80051d4 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800518a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051aa:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0210 	bic.w	r2, r2, #16
 80051c8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fd f9d1 	bl	8002576 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f8b3 	bl	8005354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051ee:	e094      	b.n	800531a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8087 	beq.w	800531e <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8005210:	897b      	ldrh	r3, [r7, #10]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 8083 	beq.w	800531e <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005226:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0210 	bic.w	r2, r2, #16
 800525e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005260:	897b      	ldrh	r3, [r7, #10]
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f875 	bl	8005354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800526a:	e058      	b.n	800531e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00d      	beq.n	8005292 <HAL_UART_IRQHandler+0x3ce>
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005288:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fd07 	bl	8005c9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005290:	e048      	b.n	8005324 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	d012      	beq.n	80052c2 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d104      	bne.n	80052b0 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d034      	beq.n	8005322 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	4798      	blx	r3
    }
    return;
 80052c0:	e02f      	b.n	8005322 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_UART_IRQHandler+0x41a>
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fcc7 	bl	8005c6a <UART_EndTransmit_IT>
    return;
 80052dc:	e022      	b.n	8005324 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_UART_IRQHandler+0x436>
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fce7 	bl	8005cc6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052f8:	e014      	b.n	8005324 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00f      	beq.n	8005324 <HAL_UART_IRQHandler+0x460>
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2b00      	cmp	r3, #0
 8005308:	da0c      	bge.n	8005324 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fcd1 	bl	8005cb2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005310:	e008      	b.n	8005324 <HAL_UART_IRQHandler+0x460>
      return;
 8005312:	bf00      	nop
 8005314:	e006      	b.n	8005324 <HAL_UART_IRQHandler+0x460>
    return;
 8005316:	bf00      	nop
 8005318:	e004      	b.n	8005324 <HAL_UART_IRQHandler+0x460>
      return;
 800531a:	bf00      	nop
 800531c:	e002      	b.n	8005324 <HAL_UART_IRQHandler+0x460>
      return;
 800531e:	bf00      	nop
 8005320:	e000      	b.n	8005324 <HAL_UART_IRQHandler+0x460>
    return;
 8005322:	bf00      	nop
  }
}
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop

0800532c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800536c:	b5b0      	push	{r4, r5, r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	4313      	orrs	r3, r2
 800538e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4bb1      	ldr	r3, [pc, #708]	; (800565c <UART_SetConfig+0x2f0>)
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	69f9      	ldr	r1, [r7, #28]
 80053a0:	430b      	orrs	r3, r1
 80053a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4aa6      	ldr	r2, [pc, #664]	; (8005660 <UART_SetConfig+0x2f4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80053de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	69f9      	ldr	r1, [r7, #28]
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	f023 010f 	bic.w	r1, r3, #15
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a97      	ldr	r2, [pc, #604]	; (8005664 <UART_SetConfig+0x2f8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d120      	bne.n	800544e <UART_SetConfig+0xe2>
 800540c:	4b96      	ldr	r3, [pc, #600]	; (8005668 <UART_SetConfig+0x2fc>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	2b03      	cmp	r3, #3
 8005418:	d816      	bhi.n	8005448 <UART_SetConfig+0xdc>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0xb4>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005431 	.word	0x08005431
 8005424:	0800543d 	.word	0x0800543d
 8005428:	08005437 	.word	0x08005437
 800542c:	08005443 	.word	0x08005443
 8005430:	2301      	movs	r3, #1
 8005432:	76fb      	strb	r3, [r7, #27]
 8005434:	e0e7      	b.n	8005606 <UART_SetConfig+0x29a>
 8005436:	2302      	movs	r3, #2
 8005438:	76fb      	strb	r3, [r7, #27]
 800543a:	e0e4      	b.n	8005606 <UART_SetConfig+0x29a>
 800543c:	2304      	movs	r3, #4
 800543e:	76fb      	strb	r3, [r7, #27]
 8005440:	e0e1      	b.n	8005606 <UART_SetConfig+0x29a>
 8005442:	2308      	movs	r3, #8
 8005444:	76fb      	strb	r3, [r7, #27]
 8005446:	e0de      	b.n	8005606 <UART_SetConfig+0x29a>
 8005448:	2310      	movs	r3, #16
 800544a:	76fb      	strb	r3, [r7, #27]
 800544c:	e0db      	b.n	8005606 <UART_SetConfig+0x29a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a86      	ldr	r2, [pc, #536]	; (800566c <UART_SetConfig+0x300>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d132      	bne.n	80054be <UART_SetConfig+0x152>
 8005458:	4b83      	ldr	r3, [pc, #524]	; (8005668 <UART_SetConfig+0x2fc>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	2b0c      	cmp	r3, #12
 8005464:	d828      	bhi.n	80054b8 <UART_SetConfig+0x14c>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <UART_SetConfig+0x100>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	080054a1 	.word	0x080054a1
 8005470:	080054b9 	.word	0x080054b9
 8005474:	080054b9 	.word	0x080054b9
 8005478:	080054b9 	.word	0x080054b9
 800547c:	080054ad 	.word	0x080054ad
 8005480:	080054b9 	.word	0x080054b9
 8005484:	080054b9 	.word	0x080054b9
 8005488:	080054b9 	.word	0x080054b9
 800548c:	080054a7 	.word	0x080054a7
 8005490:	080054b9 	.word	0x080054b9
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054b9 	.word	0x080054b9
 800549c:	080054b3 	.word	0x080054b3
 80054a0:	2300      	movs	r3, #0
 80054a2:	76fb      	strb	r3, [r7, #27]
 80054a4:	e0af      	b.n	8005606 <UART_SetConfig+0x29a>
 80054a6:	2302      	movs	r3, #2
 80054a8:	76fb      	strb	r3, [r7, #27]
 80054aa:	e0ac      	b.n	8005606 <UART_SetConfig+0x29a>
 80054ac:	2304      	movs	r3, #4
 80054ae:	76fb      	strb	r3, [r7, #27]
 80054b0:	e0a9      	b.n	8005606 <UART_SetConfig+0x29a>
 80054b2:	2308      	movs	r3, #8
 80054b4:	76fb      	strb	r3, [r7, #27]
 80054b6:	e0a6      	b.n	8005606 <UART_SetConfig+0x29a>
 80054b8:	2310      	movs	r3, #16
 80054ba:	76fb      	strb	r3, [r7, #27]
 80054bc:	e0a3      	b.n	8005606 <UART_SetConfig+0x29a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a6b      	ldr	r2, [pc, #428]	; (8005670 <UART_SetConfig+0x304>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d120      	bne.n	800550a <UART_SetConfig+0x19e>
 80054c8:	4b67      	ldr	r3, [pc, #412]	; (8005668 <UART_SetConfig+0x2fc>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054d2:	2b30      	cmp	r3, #48	; 0x30
 80054d4:	d013      	beq.n	80054fe <UART_SetConfig+0x192>
 80054d6:	2b30      	cmp	r3, #48	; 0x30
 80054d8:	d814      	bhi.n	8005504 <UART_SetConfig+0x198>
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d009      	beq.n	80054f2 <UART_SetConfig+0x186>
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d810      	bhi.n	8005504 <UART_SetConfig+0x198>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <UART_SetConfig+0x180>
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d006      	beq.n	80054f8 <UART_SetConfig+0x18c>
 80054ea:	e00b      	b.n	8005504 <UART_SetConfig+0x198>
 80054ec:	2300      	movs	r3, #0
 80054ee:	76fb      	strb	r3, [r7, #27]
 80054f0:	e089      	b.n	8005606 <UART_SetConfig+0x29a>
 80054f2:	2302      	movs	r3, #2
 80054f4:	76fb      	strb	r3, [r7, #27]
 80054f6:	e086      	b.n	8005606 <UART_SetConfig+0x29a>
 80054f8:	2304      	movs	r3, #4
 80054fa:	76fb      	strb	r3, [r7, #27]
 80054fc:	e083      	b.n	8005606 <UART_SetConfig+0x29a>
 80054fe:	2308      	movs	r3, #8
 8005500:	76fb      	strb	r3, [r7, #27]
 8005502:	e080      	b.n	8005606 <UART_SetConfig+0x29a>
 8005504:	2310      	movs	r3, #16
 8005506:	76fb      	strb	r3, [r7, #27]
 8005508:	e07d      	b.n	8005606 <UART_SetConfig+0x29a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a59      	ldr	r2, [pc, #356]	; (8005674 <UART_SetConfig+0x308>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d120      	bne.n	8005556 <UART_SetConfig+0x1ea>
 8005514:	4b54      	ldr	r3, [pc, #336]	; (8005668 <UART_SetConfig+0x2fc>)
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800551e:	2bc0      	cmp	r3, #192	; 0xc0
 8005520:	d013      	beq.n	800554a <UART_SetConfig+0x1de>
 8005522:	2bc0      	cmp	r3, #192	; 0xc0
 8005524:	d814      	bhi.n	8005550 <UART_SetConfig+0x1e4>
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	d009      	beq.n	800553e <UART_SetConfig+0x1d2>
 800552a:	2b80      	cmp	r3, #128	; 0x80
 800552c:	d810      	bhi.n	8005550 <UART_SetConfig+0x1e4>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <UART_SetConfig+0x1cc>
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	d006      	beq.n	8005544 <UART_SetConfig+0x1d8>
 8005536:	e00b      	b.n	8005550 <UART_SetConfig+0x1e4>
 8005538:	2300      	movs	r3, #0
 800553a:	76fb      	strb	r3, [r7, #27]
 800553c:	e063      	b.n	8005606 <UART_SetConfig+0x29a>
 800553e:	2302      	movs	r3, #2
 8005540:	76fb      	strb	r3, [r7, #27]
 8005542:	e060      	b.n	8005606 <UART_SetConfig+0x29a>
 8005544:	2304      	movs	r3, #4
 8005546:	76fb      	strb	r3, [r7, #27]
 8005548:	e05d      	b.n	8005606 <UART_SetConfig+0x29a>
 800554a:	2308      	movs	r3, #8
 800554c:	76fb      	strb	r3, [r7, #27]
 800554e:	e05a      	b.n	8005606 <UART_SetConfig+0x29a>
 8005550:	2310      	movs	r3, #16
 8005552:	76fb      	strb	r3, [r7, #27]
 8005554:	e057      	b.n	8005606 <UART_SetConfig+0x29a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a47      	ldr	r2, [pc, #284]	; (8005678 <UART_SetConfig+0x30c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d125      	bne.n	80055ac <UART_SetConfig+0x240>
 8005560:	4b41      	ldr	r3, [pc, #260]	; (8005668 <UART_SetConfig+0x2fc>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800556e:	d017      	beq.n	80055a0 <UART_SetConfig+0x234>
 8005570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005574:	d817      	bhi.n	80055a6 <UART_SetConfig+0x23a>
 8005576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800557a:	d00b      	beq.n	8005594 <UART_SetConfig+0x228>
 800557c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005580:	d811      	bhi.n	80055a6 <UART_SetConfig+0x23a>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <UART_SetConfig+0x222>
 8005586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558a:	d006      	beq.n	800559a <UART_SetConfig+0x22e>
 800558c:	e00b      	b.n	80055a6 <UART_SetConfig+0x23a>
 800558e:	2300      	movs	r3, #0
 8005590:	76fb      	strb	r3, [r7, #27]
 8005592:	e038      	b.n	8005606 <UART_SetConfig+0x29a>
 8005594:	2302      	movs	r3, #2
 8005596:	76fb      	strb	r3, [r7, #27]
 8005598:	e035      	b.n	8005606 <UART_SetConfig+0x29a>
 800559a:	2304      	movs	r3, #4
 800559c:	76fb      	strb	r3, [r7, #27]
 800559e:	e032      	b.n	8005606 <UART_SetConfig+0x29a>
 80055a0:	2308      	movs	r3, #8
 80055a2:	76fb      	strb	r3, [r7, #27]
 80055a4:	e02f      	b.n	8005606 <UART_SetConfig+0x29a>
 80055a6:	2310      	movs	r3, #16
 80055a8:	76fb      	strb	r3, [r7, #27]
 80055aa:	e02c      	b.n	8005606 <UART_SetConfig+0x29a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a2b      	ldr	r2, [pc, #172]	; (8005660 <UART_SetConfig+0x2f4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d125      	bne.n	8005602 <UART_SetConfig+0x296>
 80055b6:	4b2c      	ldr	r3, [pc, #176]	; (8005668 <UART_SetConfig+0x2fc>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055c4:	d017      	beq.n	80055f6 <UART_SetConfig+0x28a>
 80055c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ca:	d817      	bhi.n	80055fc <UART_SetConfig+0x290>
 80055cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d0:	d00b      	beq.n	80055ea <UART_SetConfig+0x27e>
 80055d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d6:	d811      	bhi.n	80055fc <UART_SetConfig+0x290>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <UART_SetConfig+0x278>
 80055dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e0:	d006      	beq.n	80055f0 <UART_SetConfig+0x284>
 80055e2:	e00b      	b.n	80055fc <UART_SetConfig+0x290>
 80055e4:	2300      	movs	r3, #0
 80055e6:	76fb      	strb	r3, [r7, #27]
 80055e8:	e00d      	b.n	8005606 <UART_SetConfig+0x29a>
 80055ea:	2302      	movs	r3, #2
 80055ec:	76fb      	strb	r3, [r7, #27]
 80055ee:	e00a      	b.n	8005606 <UART_SetConfig+0x29a>
 80055f0:	2304      	movs	r3, #4
 80055f2:	76fb      	strb	r3, [r7, #27]
 80055f4:	e007      	b.n	8005606 <UART_SetConfig+0x29a>
 80055f6:	2308      	movs	r3, #8
 80055f8:	76fb      	strb	r3, [r7, #27]
 80055fa:	e004      	b.n	8005606 <UART_SetConfig+0x29a>
 80055fc:	2310      	movs	r3, #16
 80055fe:	76fb      	strb	r3, [r7, #27]
 8005600:	e001      	b.n	8005606 <UART_SetConfig+0x29a>
 8005602:	2310      	movs	r3, #16
 8005604:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a15      	ldr	r2, [pc, #84]	; (8005660 <UART_SetConfig+0x2f4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	f040 809f 	bne.w	8005750 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005612:	7efb      	ldrb	r3, [r7, #27]
 8005614:	2b08      	cmp	r3, #8
 8005616:	d837      	bhi.n	8005688 <UART_SetConfig+0x31c>
 8005618:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <UART_SetConfig+0x2b4>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005645 	.word	0x08005645
 8005624:	08005689 	.word	0x08005689
 8005628:	0800564d 	.word	0x0800564d
 800562c:	08005689 	.word	0x08005689
 8005630:	08005653 	.word	0x08005653
 8005634:	08005689 	.word	0x08005689
 8005638:	08005689 	.word	0x08005689
 800563c:	08005689 	.word	0x08005689
 8005640:	08005681 	.word	0x08005681
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005644:	f7fd ff68 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8005648:	6178      	str	r0, [r7, #20]
        break;
 800564a:	e022      	b.n	8005692 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <UART_SetConfig+0x310>)
 800564e:	617b      	str	r3, [r7, #20]
        break;
 8005650:	e01f      	b.n	8005692 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005652:	f7fd fef3 	bl	800343c <HAL_RCC_GetSysClockFreq>
 8005656:	6178      	str	r0, [r7, #20]
        break;
 8005658:	e01b      	b.n	8005692 <UART_SetConfig+0x326>
 800565a:	bf00      	nop
 800565c:	cfff69f3 	.word	0xcfff69f3
 8005660:	40008000 	.word	0x40008000
 8005664:	40013800 	.word	0x40013800
 8005668:	40021000 	.word	0x40021000
 800566c:	40004400 	.word	0x40004400
 8005670:	40004800 	.word	0x40004800
 8005674:	40004c00 	.word	0x40004c00
 8005678:	40005000 	.word	0x40005000
 800567c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005684:	617b      	str	r3, [r7, #20]
        break;
 8005686:	e004      	b.n	8005692 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	76bb      	strb	r3, [r7, #26]
        break;
 8005690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 811b 	beq.w	80058d0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	4a96      	ldr	r2, [pc, #600]	; (80058f8 <UART_SetConfig+0x58c>)
 80056a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056a4:	461a      	mov	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ac:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	4413      	add	r3, r2
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d305      	bcc.n	80056ca <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d902      	bls.n	80056d0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	76bb      	strb	r3, [r7, #26]
 80056ce:	e0ff      	b.n	80058d0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f04f 0100 	mov.w	r1, #0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	4a86      	ldr	r2, [pc, #536]	; (80058f8 <UART_SetConfig+0x58c>)
 80056de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	f7fa fd96 	bl	8000218 <__aeabi_uldivmod>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4610      	mov	r0, r2
 80056f2:	4619      	mov	r1, r3
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	020b      	lsls	r3, r1, #8
 80056fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005702:	0202      	lsls	r2, r0, #8
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	6849      	ldr	r1, [r1, #4]
 8005708:	0849      	lsrs	r1, r1, #1
 800570a:	4608      	mov	r0, r1
 800570c:	f04f 0100 	mov.w	r1, #0
 8005710:	1814      	adds	r4, r2, r0
 8005712:	eb43 0501 	adc.w	r5, r3, r1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	461a      	mov	r2, r3
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	4620      	mov	r0, r4
 8005722:	4629      	mov	r1, r5
 8005724:	f7fa fd78 	bl	8000218 <__aeabi_uldivmod>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4613      	mov	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005736:	d308      	bcc.n	800574a <UART_SetConfig+0x3de>
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573e:	d204      	bcs.n	800574a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	60da      	str	r2, [r3, #12]
 8005748:	e0c2      	b.n	80058d0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	76bb      	strb	r3, [r7, #26]
 800574e:	e0bf      	b.n	80058d0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005758:	d165      	bne.n	8005826 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800575a:	7efb      	ldrb	r3, [r7, #27]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d828      	bhi.n	80057b2 <UART_SetConfig+0x446>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0x3fc>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	0800578d 	.word	0x0800578d
 800576c:	08005795 	.word	0x08005795
 8005770:	0800579d 	.word	0x0800579d
 8005774:	080057b3 	.word	0x080057b3
 8005778:	080057a3 	.word	0x080057a3
 800577c:	080057b3 	.word	0x080057b3
 8005780:	080057b3 	.word	0x080057b3
 8005784:	080057b3 	.word	0x080057b3
 8005788:	080057ab 	.word	0x080057ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800578c:	f7fd fec4 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8005790:	6178      	str	r0, [r7, #20]
        break;
 8005792:	e013      	b.n	80057bc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005794:	f7fd fed6 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8005798:	6178      	str	r0, [r7, #20]
        break;
 800579a:	e00f      	b.n	80057bc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800579c:	4b57      	ldr	r3, [pc, #348]	; (80058fc <UART_SetConfig+0x590>)
 800579e:	617b      	str	r3, [r7, #20]
        break;
 80057a0:	e00c      	b.n	80057bc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057a2:	f7fd fe4b 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80057a6:	6178      	str	r0, [r7, #20]
        break;
 80057a8:	e008      	b.n	80057bc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ae:	617b      	str	r3, [r7, #20]
        break;
 80057b0:	e004      	b.n	80057bc <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	76bb      	strb	r3, [r7, #26]
        break;
 80057ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 8086 	beq.w	80058d0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	4a4b      	ldr	r2, [pc, #300]	; (80058f8 <UART_SetConfig+0x58c>)
 80057ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057ce:	461a      	mov	r2, r3
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80057d6:	005a      	lsls	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	441a      	add	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2b0f      	cmp	r3, #15
 80057f0:	d916      	bls.n	8005820 <UART_SetConfig+0x4b4>
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f8:	d212      	bcs.n	8005820 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f023 030f 	bic.w	r3, r3, #15
 8005802:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	085b      	lsrs	r3, r3, #1
 8005808:	b29b      	uxth	r3, r3
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	b29a      	uxth	r2, r3
 8005810:	89fb      	ldrh	r3, [r7, #14]
 8005812:	4313      	orrs	r3, r2
 8005814:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	89fa      	ldrh	r2, [r7, #14]
 800581c:	60da      	str	r2, [r3, #12]
 800581e:	e057      	b.n	80058d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	76bb      	strb	r3, [r7, #26]
 8005824:	e054      	b.n	80058d0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005826:	7efb      	ldrb	r3, [r7, #27]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d828      	bhi.n	800587e <UART_SetConfig+0x512>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x4c8>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005859 	.word	0x08005859
 8005838:	08005861 	.word	0x08005861
 800583c:	08005869 	.word	0x08005869
 8005840:	0800587f 	.word	0x0800587f
 8005844:	0800586f 	.word	0x0800586f
 8005848:	0800587f 	.word	0x0800587f
 800584c:	0800587f 	.word	0x0800587f
 8005850:	0800587f 	.word	0x0800587f
 8005854:	08005877 	.word	0x08005877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fd fe5e 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 800585c:	6178      	str	r0, [r7, #20]
        break;
 800585e:	e013      	b.n	8005888 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005860:	f7fd fe70 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8005864:	6178      	str	r0, [r7, #20]
        break;
 8005866:	e00f      	b.n	8005888 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005868:	4b24      	ldr	r3, [pc, #144]	; (80058fc <UART_SetConfig+0x590>)
 800586a:	617b      	str	r3, [r7, #20]
        break;
 800586c:	e00c      	b.n	8005888 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800586e:	f7fd fde5 	bl	800343c <HAL_RCC_GetSysClockFreq>
 8005872:	6178      	str	r0, [r7, #20]
        break;
 8005874:	e008      	b.n	8005888 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800587a:	617b      	str	r3, [r7, #20]
        break;
 800587c:	e004      	b.n	8005888 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	76bb      	strb	r3, [r7, #26]
        break;
 8005886:	bf00      	nop
    }

    if (pclk != 0U)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d020      	beq.n	80058d0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	4a19      	ldr	r2, [pc, #100]	; (80058f8 <UART_SetConfig+0x58c>)
 8005894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005898:	461a      	mov	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	fbb3 f2f2 	udiv	r2, r3, r2
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	441a      	add	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b0f      	cmp	r3, #15
 80058b8:	d908      	bls.n	80058cc <UART_SetConfig+0x560>
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c0:	d204      	bcs.n	80058cc <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	60da      	str	r2, [r3, #12]
 80058ca:	e001      	b.n	80058d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80058ec:	7ebb      	ldrb	r3, [r7, #26]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3720      	adds	r7, #32
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bdb0      	pop	{r4, r5, r7, pc}
 80058f6:	bf00      	nop
 80058f8:	08005f84 	.word	0x08005f84
 80058fc:	00f42400 	.word	0x00f42400

08005900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01a      	beq.n	8005a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059fe:	d10a      	bne.n	8005a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
  }
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a54:	f7fc fc74 	bl	8002340 <HAL_GetTick>
 8005a58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d10e      	bne.n	8005a86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f82f 	bl	8005ada <UART_WaitOnFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e025      	b.n	8005ad2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d10e      	bne.n	8005ab2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f819 	bl	8005ada <UART_WaitOnFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e00f      	b.n	8005ad2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	603b      	str	r3, [r7, #0]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aea:	e062      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d05e      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af4:	f7fc fc24 	bl	8002340 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d302      	bcc.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d11d      	bne.n	8005b46 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b18:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0201 	bic.w	r2, r2, #1
 8005b28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e045      	b.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d02e      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b62:	d126      	bne.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b7c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e00f      	b.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	bf0c      	ite	eq
 8005bc2:	2301      	moveq	r3, #1
 8005bc4:	2300      	movne	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d08d      	beq.n	8005aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bf0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6812      	ldr	r2, [r2, #0]
 8005bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d107      	bne.n	8005c1e <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0210 	bic.w	r2, r2, #16
 8005c1c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7ff fb6f 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c80:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff fb4b 	bl	800532c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e027      	b.n	8005d40 <HAL_UARTEx_DisableFifoMode+0x66>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2224      	movs	r2, #36	; 0x24
 8005cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0201 	bic.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e02d      	b.n	8005dc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2224      	movs	r2, #36	; 0x24
 8005d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0201 	bic.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f84f 	bl	8005e44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e02d      	b.n	8005e3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2224      	movs	r2, #36	; 0x24
 8005dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0201 	bic.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f811 	bl	8005e44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d108      	bne.n	8005e66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e64:	e031      	b.n	8005eca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e66:	2308      	movs	r3, #8
 8005e68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	0e5b      	lsrs	r3, r3, #25
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	0f5b      	lsrs	r3, r3, #29
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e8e:	7bbb      	ldrb	r3, [r7, #14]
 8005e90:	7b3a      	ldrb	r2, [r7, #12]
 8005e92:	4911      	ldr	r1, [pc, #68]	; (8005ed8 <UARTEx_SetNbDataToProcess+0x94>)
 8005e94:	5c8a      	ldrb	r2, [r1, r2]
 8005e96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e9a:	7b3a      	ldrb	r2, [r7, #12]
 8005e9c:	490f      	ldr	r1, [pc, #60]	; (8005edc <UARTEx_SetNbDataToProcess+0x98>)
 8005e9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ea0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	7b7a      	ldrb	r2, [r7, #13]
 8005eb0:	4909      	ldr	r1, [pc, #36]	; (8005ed8 <UARTEx_SetNbDataToProcess+0x94>)
 8005eb2:	5c8a      	ldrb	r2, [r1, r2]
 8005eb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005eb8:	7b7a      	ldrb	r2, [r7, #13]
 8005eba:	4908      	ldr	r1, [pc, #32]	; (8005edc <UARTEx_SetNbDataToProcess+0x98>)
 8005ebc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ebe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	08005f9c 	.word	0x08005f9c
 8005edc:	08005fa4 	.word	0x08005fa4

08005ee0 <__libc_init_array>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	4d0d      	ldr	r5, [pc, #52]	; (8005f18 <__libc_init_array+0x38>)
 8005ee4:	4c0d      	ldr	r4, [pc, #52]	; (8005f1c <__libc_init_array+0x3c>)
 8005ee6:	1b64      	subs	r4, r4, r5
 8005ee8:	10a4      	asrs	r4, r4, #2
 8005eea:	2600      	movs	r6, #0
 8005eec:	42a6      	cmp	r6, r4
 8005eee:	d109      	bne.n	8005f04 <__libc_init_array+0x24>
 8005ef0:	4d0b      	ldr	r5, [pc, #44]	; (8005f20 <__libc_init_array+0x40>)
 8005ef2:	4c0c      	ldr	r4, [pc, #48]	; (8005f24 <__libc_init_array+0x44>)
 8005ef4:	f000 f820 	bl	8005f38 <_init>
 8005ef8:	1b64      	subs	r4, r4, r5
 8005efa:	10a4      	asrs	r4, r4, #2
 8005efc:	2600      	movs	r6, #0
 8005efe:	42a6      	cmp	r6, r4
 8005f00:	d105      	bne.n	8005f0e <__libc_init_array+0x2e>
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f08:	4798      	blx	r3
 8005f0a:	3601      	adds	r6, #1
 8005f0c:	e7ee      	b.n	8005eec <__libc_init_array+0xc>
 8005f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f12:	4798      	blx	r3
 8005f14:	3601      	adds	r6, #1
 8005f16:	e7f2      	b.n	8005efe <__libc_init_array+0x1e>
 8005f18:	08005fb4 	.word	0x08005fb4
 8005f1c:	08005fb4 	.word	0x08005fb4
 8005f20:	08005fb4 	.word	0x08005fb4
 8005f24:	08005fb8 	.word	0x08005fb8

08005f28 <memset>:
 8005f28:	4402      	add	r2, r0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d100      	bne.n	8005f32 <memset+0xa>
 8005f30:	4770      	bx	lr
 8005f32:	f803 1b01 	strb.w	r1, [r3], #1
 8005f36:	e7f9      	b.n	8005f2c <memset+0x4>

08005f38 <_init>:
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	bf00      	nop
 8005f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3e:	bc08      	pop	{r3}
 8005f40:	469e      	mov	lr, r3
 8005f42:	4770      	bx	lr

08005f44 <_fini>:
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f46:	bf00      	nop
 8005f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4a:	bc08      	pop	{r3}
 8005f4c:	469e      	mov	lr, r3
 8005f4e:	4770      	bx	lr

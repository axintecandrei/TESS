
TESS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003610  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080037cc  080037cc  000137cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000038  20000000  080037d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004144  20000038  0800380c  00020038  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000417c  0800380c  0002417c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001348d  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028f7  00000000  00000000  000334f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007d8  00000000  00000000  00035df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006b0  00000000  00000000  000365c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00018cc7  00000000  00000000  00036c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d395  00000000  00000000  0004f93f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0008eb1b  00000000  00000000  0005ccd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000eb7ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001cf0  00000000  00000000  000eb86c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000038 	.word	0x20000038
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800378c 	.word	0x0800378c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000003c 	.word	0x2000003c
 80001d0:	0800378c 	.word	0x0800378c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <TESS_DAS_INIT>:
uint32_t dma_isr_cnt, ring_buff_cnt;

static void TESS_DAS_OUT_BUFFER(r_buff_data_t* out_buffer);

void TESS_DAS_INIT()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	TESS_RING_BUFFER_INIT(&TESS_RING_BUFFER);
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <TESS_DAS_INIT+0x14>)
 80004da:	f000 f951 	bl	8000780 <TESS_RING_BUFFER_INIT>
	//TESS_LOOP_CNT=0;
	Set_TessDasStates(DAS_StandBy);
 80004de:	4b03      	ldr	r3, [pc, #12]	; (80004ec <TESS_DAS_INIT+0x18>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200000d4 	.word	0x200000d4
 80004ec:	20004134 	.word	0x20004134

080004f0 <TESS_DAS_OUT_BUFFER>:

static void TESS_DAS_OUT_BUFFER(r_buff_data_t* out_buffer)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
    /* fill buffer with data*/
    out_buffer->byte0 = 0x55;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2255      	movs	r2, #85	; 0x55
 80004fc:	701a      	strb	r2, [r3, #0]
    out_buffer->byte1 = 0;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	705a      	strb	r2, [r3, #1]
    out_buffer->byte2 = 0;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	709a      	strb	r2, [r3, #2]
    out_buffer->byte3 = 0;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2200      	movs	r2, #0
 800050e:	70da      	strb	r2, [r3, #3]
    out_buffer->byte4 = 0;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2200      	movs	r2, #0
 8000514:	711a      	strb	r2, [r3, #4]
    out_buffer->byte5 = 0;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2200      	movs	r2, #0
 800051a:	715a      	strb	r2, [r3, #5]
    out_buffer->byte6 = 0;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2200      	movs	r2, #0
 8000520:	719a      	strb	r2, [r3, #6]
    out_buffer->byte7 = 0;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2200      	movs	r2, #0
 8000526:	71da      	strb	r2, [r3, #7]
    out_buffer->byte8 = 0;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	721a      	strb	r2, [r3, #8]
    out_buffer->byte9 = 0;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2200      	movs	r2, #0
 8000532:	725a      	strb	r2, [r3, #9]
    out_buffer->byte10 = 0;// Get_TessDasStates();
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	729a      	strb	r2, [r3, #10]
    out_buffer->byte11 =(TESS_LOOP_CNT&0x000000FF);
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <TESS_DAS_OUT_BUFFER+0x8c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	b2da      	uxtb	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	72da      	strb	r2, [r3, #11]
    out_buffer->byte12 =(TESS_LOOP_CNT&0x0000FF00)>>8;
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <TESS_DAS_OUT_BUFFER+0x8c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	b2da      	uxtb	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	731a      	strb	r2, [r3, #12]
    out_buffer->byte13 =(TESS_LOOP_CNT&0x00FF0000)>>16;
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <TESS_DAS_OUT_BUFFER+0x8c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	0c1b      	lsrs	r3, r3, #16
 8000556:	b2da      	uxtb	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	735a      	strb	r2, [r3, #13]
    out_buffer->byte14 =(TESS_LOOP_CNT&0xFF000000)>>24;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <TESS_DAS_OUT_BUFFER+0x8c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	0e1b      	lsrs	r3, r3, #24
 8000562:	b2da      	uxtb	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	739a      	strb	r2, [r3, #14]
    out_buffer->byte15 =0x77;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2277      	movs	r2, #119	; 0x77
 800056c:	73da      	strb	r2, [r3, #15]

}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20004130 	.word	0x20004130

08000580 <TESS_DAS_MAIN>:

void TESS_DAS_MAIN()
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
  /*DAS State Machine*/
   switch(Get_TessDasStates())
 8000586:	4b32      	ldr	r3, [pc, #200]	; (8000650 <TESS_DAS_MAIN+0xd0>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d002      	beq.n	8000594 <TESS_DAS_MAIN+0x14>
 800058e:	2b03      	cmp	r3, #3
 8000590:	d034      	beq.n	80005fc <TESS_DAS_MAIN+0x7c>
    	  /*Send a msg to pc that the measurement window is closed*/
    	  //TESS_DMA_BUFFER.byte0 =
    	  //break;
      case DAS_StandBy:
      default:
    	  break;
 8000592:	e059      	b.n	8000648 <TESS_DAS_MAIN+0xc8>
    	  TESS_DAS_OUT_BUFFER(&TESS_DATA_ACQ_BUFFER);
 8000594:	482f      	ldr	r0, [pc, #188]	; (8000654 <TESS_DAS_MAIN+0xd4>)
 8000596:	f7ff ffab 	bl	80004f0 <TESS_DAS_OUT_BUFFER>
    	  TESS_RING_BUFFER_PUT(&TESS_RING_BUFFER, TESS_DATA_ACQ_BUFFER);
 800059a:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <TESS_DAS_MAIN+0xd4>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	2100      	movs	r1, #0
 80005a0:	4611      	mov	r1, r2
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	2500      	movs	r5, #0
 80005a6:	4615      	mov	r5, r2
 80005a8:	689a      	ldr	r2, [r3, #8]
 80005aa:	2400      	movs	r4, #0
 80005ac:	4614      	mov	r4, r2
 80005ae:	466a      	mov	r2, sp
 80005b0:	330c      	adds	r3, #12
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	6010      	str	r0, [r2, #0]
 80005b6:	462a      	mov	r2, r5
 80005b8:	4623      	mov	r3, r4
 80005ba:	4827      	ldr	r0, [pc, #156]	; (8000658 <TESS_DAS_MAIN+0xd8>)
 80005bc:	f000 f9cd 	bl	800095a <TESS_RING_BUFFER_PUT>
    	  TESS_DMA_BUFFER = TESS_RING_BUFFER_GET(&TESS_RING_BUFFER);
 80005c0:	4c26      	ldr	r4, [pc, #152]	; (800065c <TESS_DAS_MAIN+0xdc>)
 80005c2:	463b      	mov	r3, r7
 80005c4:	4924      	ldr	r1, [pc, #144]	; (8000658 <TESS_DAS_MAIN+0xd8>)
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f972 	bl	80008b0 <TESS_RING_BUFFER_GET>
 80005cc:	4622      	mov	r2, r4
 80005ce:	463b      	mov	r3, r7
 80005d0:	681c      	ldr	r4, [r3, #0]
 80005d2:	6858      	ldr	r0, [r3, #4]
 80005d4:	6899      	ldr	r1, [r3, #8]
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	6014      	str	r4, [r2, #0]
 80005da:	6050      	str	r0, [r2, #4]
 80005dc:	6091      	str	r1, [r2, #8]
 80005de:	60d3      	str	r3, [r2, #12]
    	  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&TESS_DMA_BUFFER,ACQ_BUFFER_SIZE);
 80005e0:	2210      	movs	r2, #16
 80005e2:	491e      	ldr	r1, [pc, #120]	; (800065c <TESS_DAS_MAIN+0xdc>)
 80005e4:	481e      	ldr	r0, [pc, #120]	; (8000660 <TESS_DAS_MAIN+0xe0>)
 80005e6:	f001 fea7 	bl	8002338 <HAL_UART_Transmit_DMA>
    	  Set_TessDasStates(DAS_KeepPacking);
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <TESS_DAS_MAIN+0xd0>)
 80005ec:	2203      	movs	r2, #3
 80005ee:	701a      	strb	r2, [r3, #0]
    	  TESS_LOOP_CNT++;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <TESS_DAS_MAIN+0xe4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <TESS_DAS_MAIN+0xe4>)
 80005f8:	6013      	str	r3, [r2, #0]
    	  break;
 80005fa:	e025      	b.n	8000648 <TESS_DAS_MAIN+0xc8>
    	  if (!TESS_RINGBUFF_IS_FULL(&TESS_RING_BUFFER) )
 80005fc:	4816      	ldr	r0, [pc, #88]	; (8000658 <TESS_DAS_MAIN+0xd8>)
 80005fe:	f000 fa03 	bl	8000a08 <TESS_RINGBUFF_IS_FULL>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d11b      	bne.n	8000640 <TESS_DAS_MAIN+0xc0>
                TESS_DAS_OUT_BUFFER(&TESS_DATA_ACQ_BUFFER);
 8000608:	4812      	ldr	r0, [pc, #72]	; (8000654 <TESS_DAS_MAIN+0xd4>)
 800060a:	f7ff ff71 	bl	80004f0 <TESS_DAS_OUT_BUFFER>
                TESS_RING_BUFFER_PUT(&TESS_RING_BUFFER, TESS_DATA_ACQ_BUFFER);
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <TESS_DAS_MAIN+0xd4>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	2100      	movs	r1, #0
 8000614:	4611      	mov	r1, r2
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	2500      	movs	r5, #0
 800061a:	4615      	mov	r5, r2
 800061c:	689a      	ldr	r2, [r3, #8]
 800061e:	2400      	movs	r4, #0
 8000620:	4614      	mov	r4, r2
 8000622:	466a      	mov	r2, sp
 8000624:	330c      	adds	r3, #12
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	6010      	str	r0, [r2, #0]
 800062a:	462a      	mov	r2, r5
 800062c:	4623      	mov	r3, r4
 800062e:	480a      	ldr	r0, [pc, #40]	; (8000658 <TESS_DAS_MAIN+0xd8>)
 8000630:	f000 f993 	bl	800095a <TESS_RING_BUFFER_PUT>
                TESS_LOOP_CNT++;
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <TESS_DAS_MAIN+0xe4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <TESS_DAS_MAIN+0xe4>)
 800063c:	6013      	str	r3, [r2, #0]
          break;
 800063e:	e002      	b.n	8000646 <TESS_DAS_MAIN+0xc6>
               	Set_TessDasStates(DAS_StopOfMeasurement);
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <TESS_DAS_MAIN+0xd0>)
 8000642:	2204      	movs	r2, #4
 8000644:	701a      	strb	r2, [r3, #0]
          break;
 8000646:	bf00      	nop
   }

}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bdb0      	pop	{r4, r5, r7, pc}
 8000650:	20004134 	.word	0x20004134
 8000654:	20004148 	.word	0x20004148
 8000658:	200000d4 	.word	0x200000d4
 800065c:	20004138 	.word	0x20004138
 8000660:	200040e0 	.word	0x200040e0
 8000664:	20004130 	.word	0x20004130

08000668 <TESS_DAS_GET_COMMANDS>:

void TESS_DAS_GET_COMMANDS(uint8_t command)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]

	if ((command == DAS_START_MEAS) )
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b31      	cmp	r3, #49	; 0x31
 8000676:	d107      	bne.n	8000688 <TESS_DAS_GET_COMMANDS+0x20>
	{
		if (Get_TessDasStates() == DAS_StandBy)
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <TESS_DAS_GET_COMMANDS+0x40>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d10d      	bne.n	800069c <TESS_DAS_GET_COMMANDS+0x34>
		{
			Set_TessDasStates(DAS_StartMeas);
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <TESS_DAS_GET_COMMANDS+0x40>)
 8000682:	2202      	movs	r2, #2
 8000684:	701a      	strb	r2, [r3, #0]
			/*transition from other states forbidden*/
		}

	}

}
 8000686:	e009      	b.n	800069c <TESS_DAS_GET_COMMANDS+0x34>
	else if(command == DAS_STOP_MEAS)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b30      	cmp	r3, #48	; 0x30
 800068c:	d106      	bne.n	800069c <TESS_DAS_GET_COMMANDS+0x34>
		if (Get_TessDasStates() == DAS_KeepPacking)
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <TESS_DAS_GET_COMMANDS+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d102      	bne.n	800069c <TESS_DAS_GET_COMMANDS+0x34>
			Set_TessDasStates(DAS_StopOfMeasurement);
 8000696:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <TESS_DAS_GET_COMMANDS+0x40>)
 8000698:	2204      	movs	r2, #4
 800069a:	701a      	strb	r2, [r3, #0]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	20004134 	.word	0x20004134

080006ac <TESS_DAS_UPDATE_UPON_TC>:

void TESS_DAS_UPDATE_UPON_TC()
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0



   if (Get_TessDasStates() == DAS_KeepPacking)
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <TESS_DAS_UPDATE_UPON_TC+0xbc>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d149      	bne.n	800074e <TESS_DAS_UPDATE_UPON_TC+0xa2>
   {
 	  //if (!TESS_RINGBUFF_IS_FULL(&TESS_RING_BUFFER) )
         {
         TESS_DMA_BUFFER = TESS_RING_BUFFER_GET(&TESS_RING_BUFFER);
 80006ba:	4c2c      	ldr	r4, [pc, #176]	; (800076c <TESS_DAS_UPDATE_UPON_TC+0xc0>)
 80006bc:	463b      	mov	r3, r7
 80006be:	492c      	ldr	r1, [pc, #176]	; (8000770 <TESS_DAS_UPDATE_UPON_TC+0xc4>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 f8f5 	bl	80008b0 <TESS_RING_BUFFER_GET>
 80006c6:	4622      	mov	r2, r4
 80006c8:	463b      	mov	r3, r7
 80006ca:	681c      	ldr	r4, [r3, #0]
 80006cc:	6858      	ldr	r0, [r3, #4]
 80006ce:	6899      	ldr	r1, [r3, #8]
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	6014      	str	r4, [r2, #0]
 80006d4:	6050      	str	r0, [r2, #4]
 80006d6:	6091      	str	r1, [r2, #8]
 80006d8:	60d3      	str	r3, [r2, #12]
         dma_isr_cnt++;
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <TESS_DAS_UPDATE_UPON_TC+0xc8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	4a24      	ldr	r2, [pc, #144]	; (8000774 <TESS_DAS_UPDATE_UPON_TC+0xc8>)
 80006e2:	6013      	str	r3, [r2, #0]
         ring_buff_cnt = TESS_RING_BUFFER.count;
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <TESS_DAS_UPDATE_UPON_TC+0xc4>)
 80006e6:	889b      	ldrh	r3, [r3, #4]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <TESS_DAS_UPDATE_UPON_TC+0xcc>)
 80006ec:	601a      	str	r2, [r3, #0]
         TESS_DMA_BUFFER.byte1 = dma_isr_cnt&0x000000FF;
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <TESS_DAS_UPDATE_UPON_TC+0xc8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <TESS_DAS_UPDATE_UPON_TC+0xc0>)
 80006f6:	705a      	strb	r2, [r3, #1]
         TESS_DMA_BUFFER.byte2 = (dma_isr_cnt &0x0000FF00)>>8;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <TESS_DAS_UPDATE_UPON_TC+0xc8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <TESS_DAS_UPDATE_UPON_TC+0xc0>)
 8000702:	709a      	strb	r2, [r3, #2]
         TESS_DMA_BUFFER.byte3 = (TESS_RING_BUFFER.count&0x000000FF);
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <TESS_DAS_UPDATE_UPON_TC+0xc4>)
 8000706:	889b      	ldrh	r3, [r3, #4]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <TESS_DAS_UPDATE_UPON_TC+0xc0>)
 800070c:	70da      	strb	r2, [r3, #3]
         TESS_DMA_BUFFER.byte4 = (TESS_RING_BUFFER.count&0x0000FF00)>>8;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <TESS_DAS_UPDATE_UPON_TC+0xc4>)
 8000710:	889b      	ldrh	r3, [r3, #4]
 8000712:	0a1b      	lsrs	r3, r3, #8
 8000714:	b29b      	uxth	r3, r3
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <TESS_DAS_UPDATE_UPON_TC+0xc0>)
 800071a:	711a      	strb	r2, [r3, #4]
         TESS_DMA_BUFFER.byte5 =  TESS_RING_BUFFER.head&0x000000FF;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <TESS_DAS_UPDATE_UPON_TC+0xc4>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <TESS_DAS_UPDATE_UPON_TC+0xc0>)
 8000724:	715a      	strb	r2, [r3, #5]
         TESS_DMA_BUFFER.byte6 = (TESS_RING_BUFFER.head&0x0000FF00)>>8;
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <TESS_DAS_UPDATE_UPON_TC+0xc4>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <TESS_DAS_UPDATE_UPON_TC+0xc0>)
 8000732:	719a      	strb	r2, [r3, #6]
         TESS_DMA_BUFFER.byte7 =  TESS_RING_BUFFER.tail&0x000000FF;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <TESS_DAS_UPDATE_UPON_TC+0xc4>)
 8000736:	885b      	ldrh	r3, [r3, #2]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <TESS_DAS_UPDATE_UPON_TC+0xc0>)
 800073c:	71da      	strb	r2, [r3, #7]
         TESS_DMA_BUFFER.byte8 = (TESS_RING_BUFFER.tail&0x0000FF00)>>8;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <TESS_DAS_UPDATE_UPON_TC+0xc4>)
 8000740:	885b      	ldrh	r3, [r3, #2]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <TESS_DAS_UPDATE_UPON_TC+0xc0>)
 800074a:	721a      	strb	r2, [r3, #8]
	  HAL_UART_DMAStop(&huart2);
	  /*Reset all data from RingBuffer*/
	  TESS_DAS_INIT();
   }

}
 800074c:	e008      	b.n	8000760 <TESS_DAS_UPDATE_UPON_TC+0xb4>
   else if (Get_TessDasStates() == DAS_StopOfMeasurement)
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <TESS_DAS_UPDATE_UPON_TC+0xbc>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b04      	cmp	r3, #4
 8000754:	d104      	bne.n	8000760 <TESS_DAS_UPDATE_UPON_TC+0xb4>
	  HAL_UART_DMAStop(&huart2);
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <TESS_DAS_UPDATE_UPON_TC+0xd0>)
 8000758:	f001 fe58 	bl	800240c <HAL_UART_DMAStop>
	  TESS_DAS_INIT();
 800075c:	f7ff feba 	bl	80004d4 <TESS_DAS_INIT>
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bd90      	pop	{r4, r7, pc}
 8000768:	20004134 	.word	0x20004134
 800076c:	20004138 	.word	0x20004138
 8000770:	200000d4 	.word	0x200000d4
 8000774:	2000005c 	.word	0x2000005c
 8000778:	20000058 	.word	0x20000058
 800077c:	200040e0 	.word	0x200040e0

08000780 <TESS_RING_BUFFER_INIT>:

static uint16_t TESS_BUFF_IDX_INC (const uint16_t currentVal,const uint16_t buff_size);
static void DATA_COPY ( const r_buff_data_t *source, r_buff_data_t *dest);

void TESS_RING_BUFFER_INIT(ring_buffer_t * buff)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
   uint16_t  idx;

   buff->count         = 0;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2200      	movs	r2, #0
 800078c:	809a      	strh	r2, [r3, #4]
   buff->inner_count   = 0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	80da      	strh	r2, [r3, #6]
   buff->head          = 0;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	801a      	strh	r2, [r3, #0]
   buff->tail          = 0;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	805a      	strh	r2, [r3, #2]

   for (idx = 0; idx < RBUF_SIZE; idx++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	81fb      	strh	r3, [r7, #14]
 80007a4:	e07a      	b.n	800089c <TESS_RING_BUFFER_INIT+0x11c>
   {
      buff->buff_data[idx].byte0 = 0;
 80007a6:	89fb      	ldrh	r3, [r7, #14]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	011b      	lsls	r3, r3, #4
 80007ac:	4413      	add	r3, r2
 80007ae:	330a      	adds	r3, #10
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte1 = 0;
 80007b4:	89fb      	ldrh	r3, [r7, #14]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	4413      	add	r3, r2
 80007bc:	330b      	adds	r3, #11
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte2 = 0;
 80007c2:	89fb      	ldrh	r3, [r7, #14]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	011b      	lsls	r3, r3, #4
 80007c8:	4413      	add	r3, r2
 80007ca:	330c      	adds	r3, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte3 = 0;
 80007d0:	89fb      	ldrh	r3, [r7, #14]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	4413      	add	r3, r2
 80007d8:	330d      	adds	r3, #13
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte4 = 0;
 80007de:	89fb      	ldrh	r3, [r7, #14]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	4413      	add	r3, r2
 80007e6:	330e      	adds	r3, #14
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte5 = 0;
 80007ec:	89fb      	ldrh	r3, [r7, #14]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	4413      	add	r3, r2
 80007f4:	330f      	adds	r3, #15
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte6 = 0;
 80007fa:	89fb      	ldrh	r3, [r7, #14]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	4413      	add	r3, r2
 8000802:	3310      	adds	r3, #16
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte7 = 0;
 8000808:	89fb      	ldrh	r3, [r7, #14]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	4413      	add	r3, r2
 8000810:	3311      	adds	r3, #17
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte8 = 0;
 8000816:	89fb      	ldrh	r3, [r7, #14]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	3301      	adds	r3, #1
 800081c:	011b      	lsls	r3, r3, #4
 800081e:	4413      	add	r3, r2
 8000820:	3302      	adds	r3, #2
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte9 = 0;
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	3301      	adds	r3, #1
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	4413      	add	r3, r2
 8000830:	3303      	adds	r3, #3
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte10 = 0;
 8000836:	89fb      	ldrh	r3, [r7, #14]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4413      	add	r3, r2
 8000840:	3304      	adds	r3, #4
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte11 = 0;
 8000846:	89fb      	ldrh	r3, [r7, #14]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	3301      	adds	r3, #1
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	4413      	add	r3, r2
 8000850:	3305      	adds	r3, #5
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte12 = 0;
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	3301      	adds	r3, #1
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	4413      	add	r3, r2
 8000860:	3306      	adds	r3, #6
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte13 = 0;
 8000866:	89fb      	ldrh	r3, [r7, #14]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	3301      	adds	r3, #1
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	4413      	add	r3, r2
 8000870:	3307      	adds	r3, #7
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte14 = 0;
 8000876:	89fb      	ldrh	r3, [r7, #14]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	3301      	adds	r3, #1
 800087c:	011b      	lsls	r3, r3, #4
 800087e:	4413      	add	r3, r2
 8000880:	3308      	adds	r3, #8
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte15 = 0;
 8000886:	89fb      	ldrh	r3, [r7, #14]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	3301      	adds	r3, #1
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	4413      	add	r3, r2
 8000890:	3309      	adds	r3, #9
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
   for (idx = 0; idx < RBUF_SIZE; idx++)
 8000896:	89fb      	ldrh	r3, [r7, #14]
 8000898:	3301      	adds	r3, #1
 800089a:	81fb      	strh	r3, [r7, #14]
 800089c:	89fb      	ldrh	r3, [r7, #14]
 800089e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008a2:	d380      	bcc.n	80007a6 <TESS_RING_BUFFER_INIT+0x26>
   }
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <TESS_RING_BUFFER_GET>:

r_buff_data_t TESS_RING_BUFFER_GET(ring_buffer_t * buff)
{
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
   r_buff_data_t  loc_buff_data;


   if (buff->count > 0u)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	889b      	ldrh	r3, [r3, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d01e      	beq.n	8000900 <TESS_RING_BUFFER_GET+0x50>
   {
	  /*copy data from the buffer to local structure*/
      DATA_COPY(&(buff->buff_data[buff->tail]), &loc_buff_data);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	885b      	ldrh	r3, [r3, #2]
 80008c6:	011b      	lsls	r3, r3, #4
 80008c8:	3308      	adds	r3, #8
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	4413      	add	r3, r2
 80008ce:	3302      	adds	r3, #2
 80008d0:	f107 0208 	add.w	r2, r7, #8
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f8c2 	bl	8000a60 <DATA_COPY>

      buff->tail  = TESS_BUFF_IDX_INC (buff->tail, RBUF_SIZE);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	885b      	ldrh	r3, [r3, #2]
 80008e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f8a1 	bl	8000a2c <TESS_BUFF_IDX_INC>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	805a      	strh	r2, [r3, #2]
      buff->count--;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	889b      	ldrh	r3, [r3, #4]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	809a      	strh	r2, [r3, #4]
 80008fe:	e01f      	b.n	8000940 <TESS_RING_BUFFER_GET+0x90>

   }
   else
   {
      /* fill buffer with dummy data*/
      loc_buff_data.byte0 = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	723b      	strb	r3, [r7, #8]
      loc_buff_data.byte1 = 1;
 8000904:	2301      	movs	r3, #1
 8000906:	727b      	strb	r3, [r7, #9]
      loc_buff_data.byte2 = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	72bb      	strb	r3, [r7, #10]
      loc_buff_data.byte3 = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	72fb      	strb	r3, [r7, #11]
      loc_buff_data.byte4 = 1;
 8000910:	2301      	movs	r3, #1
 8000912:	733b      	strb	r3, [r7, #12]
      loc_buff_data.byte5 = 1;
 8000914:	2301      	movs	r3, #1
 8000916:	737b      	strb	r3, [r7, #13]
      loc_buff_data.byte6 = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	73bb      	strb	r3, [r7, #14]
      loc_buff_data.byte7 = 1;
 800091c:	2301      	movs	r3, #1
 800091e:	73fb      	strb	r3, [r7, #15]
      loc_buff_data.byte8 = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	743b      	strb	r3, [r7, #16]
      loc_buff_data.byte9 = 1;
 8000924:	2301      	movs	r3, #1
 8000926:	747b      	strb	r3, [r7, #17]
      loc_buff_data.byte10 = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	74bb      	strb	r3, [r7, #18]
      loc_buff_data.byte11 = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	74fb      	strb	r3, [r7, #19]
      loc_buff_data.byte12 = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	753b      	strb	r3, [r7, #20]
      loc_buff_data.byte13 = 1;
 8000934:	2301      	movs	r3, #1
 8000936:	757b      	strb	r3, [r7, #21]
      loc_buff_data.byte14 = 1;
 8000938:	2301      	movs	r3, #1
 800093a:	75bb      	strb	r3, [r7, #22]
      loc_buff_data.byte15 = 1;
 800093c:	2301      	movs	r3, #1
 800093e:	75fb      	strb	r3, [r7, #23]
   }

   /*return the entire structure at once*/
   return (loc_buff_data);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	461d      	mov	r5, r3
 8000944:	f107 0408 	add.w	r4, r7, #8
 8000948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800094a:	6028      	str	r0, [r5, #0]
 800094c:	6069      	str	r1, [r5, #4]
 800094e:	60aa      	str	r2, [r5, #8]
 8000950:	60eb      	str	r3, [r5, #12]
}
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bdb0      	pop	{r4, r5, r7, pc}

0800095a <TESS_RING_BUFFER_PUT>:

void TESS_RING_BUFFER_PUT(ring_buffer_t * buff, r_buff_data_t data)
{
 800095a:	b084      	sub	sp, #16
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	f107 0014 	add.w	r0, r7, #20
 8000968:	e880 000e 	stmia.w	r0, {r1, r2, r3}

   if (buff->count < RBUF_SIZE)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	889b      	ldrh	r3, [r3, #4]
 8000970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000974:	d21e      	bcs.n	80009b4 <TESS_RING_BUFFER_PUT+0x5a>
      {
         DATA_COPY(&data, &(buff->buff_data[buff->head])); /* copy received data to the buffer */
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	011b      	lsls	r3, r3, #4
 800097c:	3308      	adds	r3, #8
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	1c9a      	adds	r2, r3, #2
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f868 	bl	8000a60 <DATA_COPY>

         buff->head = TESS_BUFF_IDX_INC (buff->head, RBUF_SIZE);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f847 	bl	8000a2c <TESS_BUFF_IDX_INC>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	801a      	strh	r2, [r3, #0]
         buff->count++;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	889b      	ldrh	r3, [r3, #4]
 80009aa:	3301      	adds	r3, #1
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	809a      	strh	r2, [r3, #4]
         DATA_COPY(&data, &(buff->buff_data[buff->head])); /* copy received data to the buffer */
         buff->head = TESS_BUFF_IDX_INC (buff->head, RBUF_SIZE);

         /*count will remain constant*/
      }
}
 80009b2:	e022      	b.n	80009fa <TESS_RING_BUFFER_PUT+0xa0>
         buff->tail = TESS_BUFF_IDX_INC (buff->tail, RBUF_SIZE);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	885b      	ldrh	r3, [r3, #2]
 80009b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f835 	bl	8000a2c <TESS_BUFF_IDX_INC>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	805a      	strh	r2, [r3, #2]
         DATA_COPY(&data, &(buff->buff_data[buff->head])); /* copy received data to the buffer */
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	011b      	lsls	r3, r3, #4
 80009d0:	3308      	adds	r3, #8
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	1c9a      	adds	r2, r3, #2
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f83e 	bl	8000a60 <DATA_COPY>
         buff->head = TESS_BUFF_IDX_INC (buff->head, RBUF_SIZE);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f81d 	bl	8000a2c <TESS_BUFF_IDX_INC>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	801a      	strh	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a04:	b004      	add	sp, #16
 8000a06:	4770      	bx	lr

08000a08 <TESS_RINGBUFF_IS_FULL>:
{
   return (buff->count == 0);
}

uint8_t TESS_RINGBUFF_IS_FULL( const ring_buffer_t * buff)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
   return (RBUF_SIZE == buff->count);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	889b      	ldrh	r3, [r3, #4]
 8000a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a18:	bf0c      	ite	eq
 8000a1a:	2301      	moveq	r3, #1
 8000a1c:	2300      	movne	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <TESS_BUFF_IDX_INC>:

static uint16_t TESS_BUFF_IDX_INC (const uint16_t currentVal,const uint16_t buff_size)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	460a      	mov	r2, r1
 8000a36:	80fb      	strh	r3, [r7, #6]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	80bb      	strh	r3, [r7, #4]
   uint16_t  newVal;

   newVal = currentVal + 1;
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	81fb      	strh	r3, [r7, #14]
   newVal %= buff_size;
 8000a42:	89fb      	ldrh	r3, [r7, #14]
 8000a44:	88ba      	ldrh	r2, [r7, #4]
 8000a46:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a4a:	fb02 f201 	mul.w	r2, r2, r1
 8000a4e:	1a9b      	subs	r3, r3, r2
 8000a50:	81fb      	strh	r3, [r7, #14]

   return newVal;
 8000a52:	89fb      	ldrh	r3, [r7, #14]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DATA_COPY>:

static void DATA_COPY ( const r_buff_data_t *source, r_buff_data_t *dest)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
   /* copy byte by byte*/
   dest->byte0 = source->byte0;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	701a      	strb	r2, [r3, #0]
   dest->byte1 = source->byte1;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	785a      	ldrb	r2, [r3, #1]
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	705a      	strb	r2, [r3, #1]
   dest->byte2 = source->byte2;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	789a      	ldrb	r2, [r3, #2]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	709a      	strb	r2, [r3, #2]
   dest->byte3 = source->byte3;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	78da      	ldrb	r2, [r3, #3]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	70da      	strb	r2, [r3, #3]
   dest->byte4 = source->byte4;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	791a      	ldrb	r2, [r3, #4]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	711a      	strb	r2, [r3, #4]
   dest->byte5 = source->byte5;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	795a      	ldrb	r2, [r3, #5]
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	715a      	strb	r2, [r3, #5]
   dest->byte6 = source->byte6;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	799a      	ldrb	r2, [r3, #6]
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	719a      	strb	r2, [r3, #6]
   dest->byte7 = source->byte7;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	79da      	ldrb	r2, [r3, #7]
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	71da      	strb	r2, [r3, #7]
   dest->byte8 = source->byte8;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	7a1a      	ldrb	r2, [r3, #8]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	721a      	strb	r2, [r3, #8]
   dest->byte9 = source->byte9;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7a5a      	ldrb	r2, [r3, #9]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	725a      	strb	r2, [r3, #9]
   dest->byte10 = source->byte10;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7a9a      	ldrb	r2, [r3, #10]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	729a      	strb	r2, [r3, #10]
   dest->byte11 = source->byte11;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7ada      	ldrb	r2, [r3, #11]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	72da      	strb	r2, [r3, #11]
   dest->byte12 = source->byte12;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7b1a      	ldrb	r2, [r3, #12]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	731a      	strb	r2, [r3, #12]
   dest->byte13 = source->byte13;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7b5a      	ldrb	r2, [r3, #13]
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	735a      	strb	r2, [r3, #13]
   dest->byte14 = source->byte14;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7b9a      	ldrb	r2, [r3, #14]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	739a      	strb	r2, [r3, #14]
   dest->byte15 = source->byte15;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7bda      	ldrb	r2, [r3, #15]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	73da      	strb	r2, [r3, #15]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x54>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x58>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f910 	bl	8000d3c <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00e      	b.n	8000b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d80a      	bhi.n	8000b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f000 f8d8 	bl	8000ce8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b38:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <HAL_InitTick+0x5c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000004 	.word	0x20000004
 8000b54:	20000000 	.word	0x20000000

08000b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000004 	.word	0x20000004
 8000b7c:	20004158 	.word	0x20004158

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20004158 	.word	0x20004158

08000b98 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4907      	ldr	r1, [pc, #28]	; (8000be4 <NVIC_EnableIRQ+0x30>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	da0b      	bge.n	8000c14 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <NVIC_SetPriority+0x4c>)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 030f 	and.w	r3, r3, #15
 8000c08:	3b04      	subs	r3, #4
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c12:	e009      	b.n	8000c28 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4907      	ldr	r1, [pc, #28]	; (8000c38 <NVIC_SetPriority+0x50>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfa:	f7ff ff4d 	bl	8000b98 <NVIC_GetPriorityGrouping>
 8000cfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f7ff ff99 	bl	8000c3c <NVIC_EncodePriority>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff68 	bl	8000be8 <NVIC_SetPriority>
}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff40 	bl	8000bb4 <NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ffad 	bl	8000ca4 <SysTick_Config>
 8000d4a:	4603      	mov	r3, r0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d58:	f000 f802 	bl	8000d60 <HAL_SYSTICK_Callback>
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ff00 	bl	8000b80 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e099      	b.n	8000ec0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2202      	movs	r2, #2
 8000d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0201 	bic.w	r2, r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dac:	e00f      	b.n	8000dce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dae:	f7ff fee7 	bl	8000b80 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	d908      	bls.n	8000dce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e078      	b.n	8000ec0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e8      	bne.n	8000dae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <HAL_DMA_Init+0x158>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d107      	bne.n	8000e38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4313      	orrs	r3, r2
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f023 0307 	bic.w	r3, r3, #7
 8000e4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d117      	bne.n	8000e92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00e      	beq.n	8000e92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 fb09 	bl	800148c <DMA_CheckFifoParam>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d008      	beq.n	8000e92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2240      	movs	r2, #64	; 0x40
 8000e84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e016      	b.n	8000ec0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 fac0 	bl	8001420 <DMA_CalcBaseAndBitshift>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea8:	223f      	movs	r2, #63	; 0x3f
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	f010803f 	.word	0xf010803f

08000ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d101      	bne.n	8000ef2 <HAL_DMA_Start_IT+0x26>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e048      	b.n	8000f84 <HAL_DMA_Start_IT+0xb8>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d137      	bne.n	8000f76 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f000 fa52 	bl	80013c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f24:	223f      	movs	r2, #63	; 0x3f
 8000f26:	409a      	lsls	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0216 	orr.w	r2, r2, #22
 8000f3a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	695a      	ldr	r2, [r3, #20]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f4a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d007      	beq.n	8000f64 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0208 	orr.w	r2, r2, #8
 8000f62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0201 	orr.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e005      	b.n	8000f82 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f9a:	f7ff fdf1 	bl	8000b80 <HAL_GetTick>
 8000f9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d008      	beq.n	8000fbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e052      	b.n	8001064 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0216 	bic.w	r2, r2, #22
 8000fcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	695a      	ldr	r2, [r3, #20]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d103      	bne.n	8000fee <HAL_DMA_Abort+0x62>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0208 	bic.w	r2, r2, #8
 8000ffc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0201 	bic.w	r2, r2, #1
 800100c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800100e:	e013      	b.n	8001038 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001010:	f7ff fdb6 	bl	8000b80 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b05      	cmp	r3, #5
 800101c:	d90c      	bls.n	8001038 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2220      	movs	r2, #32
 8001022:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2203      	movs	r2, #3
 8001030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e015      	b.n	8001064 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1e4      	bne.n	8001010 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800104a:	223f      	movs	r2, #63	; 0x3f
 800104c:	409a      	lsls	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d004      	beq.n	800108a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00c      	b.n	80010a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2205      	movs	r2, #5
 800108e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0201 	bic.w	r2, r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010bc:	4b92      	ldr	r3, [pc, #584]	; (8001308 <HAL_DMA_IRQHandler+0x258>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a92      	ldr	r2, [pc, #584]	; (800130c <HAL_DMA_IRQHandler+0x25c>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0a9b      	lsrs	r3, r3, #10
 80010c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010da:	2208      	movs	r2, #8
 80010dc:	409a      	lsls	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d01a      	beq.n	800111c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d013      	beq.n	800111c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0204 	bic.w	r2, r2, #4
 8001102:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001108:	2208      	movs	r2, #8
 800110a:	409a      	lsls	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001114:	f043 0201 	orr.w	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001120:	2201      	movs	r2, #1
 8001122:	409a      	lsls	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4013      	ands	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d012      	beq.n	8001152 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00b      	beq.n	8001152 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113e:	2201      	movs	r2, #1
 8001140:	409a      	lsls	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114a:	f043 0202 	orr.w	r2, r3, #2
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001156:	2204      	movs	r2, #4
 8001158:	409a      	lsls	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d012      	beq.n	8001188 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00b      	beq.n	8001188 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001174:	2204      	movs	r2, #4
 8001176:	409a      	lsls	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001180:	f043 0204 	orr.w	r2, r3, #4
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118c:	2210      	movs	r2, #16
 800118e:	409a      	lsls	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4013      	ands	r3, r2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d043      	beq.n	8001220 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d03c      	beq.n	8001220 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011aa:	2210      	movs	r2, #16
 80011ac:	409a      	lsls	r2, r3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d018      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d108      	bne.n	80011e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d024      	beq.n	8001220 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	4798      	blx	r3
 80011de:	e01f      	b.n	8001220 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d01b      	beq.n	8001220 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	4798      	blx	r3
 80011f0:	e016      	b.n	8001220 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d107      	bne.n	8001210 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0208 	bic.w	r2, r2, #8
 800120e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001224:	2220      	movs	r2, #32
 8001226:	409a      	lsls	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4013      	ands	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 808e 	beq.w	800134e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 8086 	beq.w	800134e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001246:	2220      	movs	r2, #32
 8001248:	409a      	lsls	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b05      	cmp	r3, #5
 8001258:	d136      	bne.n	80012c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0216 	bic.w	r2, r2, #22
 8001268:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	695a      	ldr	r2, [r3, #20]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001278:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d103      	bne.n	800128a <HAL_DMA_IRQHandler+0x1da>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0208 	bic.w	r2, r2, #8
 8001298:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129e:	223f      	movs	r2, #63	; 0x3f
 80012a0:	409a      	lsls	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d07d      	beq.n	80013ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	4798      	blx	r3
        }
        return;
 80012c6:	e078      	b.n	80013ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01c      	beq.n	8001310 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d108      	bne.n	80012f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d030      	beq.n	800134e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	4798      	blx	r3
 80012f4:	e02b      	b.n	800134e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d027      	beq.n	800134e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	4798      	blx	r3
 8001306:	e022      	b.n	800134e <HAL_DMA_IRQHandler+0x29e>
 8001308:	20000008 	.word	0x20000008
 800130c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10f      	bne.n	800133e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0210 	bic.w	r2, r2, #16
 800132c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001352:	2b00      	cmp	r3, #0
 8001354:	d032      	beq.n	80013bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d022      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2205      	movs	r2, #5
 8001366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0201 	bic.w	r2, r2, #1
 8001378:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3301      	adds	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	429a      	cmp	r2, r3
 8001384:	d307      	bcc.n	8001396 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f2      	bne.n	800137a <HAL_DMA_IRQHandler+0x2ca>
 8001394:	e000      	b.n	8001398 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001396:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	4798      	blx	r3
 80013b8:	e000      	b.n	80013bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80013ba:	bf00      	nop
    }
  }
}
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop

080013c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b40      	cmp	r3, #64	; 0x40
 80013f0:	d108      	bne.n	8001404 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001402:	e007      	b.n	8001414 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3b10      	subs	r3, #16
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <DMA_CalcBaseAndBitshift+0x64>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <DMA_CalcBaseAndBitshift+0x68>)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d909      	bls.n	8001462 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001456:	f023 0303 	bic.w	r3, r3, #3
 800145a:	1d1a      	adds	r2, r3, #4
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	659a      	str	r2, [r3, #88]	; 0x58
 8001460:	e007      	b.n	8001472 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800146a:	f023 0303 	bic.w	r3, r3, #3
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	aaaaaaab 	.word	0xaaaaaaab
 8001488:	080037a4 	.word	0x080037a4

0800148c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d11f      	bne.n	80014e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d855      	bhi.n	8001558 <DMA_CheckFifoParam+0xcc>
 80014ac:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <DMA_CheckFifoParam+0x28>)
 80014ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b2:	bf00      	nop
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	080014d7 	.word	0x080014d7
 80014bc:	080014c5 	.word	0x080014c5
 80014c0:	08001559 	.word	0x08001559
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d045      	beq.n	800155c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014d4:	e042      	b.n	800155c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014de:	d13f      	bne.n	8001560 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014e4:	e03c      	b.n	8001560 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ee:	d121      	bne.n	8001534 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d836      	bhi.n	8001564 <DMA_CheckFifoParam+0xd8>
 80014f6:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <DMA_CheckFifoParam+0x70>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	0800150d 	.word	0x0800150d
 8001500:	08001513 	.word	0x08001513
 8001504:	0800150d 	.word	0x0800150d
 8001508:	08001525 	.word	0x08001525
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
      break;
 8001510:	e02f      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d024      	beq.n	8001568 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001522:	e021      	b.n	8001568 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800152c:	d11e      	bne.n	800156c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001532:	e01b      	b.n	800156c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d902      	bls.n	8001540 <DMA_CheckFifoParam+0xb4>
 800153a:	2b03      	cmp	r3, #3
 800153c:	d003      	beq.n	8001546 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800153e:	e018      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
      break;
 8001544:	e015      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00e      	beq.n	8001570 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
      break;
 8001556:	e00b      	b.n	8001570 <DMA_CheckFifoParam+0xe4>
      break;
 8001558:	bf00      	nop
 800155a:	e00a      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      break;
 800155c:	bf00      	nop
 800155e:	e008      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      break;
 8001560:	bf00      	nop
 8001562:	e006      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      break;
 8001564:	bf00      	nop
 8001566:	e004      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      break;
 8001568:	bf00      	nop
 800156a:	e002      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      break;   
 800156c:	bf00      	nop
 800156e:	e000      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      break;
 8001570:	bf00      	nop
    }
  } 
  
  return status; 
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	e159      	b.n	8001850 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	f040 8148 	bne.w	800184a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x4a>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d123      	bne.n	8001612 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	08da      	lsrs	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3208      	adds	r2, #8
 80015d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	69b9      	ldr	r1, [r7, #24]
 800160e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0203 	and.w	r2, r3, #3
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d00b      	beq.n	8001666 <HAL_GPIO_Init+0xe6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800165a:	2b11      	cmp	r3, #17
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b12      	cmp	r3, #18
 8001664:	d130      	bne.n	80016c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	2203      	movs	r2, #3
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800169c:	2201      	movs	r2, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 0201 	and.w	r2, r3, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80a2 	beq.w	800184a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b56      	ldr	r3, [pc, #344]	; (8001864 <HAL_GPIO_Init+0x2e4>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a55      	ldr	r2, [pc, #340]	; (8001864 <HAL_GPIO_Init+0x2e4>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_GPIO_Init+0x2e4>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001722:	4a51      	ldr	r2, [pc, #324]	; (8001868 <HAL_GPIO_Init+0x2e8>)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a48      	ldr	r2, [pc, #288]	; (800186c <HAL_GPIO_Init+0x2ec>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d019      	beq.n	8001782 <HAL_GPIO_Init+0x202>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a47      	ldr	r2, [pc, #284]	; (8001870 <HAL_GPIO_Init+0x2f0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0x1fe>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a46      	ldr	r2, [pc, #280]	; (8001874 <HAL_GPIO_Init+0x2f4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d00d      	beq.n	800177a <HAL_GPIO_Init+0x1fa>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a45      	ldr	r2, [pc, #276]	; (8001878 <HAL_GPIO_Init+0x2f8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d007      	beq.n	8001776 <HAL_GPIO_Init+0x1f6>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a44      	ldr	r2, [pc, #272]	; (800187c <HAL_GPIO_Init+0x2fc>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_GPIO_Init+0x1f2>
 800176e:	2304      	movs	r3, #4
 8001770:	e008      	b.n	8001784 <HAL_GPIO_Init+0x204>
 8001772:	2307      	movs	r3, #7
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x204>
 8001776:	2303      	movs	r3, #3
 8001778:	e004      	b.n	8001784 <HAL_GPIO_Init+0x204>
 800177a:	2302      	movs	r3, #2
 800177c:	e002      	b.n	8001784 <HAL_GPIO_Init+0x204>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_GPIO_Init+0x204>
 8001782:	2300      	movs	r3, #0
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	f002 0203 	and.w	r2, r2, #3
 800178a:	0092      	lsls	r2, r2, #2
 800178c:	4093      	lsls	r3, r2
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001794:	4934      	ldr	r1, [pc, #208]	; (8001868 <HAL_GPIO_Init+0x2e8>)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <HAL_GPIO_Init+0x300>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017c6:	4a2e      	ldr	r2, [pc, #184]	; (8001880 <HAL_GPIO_Init+0x300>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <HAL_GPIO_Init+0x300>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017f0:	4a23      	ldr	r2, [pc, #140]	; (8001880 <HAL_GPIO_Init+0x300>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_GPIO_Init+0x300>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181a:	4a19      	ldr	r2, [pc, #100]	; (8001880 <HAL_GPIO_Init+0x300>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_GPIO_Init+0x300>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <HAL_GPIO_Init+0x300>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3301      	adds	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b0f      	cmp	r3, #15
 8001854:	f67f aea2 	bls.w	800159c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001858:	bf00      	nop
 800185a:	3724      	adds	r7, #36	; 0x24
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40023800 	.word	0x40023800
 8001868:	40013800 	.word	0x40013800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020400 	.word	0x40020400
 8001874:	40020800 	.word	0x40020800
 8001878:	40020c00 	.word	0x40020c00
 800187c:	40021000 	.word	0x40021000
 8001880:	40013c00 	.word	0x40013c00

08001884 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	887b      	ldrh	r3, [r7, #2]
 8001896:	405a      	eors	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	615a      	str	r2, [r3, #20]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e22d      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d075      	beq.n	80019b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c6:	4ba3      	ldr	r3, [pc, #652]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d00c      	beq.n	80018ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d2:	4ba0      	ldr	r3, [pc, #640]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d112      	bne.n	8001904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018de:	4b9d      	ldr	r3, [pc, #628]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ea:	d10b      	bne.n	8001904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	4b99      	ldr	r3, [pc, #612]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d05b      	beq.n	80019b0 <HAL_RCC_OscConfig+0x108>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d157      	bne.n	80019b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e208      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190c:	d106      	bne.n	800191c <HAL_RCC_OscConfig+0x74>
 800190e:	4b91      	ldr	r3, [pc, #580]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a90      	ldr	r2, [pc, #576]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e01d      	b.n	8001958 <HAL_RCC_OscConfig+0xb0>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x98>
 8001926:	4b8b      	ldr	r3, [pc, #556]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a8a      	ldr	r2, [pc, #552]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a87      	ldr	r2, [pc, #540]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0xb0>
 8001940:	4b84      	ldr	r3, [pc, #528]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a83      	ldr	r2, [pc, #524]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b81      	ldr	r3, [pc, #516]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a80      	ldr	r2, [pc, #512]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff f90e 	bl	8000b80 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff f90a 	bl	8000b80 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e1cd      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b76      	ldr	r3, [pc, #472]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0xc0>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f8fa 	bl	8000b80 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff f8f6 	bl	8000b80 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1b9      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	4b6c      	ldr	r3, [pc, #432]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0xe8>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d063      	beq.n	8001a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019be:	4b65      	ldr	r3, [pc, #404]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00b      	beq.n	80019e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ca:	4b62      	ldr	r3, [pc, #392]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d11c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019d6:	4b5f      	ldr	r3, [pc, #380]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d116      	bne.n	8001a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	4b5c      	ldr	r3, [pc, #368]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_RCC_OscConfig+0x152>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e18d      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b56      	ldr	r3, [pc, #344]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4952      	ldr	r1, [pc, #328]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0e:	e03a      	b.n	8001a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a18:	4b4f      	ldr	r3, [pc, #316]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f8af 	bl	8000b80 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a26:	f7ff f8ab 	bl	8000b80 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e16e      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a44:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4940      	ldr	r1, [pc, #256]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff f88e 	bl	8000b80 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a68:	f7ff f88a 	bl	8000b80 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e14d      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d030      	beq.n	8001af4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d016      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9a:	4b30      	ldr	r3, [pc, #192]	; (8001b5c <HAL_RCC_OscConfig+0x2b4>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff f86e 	bl	8000b80 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff f86a 	bl	8000b80 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e12d      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x200>
 8001ac6:	e015      	b.n	8001af4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_RCC_OscConfig+0x2b4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ace:	f7ff f857 	bl	8000b80 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad6:	f7ff f853 	bl	8000b80 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e116      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a0 	beq.w	8001c42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10f      	bne.n	8001b32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_OscConfig+0x2b8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d121      	bne.n	8001b82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_RCC_OscConfig+0x2b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_RCC_OscConfig+0x2b8>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff f819 	bl	8000b80 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	e011      	b.n	8001b76 <HAL_RCC_OscConfig+0x2ce>
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	42470000 	.word	0x42470000
 8001b5c:	42470e80 	.word	0x42470e80
 8001b60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b64:	f7ff f80c 	bl	8000b80 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e0cf      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCC_OscConfig+0x478>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d106      	bne.n	8001b98 <HAL_RCC_OscConfig+0x2f0>
 8001b8a:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	4a65      	ldr	r2, [pc, #404]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6713      	str	r3, [r2, #112]	; 0x70
 8001b96:	e01c      	b.n	8001bd2 <HAL_RCC_OscConfig+0x32a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d10c      	bne.n	8001bba <HAL_RCC_OscConfig+0x312>
 8001ba0:	4b60      	ldr	r3, [pc, #384]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	4a5f      	ldr	r2, [pc, #380]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bac:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	4a5c      	ldr	r2, [pc, #368]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb8:	e00b      	b.n	8001bd2 <HAL_RCC_OscConfig+0x32a>
 8001bba:	4b5a      	ldr	r3, [pc, #360]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	4a59      	ldr	r2, [pc, #356]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc6:	4b57      	ldr	r3, [pc, #348]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	4a56      	ldr	r2, [pc, #344]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d015      	beq.n	8001c06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bda:	f7fe ffd1 	bl	8000b80 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be2:	f7fe ffcd 	bl	8000b80 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e08e      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0ee      	beq.n	8001be2 <HAL_RCC_OscConfig+0x33a>
 8001c04:	e014      	b.n	8001c30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7fe ffbb 	bl	8000b80 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7fe ffb7 	bl	8000b80 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e078      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c24:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1ee      	bne.n	8001c0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d105      	bne.n	8001c42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a3a      	ldr	r2, [pc, #232]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d064      	beq.n	8001d14 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c4a:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d05c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d141      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b32      	ldr	r3, [pc, #200]	; (8001d28 <HAL_RCC_OscConfig+0x480>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7fe ff8c 	bl	8000b80 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7fe ff88 	bl	8000b80 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e04b      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	019b      	lsls	r3, r3, #6
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	491d      	ldr	r1, [pc, #116]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_RCC_OscConfig+0x480>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7fe ff61 	bl	8000b80 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7fe ff5d 	bl	8000b80 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e020      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x41a>
 8001ce0:	e018      	b.n	8001d14 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_RCC_OscConfig+0x480>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7fe ff4a 	bl	8000b80 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7fe ff46 	bl	8000b80 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e009      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_RCC_OscConfig+0x47c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x448>
 8001d0e:	e001      	b.n	8001d14 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40007000 	.word	0x40007000
 8001d24:	40023800 	.word	0x40023800
 8001d28:	42470060 	.word	0x42470060

08001d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0ca      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d40:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d90c      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b62      	ldr	r3, [pc, #392]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0b6      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d80:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4a57      	ldr	r2, [pc, #348]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d98:	4b52      	ldr	r3, [pc, #328]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4a51      	ldr	r2, [pc, #324]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	494c      	ldr	r1, [pc, #304]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d044      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d119      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e07d      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e06d      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e065      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0a:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f023 0203 	bic.w	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4933      	ldr	r1, [pc, #204]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e1c:	f7fe feb0 	bl	8000b80 <HAL_GetTick>
 8001e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e24:	f7fe feac 	bl	8000b80 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e04d      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 020c 	and.w	r2, r3, #12
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1eb      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d20c      	bcs.n	8001e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e030      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4915      	ldr	r1, [pc, #84]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	490d      	ldr	r1, [pc, #52]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eb2:	f000 f81d 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	5cd3      	ldrb	r3, [r2, r3]
 8001ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f7fe fe12 	bl	8000af8 <HAL_InitTick>

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	080037ac 	.word	0x080037ac
 8001eec:	20000008 	.word	0x20000008

08001ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f06:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d007      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0x32>
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d008      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x38>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 80b4 	bne.w	8002084 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b5e      	ldr	r3, [pc, #376]	; (8002098 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f1e:	60bb      	str	r3, [r7, #8]
       break;
 8001f20:	e0b3      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f22:	4b5e      	ldr	r3, [pc, #376]	; (800209c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f24:	60bb      	str	r3, [r7, #8]
      break;
 8001f26:	e0b0      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f28:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f32:	4b58      	ldr	r3, [pc, #352]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d04a      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3e:	4b55      	ldr	r3, [pc, #340]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	f04f 0400 	mov.w	r4, #0
 8001f48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	ea03 0501 	and.w	r5, r3, r1
 8001f54:	ea04 0602 	and.w	r6, r4, r2
 8001f58:	4629      	mov	r1, r5
 8001f5a:	4632      	mov	r2, r6
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	f04f 0400 	mov.w	r4, #0
 8001f64:	0154      	lsls	r4, r2, #5
 8001f66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f6a:	014b      	lsls	r3, r1, #5
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4622      	mov	r2, r4
 8001f70:	1b49      	subs	r1, r1, r5
 8001f72:	eb62 0206 	sbc.w	r2, r2, r6
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	f04f 0400 	mov.w	r4, #0
 8001f7e:	0194      	lsls	r4, r2, #6
 8001f80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f84:	018b      	lsls	r3, r1, #6
 8001f86:	1a5b      	subs	r3, r3, r1
 8001f88:	eb64 0402 	sbc.w	r4, r4, r2
 8001f8c:	f04f 0100 	mov.w	r1, #0
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	00e2      	lsls	r2, r4, #3
 8001f96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f9a:	00d9      	lsls	r1, r3, #3
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4614      	mov	r4, r2
 8001fa0:	195b      	adds	r3, r3, r5
 8001fa2:	eb44 0406 	adc.w	r4, r4, r6
 8001fa6:	f04f 0100 	mov.w	r1, #0
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	0262      	lsls	r2, r4, #9
 8001fb0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fb4:	0259      	lsls	r1, r3, #9
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4614      	mov	r4, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f04f 0400 	mov.w	r4, #0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	f7fe f904 	bl	80001d4 <__aeabi_uldivmod>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	460c      	mov	r4, r1
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	e049      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	f04f 0400 	mov.w	r4, #0
 8001fde:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	ea03 0501 	and.w	r5, r3, r1
 8001fea:	ea04 0602 	and.w	r6, r4, r2
 8001fee:	4629      	mov	r1, r5
 8001ff0:	4632      	mov	r2, r6
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	f04f 0400 	mov.w	r4, #0
 8001ffa:	0154      	lsls	r4, r2, #5
 8001ffc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002000:	014b      	lsls	r3, r1, #5
 8002002:	4619      	mov	r1, r3
 8002004:	4622      	mov	r2, r4
 8002006:	1b49      	subs	r1, r1, r5
 8002008:	eb62 0206 	sbc.w	r2, r2, r6
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	f04f 0400 	mov.w	r4, #0
 8002014:	0194      	lsls	r4, r2, #6
 8002016:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800201a:	018b      	lsls	r3, r1, #6
 800201c:	1a5b      	subs	r3, r3, r1
 800201e:	eb64 0402 	sbc.w	r4, r4, r2
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	00e2      	lsls	r2, r4, #3
 800202c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002030:	00d9      	lsls	r1, r3, #3
 8002032:	460b      	mov	r3, r1
 8002034:	4614      	mov	r4, r2
 8002036:	195b      	adds	r3, r3, r5
 8002038:	eb44 0406 	adc.w	r4, r4, r6
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	02a2      	lsls	r2, r4, #10
 8002046:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800204a:	0299      	lsls	r1, r3, #10
 800204c:	460b      	mov	r3, r1
 800204e:	4614      	mov	r4, r2
 8002050:	4618      	mov	r0, r3
 8002052:	4621      	mov	r1, r4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f04f 0400 	mov.w	r4, #0
 800205a:	461a      	mov	r2, r3
 800205c:	4623      	mov	r3, r4
 800205e:	f7fe f8b9 	bl	80001d4 <__aeabi_uldivmod>
 8002062:	4603      	mov	r3, r0
 8002064:	460c      	mov	r4, r1
 8002066:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	3301      	adds	r3, #1
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	60bb      	str	r3, [r7, #8]
      break;
 8002082:	e002      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002086:	60bb      	str	r3, [r7, #8]
      break;
 8002088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208a:	68bb      	ldr	r3, [r7, #8]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	00f42400 	.word	0x00f42400
 800209c:	007a1200 	.word	0x007a1200

080020a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4601      	mov	r1, r0
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0a9b      	lsrs	r3, r3, #10
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	080037bc 	.word	0x080037bc

080020e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e4:	f7ff ffdc 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020e8:	4601      	mov	r1, r0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	0b5b      	lsrs	r3, r3, #13
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4a03      	ldr	r2, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	080037bc 	.word	0x080037bc

08002108 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800210e:	f7fe fd37 	bl	8000b80 <HAL_GetTick>
 8002112:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002114:	4b5c      	ldr	r3, [pc, #368]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a5b      	ldr	r2, [pc, #364]	; (8002288 <HAL_RCC_DeInit+0x180>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002122:	f7fe fd2d 	bl	8000b80 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e0a5      	b.n	8002280 <HAL_RCC_DeInit+0x178>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002134:	4b54      	ldr	r3, [pc, #336]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002140:	4b51      	ldr	r3, [pc, #324]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a50      	ldr	r2, [pc, #320]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800214c:	f7fe fd18 	bl	8000b80 <HAL_GetTick>
 8002150:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002152:	4b4d      	ldr	r3, [pc, #308]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215a:	f7fe fd11 	bl	8000b80 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e087      	b.n	8002280 <HAL_RCC_DeInit+0x178>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002170:	4b45      	ldr	r3, [pc, #276]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ee      	bne.n	800215a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800217c:	f7fe fd00 	bl	8000b80 <HAL_GetTick>
 8002180:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002182:	4b41      	ldr	r3, [pc, #260]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a40      	ldr	r2, [pc, #256]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002188:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800218c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7fe fcf6 	bl	8000b80 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e06e      	b.n	8002280 <HAL_RCC_DeInit+0x178>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80021a2:	4b39      	ldr	r3, [pc, #228]	; (8002288 <HAL_RCC_DeInit+0x180>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80021ae:	f7fe fce7 	bl	8000b80 <HAL_GetTick>
 80021b2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80021b4:	4b34      	ldr	r3, [pc, #208]	; (8002288 <HAL_RCC_DeInit+0x180>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a33      	ldr	r2, [pc, #204]	; (8002288 <HAL_RCC_DeInit+0x180>)
 80021ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021be:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c2:	f7fe fcdd 	bl	8000b80 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e055      	b.n	8002280 <HAL_RCC_DeInit+0x178>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80021d4:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <HAL_RCC_DeInit+0x180>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80021e0:	f7fe fcce 	bl	8000b80 <HAL_GetTick>
 80021e4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80021e6:	4b28      	ldr	r3, [pc, #160]	; (8002288 <HAL_RCC_DeInit+0x180>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a27      	ldr	r2, [pc, #156]	; (8002288 <HAL_RCC_DeInit+0x180>)
 80021ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021f0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021f4:	f7fe fcc4 	bl	8000b80 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e03c      	b.n	8002280 <HAL_RCC_DeInit+0x178>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002214:	4a1d      	ldr	r2, [pc, #116]	; (800228c <HAL_RCC_DeInit+0x184>)
 8002216:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_RCC_DeInit+0x180>)
 800221a:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <HAL_RCC_DeInit+0x188>)
 800221c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a18      	ldr	r2, [pc, #96]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002226:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800222a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_RCC_DeInit+0x180>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a15      	ldr	r2, [pc, #84]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002236:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_RCC_DeInit+0x180>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a12      	ldr	r2, [pc, #72]	; (8002288 <HAL_RCC_DeInit+0x180>)
 800223e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002242:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <HAL_RCC_DeInit+0x180>)
 800224a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800224e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002250:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_RCC_DeInit+0x180>)
 800225e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002260:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_RCC_DeInit+0x180>)
 8002262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002266:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_RCC_DeInit+0x18c>)
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_RCC_DeInit+0x190>)
 800226c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800226e:	200f      	movs	r0, #15
 8002270:	f7fe fc42 	bl	8000af8 <HAL_InitTick>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_RCC_DeInit+0x176>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_RCC_DeInit+0x178>
  }
  else
  {
    return HAL_OK;
 800227e:	2300      	movs	r3, #0
  }
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	04003010 	.word	0x04003010
 8002290:	20003000 	.word	0x20003000
 8002294:	20000008 	.word	0x20000008
 8002298:	00f42400 	.word	0x00f42400

0800229c <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e03f      	b.n	800232e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f001 f88e 	bl	80033e4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	; 0x24
 80022cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022de:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fba1 	bl	8002a28 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002304:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002314:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	d153      	bne.n	80023fa <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_UART_Transmit_DMA+0x26>
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e04c      	b.n	80023fc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_UART_Transmit_DMA+0x38>
 800236c:	2302      	movs	r3, #2
 800236e:	e045      	b.n	80023fc <HAL_UART_Transmit_DMA+0xc4>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	88fa      	ldrh	r2, [r7, #6]
 8002382:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	88fa      	ldrh	r2, [r7, #6]
 8002388:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2221      	movs	r2, #33	; 0x21
 8002394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	4a19      	ldr	r2, [pc, #100]	; (8002404 <HAL_UART_Transmit_DMA+0xcc>)
 800239e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = /*UART_DMATxHalfCplt*/NULL;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	2200      	movs	r2, #0
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	4a16      	ldr	r2, [pc, #88]	; (8002408 <HAL_UART_Transmit_DMA+0xd0>)
 80023ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	2200      	movs	r2, #0
 80023b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 80023b8:	f107 0308 	add.w	r3, r7, #8
 80023bc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3304      	adds	r3, #4
 80023cc:	461a      	mov	r2, r3
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	f7fe fd7c 	bl	8000ecc <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023dc:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023f4:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	080026e5 	.word	0x080026e5
 8002408:	08002737 	.word	0x08002737

0800240c <HAL_UART_DMAStop>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */
  
  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf14      	ite	ne
 8002426:	2301      	movne	r3, #1
 8002428:	2300      	moveq	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b21      	cmp	r3, #33	; 0x21
 8002438:	d116      	bne.n	8002468 <HAL_UART_DMAStop+0x5c>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800244e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if(huart->hdmatx != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe fd95 	bl	8000f8c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f9b1 	bl	80027ca <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	bf14      	ite	ne
 8002476:	2301      	movne	r3, #1
 8002478:	2300      	moveq	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b22      	cmp	r3, #34	; 0x22
 8002488:	d116      	bne.n	80024b8 <HAL_UART_DMAStop+0xac>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800249e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if(huart->hdmarx != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe fd6d 	bl	8000f8c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f99f 	bl	80027f6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_UART_IRQHandler+0x52>
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa11 	bl	8002936 <UART_Receive_IT>
      return;
 8002514:	e0cc      	b.n	80026b0 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80ab 	beq.w	8002674 <HAL_UART_IRQHandler+0x1b0>
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <HAL_UART_IRQHandler+0x70>
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80a0 	beq.w	8002674 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_UART_IRQHandler+0x90>
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_UART_IRQHandler+0xb0>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	f043 0202 	orr.w	r2, r3, #2
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_UART_IRQHandler+0xd0>
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258c:	f043 0204 	orr.w	r2, r3, #4
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_UART_IRQHandler+0xf0>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	f043 0208 	orr.w	r2, r3, #8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d078      	beq.n	80026ae <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <HAL_UART_IRQHandler+0x112>
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f9b0 	bl	8002936 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <HAL_UART_IRQHandler+0x13a>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d031      	beq.n	8002662 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f8f9 	bl	80027f6 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d023      	beq.n	800265a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002620:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	2b00      	cmp	r3, #0
 8002628:	d013      	beq.n	8002652 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262e:	4a22      	ldr	r2, [pc, #136]	; (80026b8 <HAL_UART_IRQHandler+0x1f4>)
 8002630:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fd18 	bl	800106c <HAL_DMA_Abort_IT>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800264c:	4610      	mov	r0, r2
 800264e:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e00e      	b.n	8002670 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f83c 	bl	80026d0 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	e00a      	b.n	8002670 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f838 	bl	80026d0 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	e006      	b.n	8002670 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f834 	bl	80026d0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800266e:	e01e      	b.n	80026ae <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002670:	bf00      	nop
    return;
 8002672:	e01c      	b.n	80026ae <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_UART_IRQHandler+0x1cc>
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f8e6 	bl	800285a <UART_Transmit_IT>
    return;
 800268e:	e00f      	b.n	80026b0 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_UART_IRQHandler+0x1ec>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f92e 	bl	8002906 <UART_EndTransmit_IT>
    return;
 80026aa:	bf00      	nop
 80026ac:	e000      	b.n	80026b0 <HAL_UART_IRQHandler+0x1ec>
    return;
 80026ae:	bf00      	nop
  }
}
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	08002833 	.word	0x08002833

080026bc <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d113      	bne.n	8002728 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002714:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002724:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 8002726:	e002      	b.n	800272e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fea3 	bl	8003474 <HAL_UART_TxCpltCallback>
}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b00      	cmp	r3, #0
 8002754:	bf14      	ite	ne
 8002756:	2301      	movne	r3, #1
 8002758:	2300      	moveq	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b21      	cmp	r3, #33	; 0x21
 8002768:	d108      	bne.n	800277c <UART_DMAError+0x46>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002776:	68b8      	ldr	r0, [r7, #8]
 8002778:	f000 f827 	bl	80027ca <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf14      	ite	ne
 800278a:	2301      	movne	r3, #1
 800278c:	2300      	moveq	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b22      	cmp	r3, #34	; 0x22
 800279c:	d108      	bne.n	80027b0 <UART_DMAError+0x7a>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2200      	movs	r2, #0
 80027a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80027aa:	68b8      	ldr	r0, [r7, #8]
 80027ac:	f000 f823 	bl	80027f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b4:	f043 0210 	orr.w	r2, r3, #16
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80027bc:	68b8      	ldr	r0, [r7, #8]
 80027be:	f7ff ff87 	bl	80026d0 <HAL_UART_ErrorCallback>
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80027e0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2220      	movs	r2, #32
 80027e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800280c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f7ff ff3f 	bl	80026d0 <HAL_UART_ErrorCallback>
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b21      	cmp	r3, #33	; 0x21
 800286c:	d144      	bne.n	80028f8 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002876:	d11a      	bne.n	80028ae <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800288c:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d105      	bne.n	80028a2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	1c9a      	adds	r2, r3, #2
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	621a      	str	r2, [r3, #32]
 80028a0:	e00e      	b.n	80028c0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	621a      	str	r2, [r3, #32]
 80028ac:	e008      	b.n	80028c0 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6211      	str	r1, [r2, #32]
 80028b8:	781a      	ldrb	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4619      	mov	r1, r3
 80028ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10f      	bne.n	80028f4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800291c:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fda4 	bl	8003474 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b22      	cmp	r3, #34	; 0x22
 8002948:	d169      	bne.n	8002a1e <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002952:	d123      	bne.n	800299c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10e      	bne.n	8002980 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	b29b      	uxth	r3, r3
 800296a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	1c9a      	adds	r2, r3, #2
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	629a      	str	r2, [r3, #40]	; 0x28
 800297e:	e029      	b.n	80029d4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	b29b      	uxth	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	629a      	str	r2, [r3, #40]	; 0x28
 800299a:	e01b      	b.n	80029d4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10a      	bne.n	80029ba <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6858      	ldr	r0, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	1c59      	adds	r1, r3, #1
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6291      	str	r1, [r2, #40]	; 0x28
 80029b4:	b2c2      	uxtb	r2, r0
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e00c      	b.n	80029d4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	1c58      	adds	r0, r3, #1
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	6288      	str	r0, [r1, #40]	; 0x28
 80029cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29b      	uxth	r3, r3
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4619      	mov	r1, r3
 80029e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d118      	bne.n	8002a1a <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fe53 	bl	80026bc <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e002      	b.n	8002a20 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e000      	b.n	8002a20 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a28:	b5b0      	push	{r4, r5, r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a64:	f023 030c 	bic.w	r3, r3, #12
 8002a68:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9c:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab8:	f040 80e4 	bne.w	8002c84 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4aab      	ldr	r2, [pc, #684]	; (8002d70 <UART_SetConfig+0x348>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d004      	beq.n	8002ad0 <UART_SetConfig+0xa8>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4aaa      	ldr	r2, [pc, #680]	; (8002d74 <UART_SetConfig+0x34c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d16c      	bne.n	8002baa <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ad0:	f7ff fb06 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009a      	lsls	r2, r3, #2
 8002ade:	441a      	add	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	4aa3      	ldr	r2, [pc, #652]	; (8002d78 <UART_SetConfig+0x350>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	011c      	lsls	r4, r3, #4
 8002af4:	f7ff faf4 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	009a      	lsls	r2, r3, #2
 8002b02:	441a      	add	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b0e:	f7ff fae7 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	009a      	lsls	r2, r3, #2
 8002b1c:	441a      	add	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	4a93      	ldr	r2, [pc, #588]	; (8002d78 <UART_SetConfig+0x350>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2264      	movs	r2, #100	; 0x64
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	1aeb      	subs	r3, r5, r3
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	3332      	adds	r3, #50	; 0x32
 8002b3c:	4a8e      	ldr	r2, [pc, #568]	; (8002d78 <UART_SetConfig+0x350>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b4a:	441c      	add	r4, r3
 8002b4c:	f7ff fac8 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	009a      	lsls	r2, r3, #2
 8002b5a:	441a      	add	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b66:	f7ff fabb 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	009a      	lsls	r2, r3, #2
 8002b74:	441a      	add	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	4a7d      	ldr	r2, [pc, #500]	; (8002d78 <UART_SetConfig+0x350>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2264      	movs	r2, #100	; 0x64
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	1aeb      	subs	r3, r5, r3
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	3332      	adds	r3, #50	; 0x32
 8002b94:	4a78      	ldr	r2, [pc, #480]	; (8002d78 <UART_SetConfig+0x350>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	f003 0207 	and.w	r2, r3, #7
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4422      	add	r2, r4
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	e154      	b.n	8002e54 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002baa:	f7ff fa85 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009a      	lsls	r2, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	4a6c      	ldr	r2, [pc, #432]	; (8002d78 <UART_SetConfig+0x350>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	011c      	lsls	r4, r3, #4
 8002bce:	f7ff fa73 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	009a      	lsls	r2, r3, #2
 8002bdc:	441a      	add	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	fbb2 f5f3 	udiv	r5, r2, r3
 8002be8:	f7ff fa66 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009a      	lsls	r2, r3, #2
 8002bf6:	441a      	add	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c02:	4a5d      	ldr	r2, [pc, #372]	; (8002d78 <UART_SetConfig+0x350>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	2264      	movs	r2, #100	; 0x64
 8002c0c:	fb02 f303 	mul.w	r3, r2, r3
 8002c10:	1aeb      	subs	r3, r5, r3
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	3332      	adds	r3, #50	; 0x32
 8002c16:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <UART_SetConfig+0x350>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c24:	441c      	add	r4, r3
 8002c26:	f7ff fa47 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	009a      	lsls	r2, r3, #2
 8002c34:	441a      	add	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c40:	f7ff fa3a 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009a      	lsls	r2, r3, #2
 8002c4e:	441a      	add	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5a:	4a47      	ldr	r2, [pc, #284]	; (8002d78 <UART_SetConfig+0x350>)
 8002c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	2264      	movs	r2, #100	; 0x64
 8002c64:	fb02 f303 	mul.w	r3, r2, r3
 8002c68:	1aeb      	subs	r3, r5, r3
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	3332      	adds	r3, #50	; 0x32
 8002c6e:	4a42      	ldr	r2, [pc, #264]	; (8002d78 <UART_SetConfig+0x350>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	f003 0207 	and.w	r2, r3, #7
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4422      	add	r2, r4
 8002c80:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002c82:	e0e7      	b.n	8002e54 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a39      	ldr	r2, [pc, #228]	; (8002d70 <UART_SetConfig+0x348>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <UART_SetConfig+0x270>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a38      	ldr	r2, [pc, #224]	; (8002d74 <UART_SetConfig+0x34c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d171      	bne.n	8002d7c <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c98:	f7ff fa22 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009a      	lsls	r2, r3, #2
 8002ca6:	441a      	add	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	4a31      	ldr	r2, [pc, #196]	; (8002d78 <UART_SetConfig+0x350>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	011c      	lsls	r4, r3, #4
 8002cbc:	f7ff fa10 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009a      	lsls	r2, r3, #2
 8002cca:	441a      	add	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	fbb2 f5f3 	udiv	r5, r2, r3
 8002cd6:	f7ff fa03 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009a      	lsls	r2, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	4a21      	ldr	r2, [pc, #132]	; (8002d78 <UART_SetConfig+0x350>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2264      	movs	r2, #100	; 0x64
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	1aeb      	subs	r3, r5, r3
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	3332      	adds	r3, #50	; 0x32
 8002d04:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <UART_SetConfig+0x350>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d10:	441c      	add	r4, r3
 8002d12:	f7ff f9e5 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002d16:	4602      	mov	r2, r0
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009a      	lsls	r2, r3, #2
 8002d20:	441a      	add	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d2c:	f7ff f9d8 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	009a      	lsls	r2, r3, #2
 8002d3a:	441a      	add	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <UART_SetConfig+0x350>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	2264      	movs	r2, #100	; 0x64
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	1aeb      	subs	r3, r5, r3
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	3332      	adds	r3, #50	; 0x32
 8002d5a:	4a07      	ldr	r2, [pc, #28]	; (8002d78 <UART_SetConfig+0x350>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	f003 020f 	and.w	r2, r3, #15
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4422      	add	r2, r4
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	e071      	b.n	8002e54 <UART_SetConfig+0x42c>
 8002d70:	40011000 	.word	0x40011000
 8002d74:	40011400 	.word	0x40011400
 8002d78:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d7c:	f7ff f99c 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	009a      	lsls	r2, r3, #2
 8002d8a:	441a      	add	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	4a31      	ldr	r2, [pc, #196]	; (8002e5c <UART_SetConfig+0x434>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	011c      	lsls	r4, r3, #4
 8002da0:	f7ff f98a 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	009a      	lsls	r2, r3, #2
 8002dae:	441a      	add	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	fbb2 f5f3 	udiv	r5, r2, r3
 8002dba:	f7ff f97d 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009a      	lsls	r2, r3, #2
 8002dc8:	441a      	add	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <UART_SetConfig+0x434>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2264      	movs	r2, #100	; 0x64
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	1aeb      	subs	r3, r5, r3
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	3332      	adds	r3, #50	; 0x32
 8002de8:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <UART_SetConfig+0x434>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df4:	441c      	add	r4, r3
 8002df6:	f7ff f95f 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	009a      	lsls	r2, r3, #2
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e10:	f7ff f952 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009a      	lsls	r2, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <UART_SetConfig+0x434>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	2264      	movs	r2, #100	; 0x64
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	1aeb      	subs	r3, r5, r3
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	3332      	adds	r3, #50	; 0x32
 8002e3e:	4a07      	ldr	r2, [pc, #28]	; (8002e5c <UART_SetConfig+0x434>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	f003 020f 	and.w	r2, r3, #15
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4422      	add	r2, r4
 8002e50:	609a      	str	r2, [r3, #8]
}
 8002e52:	e7ff      	b.n	8002e54 <UART_SetConfig+0x42c>
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e5c:	51eb851f 	.word	0x51eb851f

08002e60 <ADC_INIT>:
#endif
static void GPIO_INIT(void);


void ADC_INIT(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0

	/*Set prescaler
	 * Fosc 84 MHz
	 * Presaler DIV4
	 * ADCclk 21 MHz*/
	 GPIO_INIT();
 8002e66:	f000 f8c7 	bl	8002ff8 <GPIO_INIT>

	  /* ADC1 clock enable */
	__HAL_RCC_ADC1_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <ADC_INIT+0xf0>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	4a37      	ldr	r2, [pc, #220]	; (8002f50 <ADC_INIT+0xf0>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	6453      	str	r3, [r2, #68]	; 0x44
 8002e7a:	4b35      	ldr	r3, [pc, #212]	; (8002f50 <ADC_INIT+0xf0>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]

	ADC1_COMMON->CCR |= ADC_CCR_ADCPRE_0;
 8002e86:	4b33      	ldr	r3, [pc, #204]	; (8002f54 <ADC_INIT+0xf4>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4a32      	ldr	r2, [pc, #200]	; (8002f54 <ADC_INIT+0xf4>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6053      	str	r3, [r2, #4]

#if CFG_ADC_REG_CONV
	/*Enable DMA transfer */
	ADC1->CR2 |= ADC_CR2_DMA | ADC_CR2_DDS ;
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <ADC_INIT+0xf8>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	4a30      	ldr	r2, [pc, #192]	; (8002f58 <ADC_INIT+0xf8>)
 8002e98:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002e9c:	6093      	str	r3, [r2, #8]
	/*Select external trigger as TRGO from TIM*/
	ADC1->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;
 8002e9e:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <ADC_INIT+0xf8>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4a2d      	ldr	r2, [pc, #180]	; (8002f58 <ADC_INIT+0xf8>)
 8002ea4:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8002ea8:	6093      	str	r3, [r2, #8]
	/*Enable external Trigger on rising edge*/
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <ADC_INIT+0xf8>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4a2a      	ldr	r2, [pc, #168]	; (8002f58 <ADC_INIT+0xf8>)
 8002eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	6093      	str	r3, [r2, #8]
#else
	ADC1->CR2 |= ADC_CR2_JEXTSEL_0 | ADC_CR2_JEXTEN_0;
#endif

	ADC1->CR1   |= ADC_CR1_SCAN	;
 8002eb6:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <ADC_INIT+0xf8>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4a27      	ldr	r2, [pc, #156]	; (8002f58 <ADC_INIT+0xf8>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	6053      	str	r3, [r2, #4]

#if CFG_ADC_REG_CONV
	ADC1->SQR1  |= ADC_SQR1(ADC_NR_CONV);
 8002ec2:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <ADC_INIT+0xf8>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <ADC_INIT+0xf8>)
 8002ec8:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8002ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

	ADC1->SQR2  |= ADC_SQR2_RK(ADC_CHANNEL_V_DcLink,7);
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <ADC_INIT+0xf8>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a21      	ldr	r2, [pc, #132]	; (8002f58 <ADC_INIT+0xf8>)
 8002ed4:	f043 030c 	orr.w	r3, r3, #12
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->SQR3  |= ADC_SQR3_RK(ADC_CHANNEL_Vc,      6) |
 8002eda:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <ADC_INIT+0xf8>)
 8002edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ede:	491e      	ldr	r1, [pc, #120]	; (8002f58 <ADC_INIT+0xf8>)
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <ADC_INIT+0xfc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	634b      	str	r3, [r1, #52]	; 0x34
				   ADC_SQR3_RK(ADC_CHANNEL_Ic,      3) |
				   ADC_SQR3_RK(ADC_CHANNEL_Ib,      2) |
				   ADC_SQR3_RK(ADC_CHANNEL_Ia,      1);


	ADC1->SMPR1  |= ADC_SMPR1(ADC_3_cycles, ADC_CHANNEL_V_DcLink) |
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <ADC_INIT+0xf8>)
 8002ee8:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <ADC_INIT+0xf8>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	60d3      	str	r3, [r2, #12]
					ADC_SQR3_RK(ADC_CHANNEL_V_DcLink,4) ;
#endif



	ADC1->SMPR2  |= ADC_SMPR2(ADC_3_cycles, ADC_CHANNEL_Ia)  |
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <ADC_INIT+0xf8>)
 8002ef0:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <ADC_INIT+0xf8>)
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	6113      	str	r3, [r2, #16]
				    ADC_SMPR2(ADC_3_cycles, ADC_CHANNEL_Ib)  |
				    ADC_SMPR2(ADC_3_cycles, ADC_CHANNEL_Ic)  |
#if CFG_ADC_REG_CONV
					ADC_SMPR2(ADC_3_cycles, ADC_CHANNEL_Va) ;

	DMA_INIT();
 8002ef6:	f000 f837 	bl	8002f68 <DMA_INIT>
#if !CFG_ADC_REG_CONV
	HAL_NVIC_SetPriority(ADC_IRQn, 0, 1);
	HAL_NVIC_EnableIRQ(ADC_IRQn);
    ADC1->CR1 |= ADC_CR1_JEOCIE;
#else
	HAL_NVIC_SetPriority(ADC_IRQn, 0, 1);
 8002efa:	2201      	movs	r2, #1
 8002efc:	2100      	movs	r1, #0
 8002efe:	2012      	movs	r0, #18
 8002f00:	f7fd fef2 	bl	8000ce8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002f04:	2012      	movs	r0, #18
 8002f06:	f7fd ff0b 	bl	8000d20 <HAL_NVIC_EnableIRQ>
    ADC1->CR1 |= ADC_CR1_EOCIE;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <ADC_INIT+0xf8>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <ADC_INIT+0xf8>)
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	6053      	str	r3, [r2, #4]
#endif

	/*Enable ADC*/
	ADC1->CR2 |= ADC_CR2_ADON;
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <ADC_INIT+0xf8>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <ADC_INIT+0xf8>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6093      	str	r3, [r2, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f22:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <ADC_INIT+0x100>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a0f      	ldr	r2, [pc, #60]	; (8002f64 <ADC_INIT+0x104>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	0c9b      	lsrs	r3, r3, #18
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	0052      	lsls	r2, r2, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	71fb      	strb	r3, [r7, #7]
    while(counter != 0U)
 8002f38:	e002      	b.n	8002f40 <ADC_INIT+0xe0>
    {
      counter--;
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	71fb      	strb	r3, [r7, #7]
    while(counter != 0U)
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f9      	bne.n	8002f3a <ADC_INIT+0xda>
    }
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40012300 	.word	0x40012300
 8002f58:	40012000 	.word	0x40012000
 8002f5c:	16a31020 	.word	0x16a31020
 8002f60:	20000008 	.word	0x20000008
 8002f64:	431bde83 	.word	0x431bde83

08002f68 <DMA_INIT>:
#if CFG_ADC_REG_CONV
static void DMA_INIT(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
	/*Configure DMA controller*/
    __HAL_RCC_DMA2_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <DMA_INIT+0x80>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <DMA_INIT+0x80>)
 8002f78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <DMA_INIT+0x80>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
	/*If the stream is enabled, disable it*/
	DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <DMA_INIT+0x84>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a17      	ldr	r2, [pc, #92]	; (8002fec <DMA_INIT+0x84>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6013      	str	r3, [r2, #0]
	while((DMA2_Stream0->CR & 0x01));
 8002f96:	bf00      	nop
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <DMA_INIT+0x84>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f9      	bne.n	8002f98 <DMA_INIT+0x30>

	DMA2_Stream0->PAR   = (uint32_t)&ADC1->DR;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <DMA_INIT+0x84>)
 8002fa6:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <DMA_INIT+0x88>)
 8002fa8:	609a      	str	r2, [r3, #8]
	DMA2_Stream0->M0AR  = (uint32_t)&ADC_TO_DMA_BUFFER[0];
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <DMA_INIT+0x84>)
 8002fac:	4a11      	ldr	r2, [pc, #68]	; (8002ff4 <DMA_INIT+0x8c>)
 8002fae:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->NDTR  = DMA_NDTR;
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <DMA_INIT+0x84>)
 8002fb2:	2207      	movs	r2, #7
 8002fb4:	605a      	str	r2, [r3, #4]

	DMA2_Stream0->CR   |= DMA_SxCR_PL_0 | DMA_SxCR_PL_1 ;
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <DMA_INIT+0x84>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a0c      	ldr	r2, [pc, #48]	; (8002fec <DMA_INIT+0x84>)
 8002fbc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002fc0:	6013      	str	r3, [r2, #0]

	DMA2_Stream0->CR   |= DMA_SxCR_CIRC |
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <DMA_INIT+0x84>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <DMA_INIT+0x84>)
 8002fc8:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8002fcc:	6013      	str	r3, [r2, #0]
						  DMA_SxCR_MINC |
						  DMA_SxCR_PSIZE_0 |
						  DMA_SxCR_MSIZE_0;


	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8002fce:	4b07      	ldr	r3, [pc, #28]	; (8002fec <DMA_INIT+0x84>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a06      	ldr	r2, [pc, #24]	; (8002fec <DMA_INIT+0x84>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6013      	str	r3, [r2, #0]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40026410 	.word	0x40026410
 8002ff0:	4001204c 	.word	0x4001204c
 8002ff4:	20004168 	.word	0x20004168

08002ff8 <GPIO_INIT>:
#endif

static void GPIO_INIT(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */

	__GPIOA_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <GPIO_INIT+0x78>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a1a      	ldr	r2, [pc, #104]	; (8003070 <GPIO_INIT+0x78>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <GPIO_INIT+0x78>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin  = Ia_Pin |Ib_Pin| Ic_Pin| Va_Pin;
 800301a:	2353      	movs	r3, #83	; 0x53
 800301c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800301e:	2303      	movs	r3, #3
 8003020:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ADC_PORT_A, &GPIO_InitStruct);
 8003026:	f107 030c 	add.w	r3, r7, #12
 800302a:	4619      	mov	r1, r3
 800302c:	4811      	ldr	r0, [pc, #68]	; (8003074 <GPIO_INIT+0x7c>)
 800302e:	f7fe faa7 	bl	8001580 <HAL_GPIO_Init>

	__GPIOC_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <GPIO_INIT+0x78>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a0d      	ldr	r2, [pc, #52]	; (8003070 <GPIO_INIT+0x78>)
 800303c:	f043 0304 	orr.w	r3, r3, #4
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <GPIO_INIT+0x78>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin  = Vb_Pin|Vc_Pin|V_DcLink_Pin;
 800304e:	2307      	movs	r3, #7
 8003050:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003052:	2303      	movs	r3, #3
 8003054:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ADC_PORT_C, &GPIO_InitStruct);
 800305a:	f107 030c 	add.w	r3, r7, #12
 800305e:	4619      	mov	r1, r3
 8003060:	4805      	ldr	r0, [pc, #20]	; (8003078 <GPIO_INIT+0x80>)
 8003062:	f7fe fa8d 	bl	8001580 <HAL_GPIO_Init>
}
 8003066:	bf00      	nop
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40020000 	.word	0x40020000
 8003078:	40020800 	.word	0x40020800

0800307c <LLD_ADC_GET_RAW_VAL>:

void LLD_ADC_GET_RAW_VAL()
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0

	uint16_t ADC_Va_raw;
	uint16_t ADC_Vb_raw;
	uint16_t ADC_Vc_raw;

	ADC_GET_RAW_VAL(Adc_Ia_ch, ADC_Ia_raw);
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <LLD_ADC_GET_RAW_VAL+0x68>)
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	81fb      	strh	r3, [r7, #14]
	ADC_GET_RAW_VAL(Adc_Ib_ch, ADC_Ib_raw);
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <LLD_ADC_GET_RAW_VAL+0x68>)
 800308a:	885b      	ldrh	r3, [r3, #2]
 800308c:	81bb      	strh	r3, [r7, #12]
	ADC_GET_RAW_VAL(Adc_Ic_ch, ADC_Ic_raw);
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <LLD_ADC_GET_RAW_VAL+0x68>)
 8003090:	889b      	ldrh	r3, [r3, #4]
 8003092:	817b      	strh	r3, [r7, #10]

	ADC_GET_RAW_VAL(Adc_Va_ch, ADC_Va_raw);
 8003094:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <LLD_ADC_GET_RAW_VAL+0x68>)
 8003096:	88db      	ldrh	r3, [r3, #6]
 8003098:	813b      	strh	r3, [r7, #8]
	ADC_GET_RAW_VAL(Adc_Vb_ch, ADC_Vb_raw);
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <LLD_ADC_GET_RAW_VAL+0x68>)
 800309c:	891b      	ldrh	r3, [r3, #8]
 800309e:	80fb      	strh	r3, [r7, #6]
	ADC_GET_RAW_VAL(Adc_Vc_ch, ADC_Vc_raw);
 80030a0:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <LLD_ADC_GET_RAW_VAL+0x68>)
 80030a2:	895b      	ldrh	r3, [r3, #10]
 80030a4:	80bb      	strh	r3, [r7, #4]
	ADC_GET_RAW_VAL(Adc_DC_Link_ch, ADC_V_DcLink_raw);
 80030a6:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <LLD_ADC_GET_RAW_VAL+0x68>)
 80030a8:	899b      	ldrh	r3, [r3, #12]
 80030aa:	807b      	strh	r3, [r7, #2]

	Set_AdcVa(ADC_Va_raw);
 80030ac:	4a0e      	ldr	r2, [pc, #56]	; (80030e8 <LLD_ADC_GET_RAW_VAL+0x6c>)
 80030ae:	893b      	ldrh	r3, [r7, #8]
 80030b0:	8013      	strh	r3, [r2, #0]
	Set_AdcVb(ADC_Vb_raw);
 80030b2:	4a0e      	ldr	r2, [pc, #56]	; (80030ec <LLD_ADC_GET_RAW_VAL+0x70>)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	8013      	strh	r3, [r2, #0]
	Set_AdcVc(ADC_Vc_raw);
 80030b8:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <LLD_ADC_GET_RAW_VAL+0x74>)
 80030ba:	88bb      	ldrh	r3, [r7, #4]
 80030bc:	8013      	strh	r3, [r2, #0]
	ADC_GET_RAW_VAL(Adc_Ib_ch, ADC_Ib_raw);
	ADC_GET_RAW_VAL(Adc_Ic_ch, ADC_Ic_raw);
	ADC_GET_RAW_VAL(Adc_DC_Link_ch, ADC_V_DcLink_raw);

#endif
	Set_AdcIa(ADC_Ia_raw);
 80030be:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <LLD_ADC_GET_RAW_VAL+0x78>)
 80030c0:	89fb      	ldrh	r3, [r7, #14]
 80030c2:	8013      	strh	r3, [r2, #0]
	Set_AdcIb(ADC_Ib_raw);
 80030c4:	4a0c      	ldr	r2, [pc, #48]	; (80030f8 <LLD_ADC_GET_RAW_VAL+0x7c>)
 80030c6:	89bb      	ldrh	r3, [r7, #12]
 80030c8:	8013      	strh	r3, [r2, #0]
	Set_AdcIc(ADC_Ic_raw);
 80030ca:	4a0c      	ldr	r2, [pc, #48]	; (80030fc <LLD_ADC_GET_RAW_VAL+0x80>)
 80030cc:	897b      	ldrh	r3, [r7, #10]
 80030ce:	8013      	strh	r3, [r2, #0]
	Set_AdcDcLink(ADC_V_DcLink_raw);
 80030d0:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <LLD_ADC_GET_RAW_VAL+0x84>)
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	8013      	strh	r3, [r2, #0]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20004168 	.word	0x20004168
 80030e8:	2000415e 	.word	0x2000415e
 80030ec:	2000415c 	.word	0x2000415c
 80030f0:	20004162 	.word	0x20004162
 80030f4:	20004164 	.word	0x20004164
 80030f8:	20004166 	.word	0x20004166
 80030fc:	20004176 	.word	0x20004176
 8003100:	20004160 	.word	0x20004160

08003104 <RCC_INIT>:
  *         configuration.
  * @param  None
  * @retval None
  */
void RCC_INIT(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b094      	sub	sp, #80	; 0x50
 8003108:	af00      	add	r7, sp, #0
	 	 	 	 	 	 	 	 	 	 Depending on the source selected (HSE, HSI or LSI),
	 	 	 	 	 	 	 	 	 	 the osc state will be set only for one type */
	RCC_ClkInitTypeDef RCC_ClockInit;   /*Set clocks that need to be init (SYSCLK, HCLK(for AHB,APB1 and APB2)),
	 	 	 	 	 	 	 	 	 	  and the appropiete PLL dividers*/

	__PWR_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <RCC_INIT+0xa0>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <RCC_INIT+0xa0>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <RCC_INIT+0xa0>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	4b1f      	ldr	r3, [pc, #124]	; (80031a8 <RCC_INIT+0xa4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003132:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <RCC_INIT+0xa4>)
 8003134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <RCC_INIT+0xa4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	687b      	ldr	r3, [r7, #4]

	RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003146:	2301      	movs	r3, #1
 8003148:	623b      	str	r3, [r7, #32]
	RCC_OscInit.HSEState = RCC_HSE_BYPASS;//RCC_HSE_ON;
 800314a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInit.PLL.PLLState = RCC_PLL_ON;
 8003150:	2302      	movs	r3, #2
 8003152:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003154:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInit.PLL.PLLM = 8;
 800315a:	2308      	movs	r3, #8
 800315c:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInit.PLL.PLLN = 336;
 800315e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003162:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInit.PLL.PLLP = RCC_PLLP_DIV4;
 8003164:	2304      	movs	r3, #4
 8003166:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInit.PLL.PLLQ = 7;
 8003168:	2307      	movs	r3, #7
 800316a:	64fb      	str	r3, [r7, #76]	; 0x4c

	RCC_ClockInit.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800316c:	230f      	movs	r3, #15
 800316e:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClockInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003170:	2302      	movs	r3, #2
 8003172:	613b      	str	r3, [r7, #16]
	RCC_ClockInit.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
	RCC_ClockInit.APB1CLKDivider = RCC_HCLK_DIV2;
 8003178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800317c:	61bb      	str	r3, [r7, #24]
	RCC_ClockInit.APB2CLKDivider = RCC_HCLK_DIV1;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]


	HAL_RCC_DeInit();
 8003182:	f7fe ffc1 	bl	8002108 <HAL_RCC_DeInit>
	HAL_RCC_OscConfig(&RCC_OscInit);
 8003186:	f107 0320 	add.w	r3, r7, #32
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fb8c 	bl	80018a8 <HAL_RCC_OscConfig>
	HAL_RCC_ClockConfig(&RCC_ClockInit, FLASH_LATENCY_2);
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	2102      	movs	r1, #2
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fdc8 	bl	8001d2c <HAL_RCC_ClockConfig>
}
 800319c:	bf00      	nop
 800319e:	3750      	adds	r7, #80	; 0x50
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40007000 	.word	0x40007000

080031ac <SystemInit>:


void SystemInit(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031b0:	4b16      	ldr	r3, [pc, #88]	; (800320c <SystemInit+0x60>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	4a15      	ldr	r2, [pc, #84]	; (800320c <SystemInit+0x60>)
 80031b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <SystemInit+0x64>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a12      	ldr	r2, [pc, #72]	; (8003210 <SystemInit+0x64>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <SystemInit+0x64>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <SystemInit+0x64>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <SystemInit+0x64>)
 80031d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <SystemInit+0x64>)
 80031e4:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <SystemInit+0x68>)
 80031e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <SystemInit+0x64>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a08      	ldr	r2, [pc, #32]	; (8003210 <SystemInit+0x64>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <SystemInit+0x64>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <SystemInit+0x60>)
 80031fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003200:	609a      	str	r2, [r3, #8]
#endif
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00
 8003210:	40023800 	.word	0x40023800
 8003214:	24003010 	.word	0x24003010

08003218 <TIMER2_INIT>:
 *      Author: uidp7521
 */
#include "lld_timers.h"

void TIMER2_INIT()
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0

	/*Enable AHB clock*/
	__TIM2_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <TIMER2_INIT+0x70>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	4a18      	ldr	r2, [pc, #96]	; (8003288 <TIMER2_INIT+0x70>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6413      	str	r3, [r2, #64]	; 0x40
 800322e:	4b16      	ldr	r3, [pc, #88]	; (8003288 <TIMER2_INIT+0x70>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
   /*
    * Prescaler 0 => Fcnt = Ftim_clk/(Prescaler + 1)
    *                Fcnt = 84Mhz
    *                Tcnt = 11,9047619047 ns
    */
	TIM2->PSC = 0;
 800323a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800323e:	2200      	movs	r2, #0
 8003240:	629a      	str	r2, [r3, #40]	; 0x28
	/*Interrupt period = Tcnt*ARR
	 * Ex: For 0.0002us ARR needs to be 16800
	 * */
	TIM2->ARR = 16800;
 8003242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003246:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800324a:	62da      	str	r2, [r3, #44]	; 0x2c

	/*master/slave controller unit*/
	/*Enable master mode to trigger start
	 * ADC conversion
	 */
	TIM2->CR2 |= TIM_CR2_MMS_1;
 800324c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003256:	f043 0320 	orr.w	r3, r3, #32
 800325a:	6053      	str	r3, [r2, #4]
	TIM2->SMCR |= TIM_SMCR_MSM;
 800325c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326a:	6093      	str	r3, [r2, #8]
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
	TIM2->DIER |=TIM_DIER_UIE;*/
#endif
    /*Enable Counter*/
	TIM2->CR1  |= TIM_CR1_CEN;
 800326c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6013      	str	r3, [r2, #0]

}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40023800 	.word	0x40023800

0800328c <TESS_GPIO_INIT>:

void TESS_GPIO_INIT()
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOx_Init;

	GPIOx_Init.Pin   = GPIO_PIN_10;
 8003292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003296:	607b      	str	r3, [r7, #4]
	GPIOx_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8003298:	2301      	movs	r3, #1
 800329a:	60bb      	str	r3, [r7, #8]
	GPIOx_Init.Pull  = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
	GPIOx_Init.Speed = GPIO_SPEED_HIGH;
 80032a0:	2303      	movs	r3, #3
 80032a2:	613b      	str	r3, [r7, #16]

	/*Enable bus clock for ports*/
	__GPIOC_CLK_ENABLE();
 80032a4:	2300      	movs	r3, #0
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <TESS_GPIO_INIT+0x48>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <TESS_GPIO_INIT+0x48>)
 80032ae:	f043 0304 	orr.w	r3, r3, #4
 80032b2:	6313      	str	r3, [r2, #48]	; 0x30
 80032b4:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <TESS_GPIO_INIT+0x48>)
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
    /*HAL func that will do the proper initialisation*/
	HAL_GPIO_Init(GPIOC, &GPIOx_Init);
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	4619      	mov	r1, r3
 80032c4:	4804      	ldr	r0, [pc, #16]	; (80032d8 <TESS_GPIO_INIT+0x4c>)
 80032c6:	f7fe f95b 	bl	8001580 <HAL_GPIO_Init>
}
 80032ca:	bf00      	nop
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40020800 	.word	0x40020800

080032dc <USART2_UART_Init>:
#include "lld_usart.h"

void DMA_INIT_UART();

void USART2_UART_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <USART2_UART_Init+0x50>)
 80032e2:	4a13      	ldr	r2, [pc, #76]	; (8003330 <USART2_UART_Init+0x54>)
 80032e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 750000;
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <USART2_UART_Init+0x50>)
 80032e8:	4a12      	ldr	r2, [pc, #72]	; (8003334 <USART2_UART_Init+0x58>)
 80032ea:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <USART2_UART_Init+0x50>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032f2:	4b0e      	ldr	r3, [pc, #56]	; (800332c <USART2_UART_Init+0x50>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <USART2_UART_Init+0x50>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <USART2_UART_Init+0x50>)
 8003300:	220c      	movs	r2, #12
 8003302:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <USART2_UART_Init+0x50>)
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <USART2_UART_Init+0x50>)
 800330c:	2200      	movs	r2, #0
 800330e:	61da      	str	r2, [r3, #28]
#if (CFG_FMSTR_ON)
  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
  __HAL_UART_ENABLE_IT(&huart2,UART_IT_TXE);
  __HAL_UART_ENABLE_IT(&huart2,UART_IT_TC);
#endif
  HAL_UART_Init(&huart2);
 8003310:	4806      	ldr	r0, [pc, #24]	; (800332c <USART2_UART_Init+0x50>)
 8003312:	f7fe ffc3 	bl	800229c <HAL_UART_Init>
#if CFG_ACQ_ON

  USART_ENABLE_RXIT();
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <USART2_UART_Init+0x54>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	4a05      	ldr	r2, [pc, #20]	; (8003330 <USART2_UART_Init+0x54>)
 800331c:	f043 0320 	orr.w	r3, r3, #32
 8003320:	60d3      	str	r3, [r2, #12]
  DMA_INIT_UART();
 8003322:	f000 f809 	bl	8003338 <DMA_INIT_UART>
#endif
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200040e0 	.word	0x200040e0
 8003330:	40004400 	.word	0x40004400
 8003334:	000b71b0 	.word	0x000b71b0

08003338 <DMA_INIT_UART>:

void DMA_INIT_UART()
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
    /*Configure DMA controller*/
     __HAL_RCC_DMA1_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <DMA_INIT_UART+0x9c>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <DMA_INIT_UART+0x9c>)
 8003348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <DMA_INIT_UART+0x9c>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	687b      	ldr	r3, [r7, #4]

    /* Peripheral DMA init*/
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800335a:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <DMA_INIT_UART+0xa0>)
 800335c:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <DMA_INIT_UART+0xa4>)
 800335e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003360:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <DMA_INIT_UART+0xa0>)
 8003362:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003366:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <DMA_INIT_UART+0xa0>)
 800336a:	2240      	movs	r2, #64	; 0x40
 800336c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <DMA_INIT_UART+0xa0>)
 8003370:	2200      	movs	r2, #0
 8003372:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <DMA_INIT_UART+0xa0>)
 8003376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800337a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 800337c:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <DMA_INIT_UART+0xa0>)
 800337e:	2200      	movs	r2, #0
 8003380:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003382:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <DMA_INIT_UART+0xa0>)
 8003384:	2200      	movs	r2, #0
 8003386:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR; //DMA_NORMAL; //
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <DMA_INIT_UART+0xa0>)
 800338a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800338e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <DMA_INIT_UART+0xa0>)
 8003392:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003396:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <DMA_INIT_UART+0xa0>)
 800339a:	2200      	movs	r2, #0
 800339c:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_DMA_Init(&hdma_usart2_tx);
 800339e:	480e      	ldr	r0, [pc, #56]	; (80033d8 <DMA_INIT_UART+0xa0>)
 80033a0:	f7fd fce6 	bl	8000d70 <HAL_DMA_Init>


  	__HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <DMA_INIT_UART+0xa8>)
 80033a6:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <DMA_INIT_UART+0xa0>)
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <DMA_INIT_UART+0xa0>)
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <DMA_INIT_UART+0xa8>)
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38

  	/*Enable Transfer complete interrupt*/
    DMA1_Stream6->CR   |= DMA_SxCR_TCIE;
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <DMA_INIT_UART+0xa4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a09      	ldr	r2, [pc, #36]	; (80033dc <DMA_INIT_UART+0xa4>)
 80033b6:	f043 0310 	orr.w	r3, r3, #16
 80033ba:	6013      	str	r3, [r2, #0]

    /* DMA interrupt init */
    HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 80033bc:	2200      	movs	r2, #0
 80033be:	2101      	movs	r1, #1
 80033c0:	2011      	movs	r0, #17
 80033c2:	f7fd fc91 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80033c6:	2011      	movs	r0, #17
 80033c8:	f7fd fcaa 	bl	8000d20 <HAL_NVIC_EnableIRQ>
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40023800 	.word	0x40023800
 80033d8:	20000074 	.word	0x20000074
 80033dc:	400260a0 	.word	0x400260a0
 80033e0:	200040e0 	.word	0x200040e0

080033e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	; 0x28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_UART_MspInit+0x84>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d133      	bne.n	800345e <HAL_UART_MspInit+0x7a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <HAL_UART_MspInit+0x88>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a1b      	ldr	r2, [pc, #108]	; (800346c <HAL_UART_MspInit+0x88>)
 8003400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
 8003406:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_UART_MspInit+0x88>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */

    __GPIOA_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <HAL_UART_MspInit+0x88>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a14      	ldr	r2, [pc, #80]	; (800346c <HAL_UART_MspInit+0x88>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_UART_MspInit+0x88>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = SCI_TX_Pin|SCI_RX_Pin;
 800342e:	230c      	movs	r3, #12
 8003430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800343a:	2302      	movs	r3, #2
 800343c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800343e:	2307      	movs	r3, #7
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	4619      	mov	r1, r3
 8003448:	4809      	ldr	r0, [pc, #36]	; (8003470 <HAL_UART_MspInit+0x8c>)
 800344a:	f7fe f899 	bl	8001580 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800344e:	2200      	movs	r2, #0
 8003450:	2102      	movs	r1, #2
 8003452:	2026      	movs	r0, #38	; 0x26
 8003454:	f7fd fc48 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003458:	2026      	movs	r0, #38	; 0x26
 800345a:	f7fd fc61 	bl	8000d20 <HAL_NVIC_EnableIRQ>

  }
}
 800345e:	bf00      	nop
 8003460:	3728      	adds	r7, #40	; 0x28
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40004400 	.word	0x40004400
 800346c:	40023800 	.word	0x40023800
 8003470:	40020000 	.word	0x40020000

08003474 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	TESS_DAS_UPDATE_UPON_TC();
 800347c:	f7fd f916 	bl	80006ac <TESS_DAS_UPDATE_UPON_TC>
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800348c:	f7fd fb64 	bl	8000b58 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8003490:	f7fd fc60 	bl	8000d54 <HAL_SYSTICK_IRQHandler>
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}

08003498 <ADC_IRQHandler>:


void ADC_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
#if CFG_ADC_REG_CONV

	task_scheduler();
 800349c:	f000 f87a 	bl	8003594 <task_scheduler>
	/*clear interrupt flag before exit */
	ADC_CLEAR_IT();
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <ADC_IRQHandler+0x18>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a02      	ldr	r2, [pc, #8]	; (80034b0 <ADC_IRQHandler+0x18>)
 80034a6:	f023 030c 	bic.w	r3, r3, #12
 80034aa:	6013      	str	r3, [r2, #0]
#endif
}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40012000 	.word	0x40012000

080034b4 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
    /*clear interrupt flag before exit */
}
 80034b8:	bf00      	nop
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <TIM2_IRQHandler>:

void TIM2_IRQHandler()
{
 80034c2:	b480      	push	{r7}
 80034c4:	af00      	add	r7, sp, #0
#if !CFG_ADC_REG_CONV
	task_scheduler();

	TIM2_CLEAR_IT();
#endif
}
 80034c6:	bf00      	nop
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0

#if	FMSTR_DISABLE
	uint8_t temp_dr;
	uint8_t temp_sr;
	temp_sr = USART2->SR;
 80034d6:	4b17      	ldr	r3, [pc, #92]	; (8003534 <USART2_IRQHandler+0x64>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	71fb      	strb	r3, [r7, #7]
	/*Check interrupt source*/
	if ((temp_sr & USART_SR_RXNE)>>USART_SR_RXNE_Pos)
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <USART2_IRQHandler+0x26>
	{
		/*Check for commands from PC-tester
		 * Call commands handler
	    */
		//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
		temp_dr = USART2->DR;
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <USART2_IRQHandler+0x64>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	71bb      	strb	r3, [r7, #6]
		TESS_DAS_GET_COMMANDS(temp_dr);
 80034ec:	79bb      	ldrb	r3, [r7, #6]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd f8ba 	bl	8000668 <TESS_DAS_GET_COMMANDS>
 80034f4:	e016      	b.n	8003524 <USART2_IRQHandler+0x54>

	}
	else if ((temp_sr & USART_SR_TC)>>USART_SR_TC_Pos)
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <USART2_IRQHandler+0x3e>
	{
		/*the package has been sent
		 * - enable RX to get new commands
		 * - disable DMA and TX until further commands*/
		USART_CLEAR_TCIT();
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <USART2_IRQHandler+0x64>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0b      	ldr	r2, [pc, #44]	; (8003534 <USART2_IRQHandler+0x64>)
 8003506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	e00a      	b.n	8003524 <USART2_IRQHandler+0x54>
	}else if ((temp_sr & USART_SR_PE)>>USART_SR_PE_Pos)
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <USART2_IRQHandler+0x54>
	{
		/*dummy read from DR*/
		temp_dr = USART2->DR;
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <USART2_IRQHandler+0x64>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	71bb      	strb	r3, [r7, #6]
		USART2->SR = 0;
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <USART2_IRQHandler+0x64>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
#else
	FMSTR_ProcessSCI();
#endif
	/*clear interrupt flag before exit */

	HAL_UART_IRQHandler(&huart2);
 8003524:	4804      	ldr	r0, [pc, #16]	; (8003538 <USART2_IRQHandler+0x68>)
 8003526:	f7fe ffcd 	bl	80024c4 <HAL_UART_IRQHandler>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40004400 	.word	0x40004400
 8003538:	200040e0 	.word	0x200040e0

0800353c <DMA1_Stream6_IRQHandler>:

/* This function handles DMA1 stream6 global interrupt. */
void DMA1_Stream6_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 8003540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003544:	4803      	ldr	r0, [pc, #12]	; (8003554 <DMA1_Stream6_IRQHandler+0x18>)
 8003546:	f7fe f99d 	bl	8001884 <HAL_GPIO_TogglePin>

	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800354a:	4803      	ldr	r0, [pc, #12]	; (8003558 <DMA1_Stream6_IRQHandler+0x1c>)
 800354c:	f7fd fdb0 	bl	80010b0 <HAL_DMA_IRQHandler>
}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40020800 	.word	0x40020800
 8003558:	20000074 	.word	0x20000074

0800355c <main>:
  ******************************************************************************
*/
#include "main.h"

int main(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
	MAIN_INIT();
 8003560:	f000 f808 	bl	8003574 <MAIN_INIT>

	for(;;)
	{
		MAIN_CLOCK++;
 8003564:	4b02      	ldr	r3, [pc, #8]	; (8003570 <main+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3301      	adds	r3, #1
 800356a:	4a01      	ldr	r2, [pc, #4]	; (8003570 <main+0x14>)
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e7f9      	b.n	8003564 <main+0x8>
 8003570:	20004178 	.word	0x20004178

08003574 <MAIN_INIT>:
 */
#include "main_init.h"


void MAIN_INIT(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
	RCC_INIT();
 8003578:	f7ff fdc4 	bl	8003104 <RCC_INIT>

	ADC_INIT();
 800357c:	f7ff fc70 	bl	8002e60 <ADC_INIT>
    TIMER2_INIT();
 8003580:	f7ff fe4a 	bl	8003218 <TIMER2_INIT>
    TESS_GPIO_INIT();
 8003584:	f7ff fe82 	bl	800328c <TESS_GPIO_INIT>

#if CFG_ACQ_ON
	USART2_UART_Init();
 8003588:	f7ff fea8 	bl	80032dc <USART2_UART_Init>
	TESS_DAS_INIT();
 800358c:	f7fc ffa2 	bl	80004d4 <TESS_DAS_INIT>
#endif
#if !FMSTR_DISABLE
	USART2_UART_Init();
	FMSTR_Init();
#endif
}
 8003590:	bf00      	nop
 8003592:	bd80      	pop	{r7, pc}

08003594 <task_scheduler>:
task_t tasks[3]={{1, 1, _100US_LOOP, 0},
                 {20, 20, _2MS_LOOP, 0},
                 {100, 100, _10MS_LOOP, 0}};

void task_scheduler(void) 
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
  uint8_t i;
  //SaveContext(); //save temporary registers, if necessary
  

  for (i=0; i < tasksNum; ++i) 
 800359a:	2300      	movs	r3, #0
 800359c:	71fb      	strb	r3, [r7, #7]
 800359e:	e07f      	b.n	80036a0 <task_scheduler+0x10c>
  { // Heart of scheduler code
    
    if ( (tasks[i].elapsedTime >= tasks[i].period)      // Task ready
 80035a0:	79fa      	ldrb	r2, [r7, #7]
 80035a2:	4944      	ldr	r1, [pc, #272]	; (80036b4 <task_scheduler+0x120>)
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	3302      	adds	r3, #2
 80035b0:	8819      	ldrh	r1, [r3, #0]
 80035b2:	79fa      	ldrb	r2, [r7, #7]
 80035b4:	483f      	ldr	r0, [pc, #252]	; (80036b4 <task_scheduler+0x120>)
 80035b6:	4613      	mov	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4403      	add	r3, r0
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	4299      	cmp	r1, r3
 80035c4:	d352      	bcc.n	800366c <task_scheduler+0xd8>
        && (runningTasks[currentTask] > i)              // Task priority > current task priority
 80035c6:	4b3c      	ldr	r3, [pc, #240]	; (80036b8 <task_scheduler+0x124>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <task_scheduler+0x128>)
 80035ce:	5c9b      	ldrb	r3, [r3, r2]
 80035d0:	79fa      	ldrb	r2, [r7, #7]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d24a      	bcs.n	800366c <task_scheduler+0xd8>
        && (!tasks[i].running)      )                    // Task not already running (no self-preemption)
 80035d6:	79fa      	ldrb	r2, [r7, #7]
 80035d8:	4936      	ldr	r1, [pc, #216]	; (80036b4 <task_scheduler+0x120>)
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	3308      	adds	r3, #8
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d13f      	bne.n	800366c <task_scheduler+0xd8>
          {
              
              //HAL_SuspendTick();                        //DisableInterrupts -  Critical section void 

              tasks[i].elapsedTime = 0; // Reset time since last tick
 80035ec:	79fa      	ldrb	r2, [r7, #7]
 80035ee:	4931      	ldr	r1, [pc, #196]	; (80036b4 <task_scheduler+0x120>)
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3302      	adds	r3, #2
 80035fc:	2200      	movs	r2, #0
 80035fe:	801a      	strh	r2, [r3, #0]
              tasks[i].running = 1; // Mark as running
 8003600:	79fa      	ldrb	r2, [r7, #7]
 8003602:	492c      	ldr	r1, [pc, #176]	; (80036b4 <task_scheduler+0x120>)
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	3308      	adds	r3, #8
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
              currentTask += 1;
 8003614:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <task_scheduler+0x124>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	b2da      	uxtb	r2, r3
 800361c:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <task_scheduler+0x124>)
 800361e:	701a      	strb	r2, [r3, #0]
              runningTasks[currentTask] = i; // Add to runningTasks
 8003620:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <task_scheduler+0x124>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	4619      	mov	r1, r3
 8003626:	4a25      	ldr	r2, [pc, #148]	; (80036bc <task_scheduler+0x128>)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	5453      	strb	r3, [r2, r1]
              
             // HAL_ResumeTick();                         //EnableInterrupts - End critical section void 
              
              tasks[i].function(); // Execute task
 800362c:	79fa      	ldrb	r2, [r7, #7]
 800362e:	4921      	ldr	r1, [pc, #132]	; (80036b4 <task_scheduler+0x120>)
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	3304      	adds	r3, #4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4798      	blx	r3
              
              //HAL_SuspendTick();                        //DisableInterrupts - Critical section 
              
              tasks[i].running = 0;
 8003640:	79fa      	ldrb	r2, [r7, #7]
 8003642:	491c      	ldr	r1, [pc, #112]	; (80036b4 <task_scheduler+0x120>)
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3308      	adds	r3, #8
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
              runningTasks[currentTask] = idleTask; // Remove from runningTasks
 8003654:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <task_scheduler+0x124>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	21ff      	movs	r1, #255	; 0xff
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <task_scheduler+0x128>)
 800365e:	5499      	strb	r1, [r3, r2]
              currentTask -= 1;
 8003660:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <task_scheduler+0x124>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	3b01      	subs	r3, #1
 8003666:	b2da      	uxtb	r2, r3
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <task_scheduler+0x124>)
 800366a:	701a      	strb	r2, [r3, #0]
              
              //HAL_ResumeTick();                         //EnableInterrupts - End critical section void 
             
            }
    tasks[i].elapsedTime += tasksPeriod;
 800366c:	79fa      	ldrb	r2, [r7, #7]
 800366e:	4911      	ldr	r1, [pc, #68]	; (80036b4 <task_scheduler+0x120>)
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3302      	adds	r3, #2
 800367c:	8819      	ldrh	r1, [r3, #0]
 800367e:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <task_scheduler+0x12c>)
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	79fa      	ldrb	r2, [r7, #7]
 8003684:	440b      	add	r3, r1
 8003686:	b298      	uxth	r0, r3
 8003688:	490a      	ldr	r1, [pc, #40]	; (80036b4 <task_scheduler+0x120>)
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3302      	adds	r3, #2
 8003696:	4602      	mov	r2, r0
 8003698:	801a      	strh	r2, [r3, #0]
  for (i=0; i < tasksNum; ++i) 
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	3301      	adds	r3, #1
 800369e:	71fb      	strb	r3, [r7, #7]
 80036a0:	2203      	movs	r2, #3
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	4293      	cmp	r3, r2
 80036a6:	f4ff af7b 	bcc.w	80035a0 <task_scheduler+0xc>
  }
  //RestoreContext();//restore temporary registers, if necessary
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000014 	.word	0x20000014
 80036b8:	20000054 	.word	0x20000054
 80036bc:	2000000c 	.word	0x2000000c
 80036c0:	20000010 	.word	0x20000010

080036c4 <_100US_LOOP>:
#include "tasks.h"


void _100US_LOOP (void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
	LLD_ADC_GET_RAW_VAL();
 80036c8:	f7ff fcd8 	bl	800307c <LLD_ADC_GET_RAW_VAL>

#if CFG_ACQ_ON
	TESS_DAS_MAIN();
 80036cc:	f7fc ff58 	bl	8000580 <TESS_DAS_MAIN>
      FMSTR_Poll();
      FMSTR_Recorder();
    }
#endif

}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <_2MS_LOOP>:

void _2MS_LOOP (void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0

}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <_10MS_LOOP>:

void _10MS_LOOP (void)
{
 80036e2:	b480      	push	{r7}
 80036e4:	af00      	add	r7, sp, #0


}
 80036e6:	bf00      	nop
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80036f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003728 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036f6:	e003      	b.n	8003700 <LoopCopyDataInit>

080036f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036fe:	3104      	adds	r1, #4

08003700 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003700:	480b      	ldr	r0, [pc, #44]	; (8003730 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003704:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003706:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003708:	d3f6      	bcc.n	80036f8 <CopyDataInit>
  ldr  r2, =_sbss
 800370a:	4a0b      	ldr	r2, [pc, #44]	; (8003738 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800370c:	e002      	b.n	8003714 <LoopFillZerobss>

0800370e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800370e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003710:	f842 3b04 	str.w	r3, [r2], #4

08003714 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003716:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003718:	d3f9      	bcc.n	800370e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800371a:	f7ff fd47 	bl	80031ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800371e:	f000 f811 	bl	8003744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003722:	f7ff ff1b 	bl	800355c <main>
  bx  lr    
 8003726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003728:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800372c:	080037d4 	.word	0x080037d4
  ldr  r0, =_sdata
 8003730:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003734:	20000038 	.word	0x20000038
  ldr  r2, =_sbss
 8003738:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 800373c:	2000417c 	.word	0x2000417c

08003740 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003740:	e7fe      	b.n	8003740 <BusFault_Handler>
	...

08003744 <__libc_init_array>:
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	4e0d      	ldr	r6, [pc, #52]	; (800377c <__libc_init_array+0x38>)
 8003748:	4c0d      	ldr	r4, [pc, #52]	; (8003780 <__libc_init_array+0x3c>)
 800374a:	1ba4      	subs	r4, r4, r6
 800374c:	10a4      	asrs	r4, r4, #2
 800374e:	2500      	movs	r5, #0
 8003750:	42a5      	cmp	r5, r4
 8003752:	d109      	bne.n	8003768 <__libc_init_array+0x24>
 8003754:	4e0b      	ldr	r6, [pc, #44]	; (8003784 <__libc_init_array+0x40>)
 8003756:	4c0c      	ldr	r4, [pc, #48]	; (8003788 <__libc_init_array+0x44>)
 8003758:	f000 f818 	bl	800378c <_init>
 800375c:	1ba4      	subs	r4, r4, r6
 800375e:	10a4      	asrs	r4, r4, #2
 8003760:	2500      	movs	r5, #0
 8003762:	42a5      	cmp	r5, r4
 8003764:	d105      	bne.n	8003772 <__libc_init_array+0x2e>
 8003766:	bd70      	pop	{r4, r5, r6, pc}
 8003768:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800376c:	4798      	blx	r3
 800376e:	3501      	adds	r5, #1
 8003770:	e7ee      	b.n	8003750 <__libc_init_array+0xc>
 8003772:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003776:	4798      	blx	r3
 8003778:	3501      	adds	r5, #1
 800377a:	e7f2      	b.n	8003762 <__libc_init_array+0x1e>
 800377c:	080037cc 	.word	0x080037cc
 8003780:	080037cc 	.word	0x080037cc
 8003784:	080037cc 	.word	0x080037cc
 8003788:	080037d0 	.word	0x080037d0

0800378c <_init>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	bf00      	nop
 8003790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003792:	bc08      	pop	{r3}
 8003794:	469e      	mov	lr, r3
 8003796:	4770      	bx	lr

08003798 <_fini>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	bf00      	nop
 800379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379e:	bc08      	pop	{r3}
 80037a0:	469e      	mov	lr, r3
 80037a2:	4770      	bx	lr
